const GravDataIndex = [{"title":"Advanced Search","date":"2019-08-24T18:22:56+00:00","url":"http:\/\/localhost\/docs\/search","taxonomy":{"categories":[],"tags":[]},"content":"# Advanced Search\n"},{"title":"What is Love? Haddaway","date":"2019-08-12T11:13:39+00:00","url":"http:\/\/localhost\/docs\/basics\/what-is-grav\/what-is-love","taxonomy":{"categories":[],"tags":[]},"media":["refuge-des-merveilles-tende-france---denis-degioanni-unsplashcom.jpg"]},{"title":"What is Grav?","date":"2019-07-17T13:39:21+00:00","url":"http:\/\/localhost\/docs\/basics\/what-is-grav","taxonomy":{"categories":[],"tags":[]}},{"title":"Installation","date":"2019-07-04T12:16:11+00:00","url":"http:\/\/localhost\/docs\/basics\/installation","taxonomy":{"categories":[],"tags":[]},"media":["install.png","problems.png"],"content":"Installation of Grav is a trivial process. In fact, there is no real installation. You have **three** options for installing Grav. The first - and simplest - way is to download the **zip** archive, and extract it. The second way is to install with **Composer**. The third way is to clone the source project directly from **GitHub**, and then run an included script command to install needed dependencies:\n\n## Check for PHP version\n\nGrav is incredibly easy to set up and get running. Be sure you have at least PHP version 5.6.3 by going to the terminal and typing `php -v`:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-10\"]\nphp -v\nPHP 7.2.15 (cli) (built: Feb 7 2019 20:10:03) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\nwith Zend OPcache v7.2.15, Copyright (c) 1999-2018, by Zend Technologies\n[\/prism]\n\n## Option 1: Install from ZIP package\n\nThe easiest way to install Grav is to download the ZIP package and extract it:\n\n1. Download the latest-and-greatest **[Grav](https:\/\/getgrav.org\/download\/core\/grav\/latest)** or **[Grav + Admin](https:\/\/getgrav.org\/download\/core\/grav-admin\/latest)** package.\n2. Extract the ZIP file in the [webroot](https:\/\/www.wordnik.com\/words\/webroot) of your web server, e.g. `~\/webroot\/grav`\n\n!!! There are [Skeleton](https:\/\/getgrav.org\/downloads\/skeletons)-packages available, which include the core Grav system, sample pages, plugins, and configuration. They are a great way to get started; all you have to do is [download the Skeleton](https:\/\/getgrav.org\/downloads\/skeletons)-package you prefer, and follow the steps above.\n\n!!!! If you downloaded the ZIP file and then plan to move it to your webroot, please move the **ENTIRE FOLDER** because it contains several hidden files (such as .htaccess) that will not be selected by default. The omission of these hidden files can cause problems when running Grav.\n\n## Option 2: Install with composer\n\nThe alternative method is to install Grav with [composer](https:\/\/getcomposer.org\/doc\/00-intro.md#installation-linux-unix-osx):\n\n[prism classes=\"language-bash command-line\"]\ncomposer create-project getgrav\/grav ~\/webroot\/grav\n[\/prism]\n\nIf you want to check out the bleeding edge version of Grav, add `1.x-dev` as an additional parameter:\n\n[prism classes=\"language-bash command-line\"]\ncomposer create-project getgrav\/grav ~\/webroot\/grav 1.x-dev\n[\/prism]\n\n## Option 3: Install from GitHub\n\nAnother method is to clone Grav from the GitHub repository, and then run a simple dependency installation script:\n\n1. Clone the Grav repository from [GitHub](https:\/\/github.com\/getgrav\/grav) to a folder in the webroot of your server, e.g. `~\/webroot\/grav`. Launch a **terminal** or **console** and navigate to the webroot folder:\n\n   [prism classes=\"language-bash command-line\"]\n   cd ~\/webroot\n   git clone -b master https:\/\/github.com\/getgrav\/grav.git\n   [\/prism]\n\n2. Install **vendor dependencies** via [composer](https:\/\/getcomposer.org\/doc\/00-intro.md#installation-linux-unix-osx):\n\n   [prism classes=\"language-bash command-line\"]\n   cd ~\/webroot\/grav\n   composer install --no-dev -o\n   [\/prism]\n\n3. Install the **plugin** and **theme dependencies** by using the [Grav CLI application](..\/..\/advanced\/grav-cli) `bin\/grav`:\n\n   [prism classes=\"language-bash command-line\"]\n   cd ~\/webroot\/grav\n   bin\/grav install\n   [\/prism]\n\n   This will automatically **clone** the required dependencies from GitHub directly into this Grav installation.\n\n## Webservers\n\n#### Apache\/IIS\/Nginx\n\nUsing Grav with a web server such as Apache, IIS, or Nginx is as simple as extracting Grav into a folder under the [webroot](https:\/\/www.wordnik.com\/words\/webroot). All it requires to function is [version=15]PHP 5.6.3[\/version][version=16]PHP 7.1.3[\/version] or higher, so you should make sure that your server instance meets that requirement. More information about Grav requirements can be found in the [requirements](..\/requirements) chapter of this guide.\n\nIf your web root is, for example, `~\/public_html` then you could extract it into this folder and reach it via `http:\/\/localhost`. If you extracted it into `~\/public_html\/grav` you would reach it via `http:\/\/localhost\/grav`.\n\n!!! Every web server must be configured. Grav ships with .htaccess by default, for Apache, and comes with some [default server configuration files](https:\/\/github.com\/getgrav\/grav\/tree\/master\/webserver-configs), for `nginx`, `caddy server`, `iis`, and `lighttpd`. Use them accordingly when needed.\n\n#### Running Grav with the Built-in PHP Webserver Using `router.php`\n\nYou can run Grav using a simple command from Terminal \/ Command Prompt using the built-in PHP server available to any system with [version=15]PHP 5.6.3+[\/version][version=16]PHP 7.1.3+[\/version] installed. All you need to do is navigate to the root of your Grav install using the Terminal or Command Prompt and enter `php -S localhost:8000 system\/router.php`. You can replace the port number (in our example it's `8000`) with any port you prefer.\n\nEntering this command will present you with output similar to the following:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-10\"]\nphp -S localhost:8000 system\/router.php\nPHP 7.2.15 Development Server started at Sun Feb 17 21:02:14 2019\nListening on http:\/\/localhost:8000\nDocument root is \/Users\/rhuk\/Projects\/grav\/grav\nPress Ctrl-C to quit.\n[\/prism]\n\nYour terminal will also give you real-time updates of any activity on this ad hoc-style server. You can copy the URL provided in the `Listening on` line and paste that into your browser of choice to access your site, including the administrator.\n\n!!!! This is a useful tool for quick development, and should **not** be used in place of a dedicated web server such as Apache.\n\n## Successful Installation\n\nThe first time it loads, Grav pre-compiles some files. If you now refresh your browser, you will get a faster, cached version.\n\n![Grav Installed](install.png)\n\n!! In the previous examples, **\\$** represents the command prompt. This may look different on various platforms.\n\nBy default, Grav comes with some sample pages to give you something to get started with. Your site is already fully functional and you can configure it, add content, extend it, or customize it as much as you like.\n\n## Installation & Setup Problems\n\nIf any issues are discovered during the initial page load (or after a cache-flush event) you may see an error page:\n\n![Grav with Problems](problems.png)\n\nPlease consult the [Troubleshooting](..\/..\/troubleshooting) section for help regarding specific issues.\n\n! If you have issues with file permissions, please check the [Permissions Troubleshooting documentation](\/troubleshooting\/permissions). Also, you could look at the [Hosting Guides documentation](\/webservers-hosting) that has specific instructions for various hosting environments\n\n## Grav Updates\n\n### Automatic Updates\n\nThe preferred method for updating Grav is to use the **Grav Package Manager (GPM)**. All you need to do is to navigate to the root of your Grav site and type:\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm selfupgrade -f\n[\/prism]\n\nFull information can be found in the [Grav GPM Documentation](..\/..\/advanced\/grav-gpm). We also have GPM integrated into our [Admin Panel](..\/..\/admin-panel) plugin which will check, prompt, and automatically install any updates.\n"},{"title":"Requirements","date":"2019-06-30T21:58:57+00:00","url":"http:\/\/localhost\/docs\/basics\/requirements","taxonomy":{"categories":["docs"],"tags":[]},"content":"Grav is intentionally designed with few requirements. You can easily run Grav on your local computer, as well as 99% of all Web hosting providers. If you have a pen handy, jot down the following Grav system requirements:\n\n1. Web Server (Apache, Nginx, LiteSpeed, Lightly, IIS, etc.)\n[version=15]\n2. PHP 5.6.3 or higher\n[\/version]\n[version=16]\n2. PHP 7.1.3 or higher\n[\/version]\n3. hmm... that's it really, (but please look at PHP requirements for a smooth experience)!\n\nGrav is built with plain text files for your content. There is no database needed.\n\n!! A PHP user cache such as APCu, Memcached, or Redis is highly recommended for optimal performance. Not to worry though, these are usually already part of your hosting package!\n\n## Web Servers\n\nGrav is so simple and versatile that you don't even need a web server to run it. You can run it directly off the built-in PHP webserver, as long as you're running [version=15]**PHP 5.6.3**[\/version][version=16]**PHP 7.1.3**[\/version] or later.\n\nTesting with the built-in webservers is a useful way to check a Grav install and perform some brief development, but it is **not** recommended for a live site or even for advanced development tasks. We've outlined how in our [Installation guide](..\/installation#running-grav-with-the-built-in-php-webserver-using-routerphp).\n\nEven though technically you do not need a standalone web server, it is better to run one, even for local development. There are many great options available:\n\n### Mac\n\n* MacOS 10.14 Mojave already ships with the Apache Web server and PHP 7.1, so job done!\n* [MAMP\/MAMP Pro](http:\/\/mamp.info) comes with Apache, MySQL and of course PHP. It is a great way to get more control over which version of PHP you are running, setting up virtual hosts, plus other useful features such as automatically handling dynamic DNS.\n* [AMPPS](http:\/\/www.ampps.com\/downloads) is a software stack from Softaculous enabling Apache, PHP, Perl, Python,.. This includes everything you need (and more) for GRAV development.\n* [Brew Apache\/PHP](https:\/\/getgrav.org\/blog\/macos-mojave-apache-multiple-php-versions) is an alternative approach that allows a fully configurable installation with various PHP versions.\n\n### Windows\n\n* [XAMPP](https:\/\/www.apachefriends.org\/index.html) provides Apache, PHP, and MySQL in one simple package.\n* [EasyPHP](http:\/\/www.easyphp.org\/) provides a personal Web hosting package as well as a more powerful developer version.\n* [MAMP for Windows](http:\/\/mamp.info) is a long-time Mac favorite, but now available for Windows.\n* [IIS with PHP](http:\/\/php.iis.net\/) is a fast way to run PHP on Windows.\n* [AMPPS](http:\/\/www.ampps.com\/downloads) is a software stack from Softaculous enabling Apache, PHP, Perl, Python,.. This includes everything you need (and more) for GRAV development.\n* [Linux Subsystem](https:\/\/medium.freecodecamp.org\/setup-a-php-development-environment-on-windows-subsystem-for-linux-wsl-9193ff28ae83) is a great way to Run a linux-like environment on Windows\n\n### Linux\n\n* Many distributions of Linux already come with Apache and PHP built-in. If they're not, the distribution usually provides a package manager through which you can install them without much hassle. More advanced configurations should be investigated with the help of a good search engine.\n\n### Apache Requirements\n\nEven though most distributions of Apache come with everything needed, for the sake of completeness, here is a list of required Apache modules:\n\n* `mod_rewrite`\n* `mod_ssl` (if you wish to run Grav under SSL)\n\nYou should also ensure you have `AllowOverride All` set in the `<Directory>` and\/or `<VirtualHost>` blocks so that the `.htaccess` file processes correctly, and rewrite rules take effect.\n\n### IIS Requirements\n\nAlthough IIS is considered a web server ready to run 'out-of-the-box', some changes need to be made.\n\nTo get **Grav** running on an IIS server, you need to install **URL Rewrite**. This can be accomplished using **Microsoft Web Platform Installer** from within IIS. You can also install URL Rewrite by going to [iis.net](https:\/\/www.iis.net\/downloads\/microsoft\/url-rewrite).\n\n### PHP Requirements\n\nMost hosting providers and even local LAMP setups have PHP pre-configured with everything you need for Grav to run 'out-of-the-box'. However, some Windows setups, and even Linux distributions local or on VPS (I'm looking at you Debian!) - ship with a very minimal PHP compile. Therefore, you may need to install or enable these PHP modules:\n\n* `curl` (client for URL handling used by GPM)\n* `ctype` (used by symfony\/yaml\/Inline)\n* `dom` (used by grav\/admin newsfeed)\n* `gd` (a graphics library used to manipulate images)\n* `json` (used by Symfony\/Composer\/GPM)\n* `mbstring` (multibyte string support)\n* `openssl` (secure sockets library used by GPM)\n* `session` (used by toolbox)\n* `simplexml` (used by grav\/admin newsfeed)\n* `xml` (XML support)\n* `zip` extension support (used by GPM)\n\nFor enabling `openssl` and (un)zip support you will need to find in the `php.ini` file of your Linux distribution for lines like:\n\n[prism classes=\"language-bash line-numbers\"]\n;extension=openssl.so\n;extension=zip.so\n[\/prism]\n\nand remove the leading semicolon.\n\n#### Heading Four\n\n##### Optional Modules\n\n* `apcu` for increased cache performance\n* `opcache` for increased PHP performance\n* `yaml` PECL Yaml provides native yaml processing and can dramatically increase performance\n* `xdebug` useful for debugging in a development environment\n\n### Permissions\n\nFor Grav to function correctly, your web server needs to have the appropriate **file permissions** to write logs, caches, etc. When using either the [CLI](\/advanced\/grav-cli) (Command Line Interface) or [GPM](\/advanced\/grav-gpm) (Grav Package Manager), the user running PHP from the command line also needs to have the appropriate permissions to modify files.\n\nBy default, Grav will install with `644` and `755` permissions for files and folders, respectively. Most hosting providers have configurations that ensure that a web server running PHP will allow you to create and modify files within your user account. This means that Grav runs **out-of-the-box** on the vast majority of hosting providers.\n\nHowever, if you are running on a dedicated server or even your local environment, you may need to adjust permissions to ensure your **user** and your **web server** can modify files as needed. There are a couple of approaches you can take.\n\n1. In a **local development environment**, you can usually configure your web server to run under your user profile. This way the web server will always allow you to create and modify files.\n\n2. Change the **group permissions** on all files and folders so that the web server's group has write access to files and folders while keeping the standard permissions. This requires a few commands to make this work.\n\nFirst, find out which user Apache runs with by running the following command:\n\n[prism classes=\"language-bash command-line\"]\nps aux | grep -v root | grep apache | cut -d\\  -f1 | sort | uniq\n[\/prism]\n\nNow, find out which group this user belongs to by running this command (note: adjust USERNAME with the apache username you found in the previous command)\n\n[prism classes=\"language-bash command-line\"]\ngroups USERNAME\n[\/prism]\n\n(note: adjust `GROUP` to be the group your apache runs under, found in the previous command. [`www-data`, `apache`, `nobody`, etc.]):\n\n[prism classes=\"language-bash line-numbers\"]\nchgrp -R GROUP .\nfind . -type f | xargs chmod 664\nfind .\/bin -type f | xargs chmod 775\nfind . -type d | xargs chmod 775\nfind . -type d | xargs chmod +s\numask 0002\n[\/prism]\n\nIf you need to invoke superuser permissions, you would run `find \u2026 | sudo xargs chmod \u2026` instead.\n\n## Recommended Tools\n\n### Text Editors\n\nAlthough you can get away with Notepad, Textedit, Vi, or whatever default text editor comes with your platform, we recommend using a good text editor with syntax highlighting to make things easier. Here are some recommended options:\n\n1. [Visual Studio Code](https:\/\/code.visualstudio.com\/) - Similar to Atom, it's built using Electron, Node, as well as HTML\/CSS.  It's quite lightweight and has many plugins available, including very good support for PHP and JavaScript.  This is the current recommended editor for developing for Grav.\n2. [Atom](http:\/\/atom.io) - MacOS\/Windows\/Linux - A new editor developed by Github. It's free and open source. It is similar to Sublime, but does not have the sheer depth of plugins available yet.\n3. [SublimeText](http:\/\/www.sublimetext.com\/) - MacOS\/Windows\/Linux - A commercial developer's editor, but well worth the price. Very powerful especially combined with plugins such as [Markdown Extended](https:\/\/sublime.wbond.net\/packages\/Markdown%20Extended), [Pretty YAML](https:\/\/sublime.wbond.net\/packages\/Pretty%20YAML), and [PHP-Twig](https:\/\/sublime.wbond.net\/packages\/PHP-Twig).\n4. [Notepad++](http:\/\/notepad-plus-plus.org\/) - Windows - A free and very popular developer's editor for Windows.\n5. [Bluefish](http:\/\/bluefish.openoffice.nl\/index.html) - MacOS\/Windows\/Linux - A free, open source text editor geared towards programmers and web developers.\n6. [Visual Studio Code](https:\/\/code.visualstudio.com\/) - A lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux.\n\n### Markdown Editors\n\nAnother option if you primarily work with just creating content, is to use a dedicated **Markdown Editor**. These often are very content-centric and usually provide a **live-preview** of your content rendered as HTML. There are literally hundreds of these, but some good options include:\n\n1. [MacDown](http:\/\/macdown.uranusjr.com\/) - MacOS - Free, a simple, lightweight open source Markdown editor.\n2. [LightPaper](http:\/\/lightpaper.42squares.in\/) - MacOS - $9.99, clean, powerful. Our markdown editor of choice on the Mac. **Get 25% OFF with Discount Code: GET_GRAV_25**\n3. [MarkDrop](http:\/\/culturezoo.com\/markdrop\/) - MacOS - $5, but super clean and Droplr support built-in.\n4. [MarkdownPad](http:\/\/markdownpad.com\/) - Windows - Free and Pro versions. Even has YAML front-matter support. An excellent solution for Windows users.\n5. [Mark Text](https:\/\/marktext.github.io\/website\/) - Free, open source Markdown editor for Windows \/ Linux \/ MacOS.\n\n### FTP Clients\n\nAlthough there are many ways to deploy **Grav**, the simplest is to copy your local site to your hosting provider. The easiest way to accomplish this is with an [FTP Client](http:\/\/en.wikipedia.org\/wiki\/File_Transfer_Protocol). There are many available, but some recommended ones include:\n\n1. [Transmit](http:\/\/panic.com\/transmit\/) - MacOS - The de facto FTP\/SFTP client on MacOS. Easy to use, fast, folder-syncing and pretty much anything else you could ask for.\n2. [FileZilla](https:\/\/filezilla-project.org\/) - MacOS\/Windows\/Linux - Probably the best option for Windows and Linux users. Free and very powerful (but very ugly on the Mac!).\n3. [Cyberduck](http:\/\/cyberduck.io\/) - MacOS\/Windows - A decent free option for both MacOS and Windows users. Not as full-featured as the others.\n4. [ForkLift](http:\/\/www.binarynights.com\/forklift\/) - MacOS - A solid alternative to Transmit, and slightly cheaper to boot.\n\n\n"},{"title":"Configuration","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/basics\/grav-configuration","taxonomy":{"categories":["docs"],"tags":[]},"content":"All Grav configuration files are written in [YAML syntax](..\/..\/advanced\/yaml) with a `.yaml` file extension.  YAML is very intuitive which makes it very easy to both read and write, however, you can check out the [YAML page in the Advanced chapter](..\/..\/advanced\/yaml) to get a complete understanding of the syntax available.\n\n## System Configuration\n\nGrav focuses on making things as easy as possible for the user, and the same goes for configuration.  Grav comes with some sensible default options, and these are contained in a file that resides in the `system\/config\/system.yaml` file.\n\nHowever, **you should never change this file**, instead any configuration changes you need to make should be stored in a file called `user\/config\/system.yaml`.  Any setting in this file with the same structure and naming will override the setting provided in the default system configuration file.\n\n!!!! Generally speaking you should **NEVER** change anything in the `system\/` folder.  All things the user does (creating content, installing plugins, editing configuration, etc.) should be done in the `user\/` folder.  This way it allows simpler upgrading and also keeps your changes all in one location for backing up, synchronizing, etc.\n\nHere are the variables found in the default `system\/config\/system.yaml` file:\n\n### Basic Options\n\n[prism classes=\"language-yaml line-numbers\"]\nabsolute_urls: false\ntimezone: ''\ndefault_locale:\nparam_sep: ':'\nwrapped_site: false\nreverse_proxy_setup: false\nforce_ssl: false\nforce_lowercase_urls: true\ncustom_base_url: ''\nusername_regex: '^[a-z0-9_-]{3,16}$'\npwd_regex: '(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}'\nintl_enabled: true\n[\/prism]\n\nThese configuration options do not appear within their own child sections. They're general options that affect the way the site operates, its timezone, and base URL. \n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **absolute_urls:** | Absolute or relative URLs for `base_url` |\n| **timezone:** | Valid values can be found [here](http:\/\/php.net\/manual\/en\/timezones.php) |\n| **default_locale:** | Default locale (defaults to system) |\n| **param_sep:** | This is used for Grav parameters in the URL.  Don't change this unless you know what you are doing.  Grav > `1.1.16` automatically sets this to `;` for users running Apache web server on Windows |\n| **wrapped_site:** | For themes\/plugins to know if Grav is wrapped by another platform. Can be `true` or `false` |\n| **reverse_proxy_setup:** | Running in a reverse proxy scenario with different webserver ports than proxy. Can be `true` or `false` |\n| **force_ssl:** | If enabled, Grav forces to be accessed via HTTPS (NOTE: Not an ideal solution). Can be `true` or `false` |\n| **force_lowercase_urls:** |If you want to support mixed cased URLs set this to false |\n| **custom_base_url:** | Manually set the base_url here |\n| **username_regex:** | Only lowercase chars, digits, dashes, underscores. 3 - 16 chars |\n| **pwd_regex:** | At least one number, one uppercase and lowercase letter, and be at least 8+ chars |\n| **intl_enabled:** | Special logic for PHP International Extension (mod_intl) |\n[\/div]\n\n### Languages\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  supported: []\n  include_default_lang: true\n  pages_fallback_only: false\n  translations: true\n  translations_fallback: true\n  session_store_active: false\n  http_accept_language: false\n  override_locale: false\n[\/prism]\n\nThe **Languages** area of the file establishes the site's language settings. This includes which language(s) are supported, designation of the default language in the URLs, and translations. Here is the breakdown for the **Languages** area of the system configuration file:\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **supported:** | List of languages supported. eg: `[en, fr, de]` |\n| **include_default_lang:** | Include the default lang prefix in all URLs. Can be `true` or `false` |\n| **pages_fallback_only:** | Only fallback to find page content through supported languages. Can be `true` or `false` |\n| **translations:** | Enable translations by default. Can be `true` or `false` |\n| **translations_fallback:** | Fallback through supported translations if active lang doesn't exist. Can be `true` or `false` |\n| **session_store_active:** | Store active language in session. Can be `true` or `false` |\n| **http_accept_language:** | Attempt to set the language based on http_accept_language header in the browser. Can be `true` or `false` |\n| **override_locale:** | Override the default or system locale with language specific one. Can be `true` or `false` |\n[\/div]\n\n### Home\n\n[prism classes=\"language-yaml line-numbers\"]\nhome:\n  alias: '\/home'\n  hide_in_urls: false\n[\/prism]\n\nThe **Home** section is where you set the default path for the site's homepage. You can also choose to hide the home route in URLs.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **alias:** | Default path for home, ie: `\/home` or `\/` |\n| **hide_in_urls:** | Hide the home route in URLs. Can be `true` or `false` |\n[\/div]\n\n### Pages\n\n[prism classes=\"language-yaml line-numbers\"]\npages:\n  theme: quark\n  order:\n    by: default\n    dir: asc\n  list:\n    count: 20\n  dateformat:\n    default:\n    short: 'jS M Y'\n    long: 'F jS \\a\\t g:ia'\n  publish_dates: true\n  process:\n    markdown: true\n    twig: false\n  twig_first: false\n  never_cache_twig: false\n  events:\n    page: true\n    twig: true\n  markdown:\n    extra: false\n    auto_line_breaks: false\n    auto_url_links: false\n    escape_markup: false\n    special_chars:\n      '>': 'gt'\n      '<': 'lt'\n  types: [txt,xml,html,htm,json,rss,atom]\n  append_url_extension: ''\n  expires: 604800\n  cache_control:\n  last_modified: false\n  etag: false\n  vary_accept_encoding: false\n  redirect_default_route: false\n  redirect_default_code: 302\n  redirect_trailing_slash: true\n  ignore_files: [.DS_Store]\n  ignore_folders: [.git, .idea]\n  ignore_hidden: true\n  hide_empty_folders: false\n  url_taxonomy_filters: true\n  frontmatter:\n    process_twig: false\n    ignore_fields: ['form','forms']\n[\/prism]\n\nThe **Pages** section of the `system\/config\/system.yaml` file is where you set a lot of the main theme-related settings. For example, this is where you set the theme used to render the site, page ordering, twig and markdown processing defaults, and more. This is where most of the decisions that affect the way your pages are rendered are made.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **theme:** | This is where you set the default theme. This defaults to `quark` |\n| **order:** | |\n| ... **by:** | Order pages by `default`, `alpha` or `date` |\n| ... **dir:** | Default ordering direction, `asc` or `desc` |\n| **list:** | |\n| ... **count:** | Default item count per page |\n| **dateformat:** | |\n| ... **default:** | The default date format Grav expects in the `date: ` field |\n| ... **short:** | Short date format. Example: `'jS M Y'` |\n| ... **long:** | Long date format. Example: `'F jS \\a\\t g:ia'` |\n| **publish_dates:** | Automatically publish\/unpublish based on dates. Can be set `true` or `false` |\n| **process:** | |\n| ... **markdown:** | Enable or disable the processing of markdown on the front end. Can be set `true` or `false` |\n| ... **twig:** | Enable or disable the processing of twig on the front end. Can be set `true` or `false` |\n| **twig_first:** | Process Twig before markdown when processing both on a page. Can be set `true` or `false` |\n| **never_cache_twig:** | Enabling this will allow you to add a processing logic that can change dynamically on each page load, rather than caching the results and storing it for each page load. This can be enabled\/disabled site-wide in the **system.yaml**, or on a specific page. Can be set `true` or `false` |\n| **events:** | |\n| ... **page:** | Enable page-level events. Can be set `true` or `false` |\n| ... **twig:** | Enable Twig-level events. Can be set `true` or `false` |\n| **markdown:** | |\n| ... **extra:** | Enable support for Markdown Extra support (GitHub-flavored Markdown (GFM) by default). Can be set `true` or `false` |\n| ... **auto_line_breaks:** | Enable automatic line breaks. Can be set `true` or `false` |\n| ... **auto_url_links:** | Enable automatic HTML links. Can be set `true` or `false` |\n| ... **escape_markup:** | Escape markup tags into entities. Can be set `true` or `false` |\n| ... **special_chars:** | List of special characters to automatically convert to entities. Each character consumes a line below this variable. Example: `'>': 'gt'` |\n| **types:** | List of valid page types. For example: `[txt,xml,html,htm,json,rss,atom]` |\n| **append_url_extension:** | Append page's extension in Page URLs (e.g. `.html` results in **\/path\/page.html**) |\n| **expires:** | Page expires time in seconds (604800 seconds = 7 days) (`no cache` is also possible) |\n| **cache_control:** | Can be blank for no setting, or a [valid](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Headers\/Cache-Control) `cache-control` text value |\n| **last_modified:** | Set the last modified date header based on file modification timestamp. Can be set `true` or `false` |\n| **etag:** | Set the etag header tag. Can be set to `true` or `false` |\n| **vary_accept_encoding:** | Add `Vary: Accept-Encoding` header. Can be set to `true` or `false` |\n| **redirect_default_route:** | Automatically redirect to a page's default route. Can be set to `true` or `false` |\n| **redirect_default_code:** | Default code to use for redirects. For example: `302` |\n| **redirect_trailing_slash:** | Handle automatically or 302 redirect a trailing \/ URL |\n| **ignore_files:** | Files to ignore in Pages. Example: `[.DS_Store] ` |\n| **ignore_folders:** | Folders to ignore in Pages. Example: `[.git, .idea]` |\n| **ignore_hidden:** | Ignore all Hidden files and folders. Can be set to `true` or `false` |\n| **hide_empty_folders:** | If folder has no .md file, should it be hidden. Can be set to `true` or `false` |\n| **url_taxonomy_filters:** | Enable auto-magic URL-based taxonomy filters for page collections. Can be set to `true` or `false` |\n| **frontmatter:** | |\n| ... **process_twig:** | Should the frontmatter be processed to replace Twig variables? Can be set to `true` or `false` |\n| ... **ignore_fields:** | Fields that might contain Twig variables and should not be processed. Example: `['form','forms']` |\n[\/div]\n\n### Cache\n\n[version=15]\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  enabled: true\n  check:\n    method: file\n  driver: auto\n  prefix: 'g'\n  clear_images_by_default: true\n  cli_compatibility: false\n  lifetime: 604800\n  gzip: false\n  allow_webserver_gzip: false\n  redis:\n    socket: false\n[\/prism]\n[\/version]\n\n[version=16]\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  enabled: true\n  check:\n    method: file\n  driver: auto\n  prefix: 'g'\n  purge_at: '0 4 * * *'\n  clear_at: '0 3 * * *'\n  clear_job_type: 'standard'\n  clear_images_by_default: true\n  cli_compatibility: false\n  lifetime: 604800\n  gzip: false\n  allow_webserver_gzip: false\n  redis:\n    socket: false\n[\/prism]\n[\/version]\n\nThe **Cache** section is where you can configure the site's caching settings. You can enable, disable, choose the method, and more.\n\n[version=15]\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **enabled:** | Set to true to enable caching. Can be set to `true` or `false` |\n| **check:** | |\n| ... **method:** | Method to check for updates in pages. Options: `file`, `folder`, `hash` and `none`. [more details](..\/..\/advanced\/performance-and-caching#grav-core-caching) |\n| **driver:** | Select a cache driver. Options are: `auto`, `file`, `apcu`, `redis`, `memcache`, and `wincache` |\n| **prefix:** | Cache prefix string (prevents cache conflicts). Example: `g` |\n| **clear_images_by_default:** | By default grav will include processed images when cache clears, this can be disabled by setting this to `false` |\n| **cli_compatibility:** | Ensures only non-volatile drivers are used (file, redis, memcache, etc.) |\n| **lifetime:** | Lifetime of cached data in seconds (`0` = infinite). `604800` is 7 days |\n| **gzip:** | GZip compress the page output. Can be set to `true` or `false` |\n| **allow_webserver_gzip:** | This option will change the header to `Content-Encoding: identity` allowing gzip to be more reliably set by the webserver although this usually breaks the out-of-process `onShutDown()` capability.  The event will still run, but it won't be out of process, and may hold up the page until the event is complete |\n| **redis.socket:** | The path to the redis socket file |\n[\/div]\n[\/version]\n\n[version=16]\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **enabled:** | Set to true to enable caching. Can be set to `true` or `false` |\n| **check:** | |\n| ... **method:** | Method to check for updates in pages. Options: `file`, `folder`, `hash` and `none`. [more details](..\/..\/advanced\/performance-and-caching#grav-core-caching) |\n| **driver:** | Select a cache driver. Options are: `auto`, `file`, `apcu`, `redis`, `memcache`, and `wincache` |\n| **prefix:** | Cache prefix string (prevents cache conflicts). Example: `g` |\n| **purge_at:** | Scheduler: How often to purge old cache using cron `at` syntax |\n| **clear_at:** | Scheduler: How often to clear the cache using cron `at` syntax |\n| **clear_job_type:** | Type to clear when processing the scheduled clear job `standard`|`all` |\n| **clear_images_by_default:** | By default grav will include processed images when cache clears, this can be disabled by setting this to `false` |\n| **cli_compatibility:** | Ensures only non-volatile drivers are used (file, redis, memcache, etc.) |\n| **lifetime:** | Lifetime of cached data in seconds (`0` = infinite). `604800` is 7 days |\n| **gzip:** | GZip compress the page output. Can be set to `true` or `false` |\n| **allow_webserver_gzip:** | This option will change the header to `Content-Encoding: identity` allowing gzip to be more reliably set by the webserver although this usually breaks the out-of-process `onShutDown()` capability.  The event will still run, but it won't be out of process, and may hold up the page until the event is complete |\n| **redis.socket:** | The path to the redis socket file |\n[\/div]\n[\/version]\n\n### Twig\n\n[prism classes=\"language-yaml line-numbers\"]\ntwig:\n  cache: true\n  debug: true\n  auto_reload: true\n  autoescape: false\n  undefined_functions: true\n  undefined_filters: true\n  umask_fix: false\n[\/prism]\n\nThe **Twig** section gives you a quick set of tools with which to configure Twig on your site for debugging, caching, and optimization.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **cache:** | Set to true to enable Twig caching. Can be set to `true` or `false` |\n| **debug:** | Enable Twig debug. Can be set to `true` or `false` |\n| **auto_reload:** | Refresh cache on changes. Can be set to `true` or `false` |\n| **autoescape:** | Autoescape Twig vars. Can be set to `true` or `false` |\n| **undefined_functions:** | Allow undefined functions. Can be set to `true` or `false` |\n| **undefined_filters:** | Allow undefined filters. Can be set to `true` or `false` |\n| **umask_fix:** | By default Twig creates cached files as 755, fix switches this to 775. Can be set to `true` or `false` |\n[\/div]\n\n### Assets\n\n[prism classes=\"language-yaml line-numbers\"]\nassets:\n  css_pipeline: false\n  css_pipeline_include_externals: true\n  css_pipeline_before_excludes: true\n  css_minify: true\n  css_minify_windows: false\n  css_rewrite: true\n  js_pipeline: false\n  js_pipeline_include_externals: true\n  js_pipeline_before_excludes: true\n  js_minify: true\n  enable_asset_timestamp: false\n  collections:\n    jquery: system:\/\/assets\/jquery\/jquery-2.x.min.js\n[\/prism]\n\nThe **Assets** section enables you to configure options related to the Assets Manager (JS, CSS).\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **css_pipeline:** | The CSS pipeline is the unification of multiple CSS resources into one file. Can be set to `true` or `false` |\n| **css_pipeline_include_externals:** | Include external URLs in the pipeline by default. Can be set to `true` or `false` |\n| **css_pipeline_before_excludes:** | Render the pipeline before any excluded files. Can be set to `true` or `false` |\n| **css_minify:** | Minify the CSS during pipelining. Can be set to `true` or `false` |\n| **css_minify_windows:** | Minify Override for Windows platforms. False by default due to ThreadStackSize. Can be set to `true` or `false` |\n| **css_rewrite:** | Rewrite any CSS relative URLs during pipelining. Can be set to `true` or `false` |\n| **js_pipeline:** | The JS pipeline is the unification of multiple JS resources into one file. Can be set to `true` or `false` |\n| **js_pipeline_include_externals:** | Include external URLs in the pipeline by default. Can be set to `true` or `false` |\n| **js_pipeline_before_excludes:** | Render the pipeline before any excluded files. Can be set to `true` or `false` |\n| **js_minify:** | Minify the JS during pipelining. Can be set to `true` or `false` |\n| **enable_asset_timestamp:** | Enable asset timestamps. Can be set to `true` or `false` |\n| **collections:** | This contains collections, designated as sub-items. For example: `jquery: system:\/\/assets\/jquery\/jquery-3.x.min.js` |\n[\/div]\n\n### Errors\n\n[prism classes=\"language-yaml line-numbers\"]\nerrors:\n  display: 0\n  log: true\n[\/prism]\n\nThe **Errors** section determines how Grav handles error display and logging.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **display:** | Determines how errors are displayed. Enter either `1` for the full backtrace, `0` for Simple Error, or `-1` for System Error |\n| **log:** | Log errors to `\/logs` folder. Can be set to `true` or `false` |\n[\/div]\n\n### Log\n\n[prism classes=\"language-yaml line-numbers\"]\nlog:\n  handler: file\n  syslog:\n    facility: local6\n[\/prism]\n\nThe **Log** section allows you to configure alternate logging capabilities for Grav.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **handler:** | Log handler. Currently supported: `file` \\| `syslog` |\n| **syslog:** | |\n| ... **facility:** | Syslog facilities output |\n[\/div]\n\n### Debugger\n\n[prism classes=\"language-yaml line-numbers\"]\ndebugger:\n  enabled: false\n  shutdown:\n    close_connection: true\n[\/prism]\n\nThis section gives you the ability to activate Grav's debugger. A useful tool during development.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **enabled:** | Enable Grav debugger and following settings. Can be set to `true` or `false` |\n| **shutdown:** | |\n| ... **close_connection:** | Close the connection before calling `onShutdown()`. `false` for debugging |\n[\/div]\n\n### Images\n\n[prism classes=\"language-yaml line-numbers\"]\nimages:\n  default_image_quality: 85\n  cache_all: false\n  cache_perms: '0755'\n  debug: false\n  auto_fix_orientation: false\n  seofriendly: false\n[\/prism]\n\nThis section gives you the ability to set the default image quality images are resampled to, as well as to control image caching and debugging features.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **default_image_quality:** | Default image quality to use when resampling images. For example: `85` = 85% |\n| **cache_all:** | Cache all image by default. Can be set to `true` or `false` |\n| **cache_perms:** | MUST BE IN QUOTES!! Default cache folder perms. Usually `'0755'` or `'0775'` |\n| **debug:** | Show an overlay over images indicating the pixel depth of the image when working with retina, for example. Can be set to `true` or `false` |\n| **auto_fix_orientation:** | Try to automatically fix images uploaded with non-standard rotation |\n| **seofriendly:** | SEO-friendly processed image names |\n[\/div]\n\n\n### Media\n\n[prism classes=\"language-yaml line-numbers\"]\nmedia:\n  enable_media_timestamp: false\n  unsupported_inline_types: []\n  allowed_fallback_types: []\n  auto_metadata_exif: false\n[\/prism]\n\nThe **Media** section handles the configuration options for settings related to the handling of media files. This includes timestamp display, upload size, and more.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **enable_media_timestamp:** | Enable media timetsamps |\n| **unsupported_inline_types:** | Array of supported media types to try to display inline. These file types are placed within `[]` brackets |\n| **allowed_fallback_types:** | Array of allowed media types of files found if accessed via Page route. These file types are placed within `[]` \\|brackets |\n| **auto_metadata_exif:** | Automatically create metadata files from Exif data where possible |\n[\/div]\n\n### Session\n\n[prism classes=\"language-yaml line-numbers\"]\nsession:\n  enabled: true\n  initialize: true\n  timeout: 1800\n  name: grav-site\n  uniqueness: path\n  secure: false\n  httponly: true\n  split: true\n  path:\n[\/prism]\n\nThese options determine session properties for your site.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **enabled:** | Enable Session support. Can be set to `true` or `false` |\n| **initialize:** | Initialize session from Grav (if `false`, plugin needs to start the session) |\n| **timeout:** | Timeout in seconds. For example: `1800` |\n| **name:** | Name prefix of the session cookie. Use alphanumeric, dashes or underscores only. Do not use dots in the session name. For example: `grav-site` |\n| **uniqueness:** | Should sessions be `path` based or `security.salt` based |\n| **secure:** | Set session secure. If `true`, indicates that communication for this cookie must be over an encrypted transmission. Enable this only on sites that run exclusively on HTTPS. Can be set to `true` or `false` |\n| **httponly:** | Set session HTTP only. If true, indicates that cookies should be used only over HTTP, and JavaScript modification is not allowed. Can be set to `true` or `false` |\n| **path:** | The path where sessions are stored |\n[\/div]\n\n### GPM\n\n[prism classes=\"language-yaml line-numbers\"]\ngpm:\n  releases: stable\n  proxy_url:\n  method: 'auto'\n  verify_peer: true\n  official_gpm_only: true\n[\/prism]\n\nThe **GPM** section offers the user options that control how Grav's GPM sources and makes ready updates available for your site. You can choose between stable and testing releases, as well as set up a proxy URL.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **releases:** | Set to either `stable` or `testing` to determine if you want to update to the latest stable or testing build |\n| **proxy_url:** | Configure a manual proxy URL for GPM. For example: `127.0.0.1:3128` |\n| **method:** | Either 'curl', 'fopen' or 'auto'. 'auto' will try fopen first and if not available cURL |\n| **verify_peer:** | On some systems (Windows mostly) GPM is unable to connect because the SSL certificate cannot be verified. Disabling this setting might help |\n| **official_gpm_only:** | By default GPM direct-install will only allow URLs via the official GPM proxy to ensure security, disable this to allow other sources |\n[\/div]\n\n### Strict Mode\n\n[prism classes=\"language-yaml line-numbers\"]\nstrict_mode:\n  yaml_compat: true\n  twig_compat: true\n[\/prism]\n\nStrict mode allows for a cleaner migration to future versions of Grav by moving to the newer versions of YAML and Twig processors.  These may not be compatible with all 3rd party extensions.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **yaml_compat:** | Enables YAML backwards compatibility |\n| **twig_compat:** | Enables deprecated Twig autoescape setting |\n[\/div]\n\n[version=16]\n### Accounts\n\n[prism classes=\"language-yaml line-numbers\"]\naccounts:\n  type: data\n  storage: file\n[\/prism]\n\nAccounts is a new setting for 1.6 that allows you to try out the new experimental Flex Users.  This basically means that Users are stored as Flex objects allowing more power and performance.\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **type:** | Account type: `data` or `flex` |\n| **storage:** | Flex storage type: `file` or `folder` |\n[\/div]\n\n!! You do not need to copy the **entire** configuration file to override it, you can override as little or as much as you like.  Just ensure you have the **exact same naming structure** for the particular setting you want to override.\n[\/version]\n\n## Site Configuration\n\nAs well as the `system.yaml` file, Grav also provides a default `site.yaml` configuration file that is used to set some front-end specific configuration such as author name, author email, as well as some key taxonomy settings.  You can override these in the same way as you would the system.yaml by providing your own configuration file in `user\/config\/site.yaml`. You can also use this file to put in arbitrary configuration options that you may want to reference from your content or templates.\n\nThe default `system\/config\/site.yaml` file that ships with Grav looks something like this:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: Grav                                 # Name of the site\ndefault_lang: en                            # Default language for site (potentially used by theme)\n\nauthor:\n  name: John Appleseed                      # Default author name\n  email: 'john@example.com'                 # Default author email\n\ntaxonomies: [category,tag]                  # Arbitrary list of taxonomy types\n\nmetadata:\n  description: 'My Grav Site'               # Site description\n\nsummary:\n  enabled: true                             # enable or disable summary of page\n  format: short                             # long = summary delimiter will be ignored; short = use the first occurrence of delimiter or size\n  size: 300                                 # Maximum length of summary (characters)\n  delimiter: ===                            # The summary delimiter\n\nredirects:\n#  '\/redirect-test': '\/'                    # Redirect test goes to home page\n#  '\/old\/(.*)': '\/new\/$1'                   # Would redirect \/old\/my-page to \/new\/my-page\n\nroutes:\n#  '\/something\/else': '\/blog\/sample-3'      # Alias for \/blog\/sample-3\n#  '\/new\/(.*)': '\/blog\/$1'                  # Regex any \/new\/my-page URL to \/blog\/my-page Route\n\nblog:\n  route: '\/blog'                            # Custom value added (accessible via system.blog.route)\n\n#menu:                                      # Menu Example\n#    - text: Source\n#      icon: github\n#      url: https:\/\/github.com\/getgrav\/grav\n#    - icon: twitter\n#      url: http:\/\/twitter.com\/getgrav\n[\/prism]\n\nLet's break down the elements of this sample file:\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **title:** | The title is a simple string variable that can be referenced whenever you want to display the name of this site |\n| **author:** | |\n| ... **name:** | The name of the author of the site, that can be referenced whenever you need it |\n| ... **email:** | A default email for use in your site |\n| **taxonomies:** | An arbitrary list of high-level types that you can use to organize your content.  You can assign content to specific taxonomy types, for example, categories or tags. Feel free to edit, or add your own |\n| **metadata:** | Set default metadata for all your pages, see the [content page headers](..\/..\/content\/headers) section for more details |\n| **summary:** | |\n| ... **size:** | A variable to override the default number of characters that can be used to set the summary size when displaying a portion of content |\n| **routes:** | This is a basic map that can provide simple URL alias capabilities in Grav.  If you browse to `\/something\/else` you will actually be sent to `\/blog\/sample-3`. Feel free to edit, or add your own as needed. **Regex Replacements** (`(.*) - $1`) are now supported at the end of route aliases.  You should put these at the bottom of the list for optimal performance |\n| **(custom options)** | You can create any option you like in this file and a good example is the `blog: route: '\/blog'` option that is accessible in your Twig templates with `system.blog.route` |\n[\/div]\n\n!! For most people, the most important element of this file is the `Taxonomy` list.  The taxonomies in this list **must** be defined here if you wish to use them in your content.\n\n## Security\n\nIn Grav 1.5 we introduced a new `system\/config\/security.yaml` file that sets some sensible defaults and is used by the Admin plugin when **Saving** content[version=16], as well in the new **Reports** section of **Tools**[\/version].\n\nThe default configuration looks like this:\n\n[prism classes=\"language-yaml line-numbers\"]\nxss_whitelist: [admin.super]\nxss_enabled:\n    on_events: true\n    invalid_protocols: true\n    moz_binding: true\n    html_inline_styles: true\n    dangerous_tags: true\nxss_invalid_protocols:\n    - javascript\n    - livescript\n    - vbscript\n    - mocha\n    - feed\n    - data\nxss_dangerous_tags:\n    - applet\n    - meta\n    - xml\n    - blink\n    - link\n    - style\n    - script\n    - embed\n    - object\n    - iframe\n    - frame\n    - frameset\n    - ilayer\n    - layer\n    - bgsound\n    - title\n    - base\nuploads_dangerous_extensions:\n    - php\n    - html\n    - htm\n    - js\n    - exe\n[\/prism]\n\nIf you wish to make any changes to these settings, you should copy this file to `user\/config\/security.yaml` and make edits there.\n\n## Other Configuration Settings and Files\n\nUser configuration is completely optional. You can override as little or as much of the default settings as you need. This applies to both the system, site, and any plugin configurations in your site.\n\nYou are also not limited to the `user\/config\/system.yaml` or the `user\/config\/site.yaml` files as described above. You can create any arbitrary `.yaml` configuration file in the `user\/config` folder you wish and it will get picked up by Grav automatically.\n\nAs an example if the new configuration file is named `user\/config\/data.yaml` and a yaml variable in this file is called count:\n\n```\ncount: 39\n```\n\nThe variable would be accessed in your Twig template by using the following syntax:\n\n```\n{{ config.data.count }}\n```\n\nIt would also be accessible via PHP from any plugin with the code:\n\n```\n$count_var = Grav::instance()['config']->get('data.count');\n```\n\n! You can also provide a custom blueprint to enable your custom file to be editable in the admin plugin. Check out the relevant [recipe in the Admin Cookbook section](\/cookbook\/admin-recipes#add-a-custom-yaml-file).\n\n### Config Variable Namespacing\n\nPaths to the configuration files will be used as a **namespace** for your configuration options.\n\nAlternatively, you can put all the options into one file and use YAML structures to specify the hierarchy for your configuration options. This namespacing is built from a combination of the **path + filename + option name**.\n\nFor example: An option such as `author: Frank Smith` in file `plugins\/myplugin.yaml` could be accessible via: `plugins.myplugin.author`. However, you could also have a `plugins.yaml` file and in that file have an option name called `myplugin: author: Frank Smith` and it would still be reachable by the same `plugins.myplugin.author` namespace.\n\nSome example configuration files could be structured:\n\n[div class=\"table-keycol\"]\n| File | Description |\n| -------- | ----------- |\n| **user\/config\/system.yaml**           | Global system configuration file                  |\n| **user\/config\/site.yaml**             | A site-specific configuration file                |\n| **user\/config\/plugins\/myplugin.yaml** | Individual configuration file for myplugin plugin |\n| **user\/config\/themes\/mytheme.yaml** \u00a0 | Individual configuration file for mytheme theme   |\n[\/div]\n\n!! Having a namespaced configuration file will override or mask all options having the same path in the default configuration files\n\n### Plugins Configuration\n\nMost **plugins** will come with their own YAML configuration file. We recommend copying this file to the `user\/config\/plugins\/` directory rather than editing configuration options directly to the file located in the plugin's directory. Doing this will ensure that an update to the plugin will not overwrite your settings, and keep all of your configurable options in one, convenient place.\n\nIf you have a plugin called `user\/plugins\/myplugin` that has a configuration file called `user\/plugins\/myplugin\/myplugin.yaml` then you would copy this file to `user\/config\/plugins\/myplugin.yaml` and edit the file there.\n\nThe YAML file that exists within the plugin's primary directory will act as a fallback. Any settings listed there and not in the User folder's copy will be picked up and used by Grav.\n\n### Themes Configuration\n\nThe same rules for **themes** apply as they did for plugins.  So if you have a theme called `user\/themes\/mytheme` that has a configuration file called `user\/themes\/mytheme\/mytheme.yaml` then you would copy this file to `user\/config\/themes\/mytheme.yaml` and edit the file there.\n"},{"title":"Getting Help","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/basics\/getting-help","taxonomy":{"categories":["docs"],"tags":[]},"content":"Although we have done our best to cover as much as possible here in the documentation, it is inevitable that there will be questions about Grav that we have not answered.  We want to be as accessible as possible, so we have several methods to get help directly from the developers:\n\n## Forum\n\nWe have a new [real-time forum solution](https:\/\/discourse.getgrav.org\/) utilizing the **Discourse** platform to provide a simple way to get your Grav questions answered quickly.\n\n## Twitter\n\nWe **highly recommend** you [follow us on Twitter](https:\/\/twitter.com\/getgrav) as it provides a real-time way for us to reach out to our followers and let them know about news and events related to Grav development.\n\n## Grav Blog\n\nYou can join in a discussion on any of the topics we post about on the [Grav Development Blog](https:\/\/getgrav.org\/blog) via the comments.  We will post all the major news and information to our blog, as well as useful posts about development in general. We also have plans to share tutorials and hints on how to get the most out of Grav.\n\n## GitHub Issues\n\nIf you find a bug, have a general question or even want to contribute to the Grav project as a whole, you can use the [Grav GitHub Issues tracker](https:\/\/github.com\/getgrav\/grav\/issues).  We are very diligent about responding to issues posted here, and it can provide a useful way to start a conversation with us.  If you have a specific problem with one of our plugins, themes or skeletons, you can also submit an issue on that repository.\n\n## Chat on Discord\n\nYou can **chat with us live** on [Discord](https:\/\/chat.getgrav.org). We've recently [moved from Slack to Discord](https:\/\/getgrav.org\/blog\/chat-moving-to-discord) for our community chat platform, and have now hanging out there for all your Grav needs!  So [join us there](https:\/\/chat.getgrav.org) and get involved with the growing Grav community!\n\n\n\n\n"},{"title":"Folder Structure","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/basics\/folder-structure","taxonomy":{"categories":["docs"],"tags":[]},"content":"Because Grav is a **flat-file based CMS**, meaning no database underpins it, the folder structure of your site is very important.  At the **top level** of your Grav installation the folder structure looks like:\n\n[prism classes=\"language-bash line-numbers\"]\n\/assets\n\/backup\n\/bin\n\/cache\n\/images\n\/logs\n\/system\n\/user\n\/vendor\n[\/prism]\n\nSo let us dig a little deeper into each of these top-level folders and explain what they are for:\n\n### \/assets\n\nThe `assets` folder is used by the new asset management system within Grav to store processed `.css` and `.js` files.\n\n!! This folder should not be used to store any user data, as it is routinely flushed of all data.\n\n### \/bin\n\nThe `bin` folder contains the [Grav CLI application](..\/..\/advanced\/grav-cli) that can be used to perform some handy tasks from the command line.  This is a relatively advanced feature primarily intended for developers so we'll set this topic aside for later discussion.\n\n### \/backup\n\nThe `backup` folder is the default location for Grav backups.\n\n### \/cache\n\nThe `cache` folder is used to store temporary cached files that are automatically generated by Grav to improve performance.  By default, Grav handles caching automatically, selecting the best available option for your hosting environment to ensure your site runs as fast as possible.\n\nIf Grav decides that the **filesystem** is the best caching method, the cached files it generates will be stored here.  The Twig template engine also uses this location to store its pre-compiled template files.  Again, this is done to ensure that Grav performs at its optimum speed.\n\n!! This folder should not be used to store any user data, as it is routinely flushed of all data.\n\n### \/images\n\nGrav comes with a built-in powerful yet very [easy-to-use image manipulation library](..\/..\/content\/media).  This means you can easily resize an image on-the-fly from your content or even from a plugin.  These images are stored in the `images` folder so that they can be reused if the same image with the same size is requested again.\n\nThis folder acts like an image cache and is intended for automatically generated files.  User provided media should be stored in the `user\/pages\/`, `user\/themes\/` or even a custom `user\/images\/` folder.\n\n!! This folder should not be used to store any user data, as it is routinely flushed of all data.\n\n### \/logs\n\nWhen Grav detects an error, or if you have extra logging or profiling turned on, it stores the relevant log files in the `logs` folder.\n\n### \/system\n\nThe `system` folder is where the files that make Grav actually function live.  You should not edit anything in this folder because an update to Grav could overwrite your changes.  If you need to change something related to how Grav works, you can use plugins as discussed in later chapters.\n\n### \/vendor\n\nThe `vendor` folder contains important libraries that Grav relies on.  This folder is similar to the `system` folder in that its contents should not be edited unless you are absolutely certain of what you're doing.\n\n**(v0.9.2+)**  If you [installed](..\/installation) Grav from GitHub, the `vendor` folder won't have been installed with it. In order to create and populate the vendor folder, you will have to run `bin\/grav install` or `composer install` from the root of your Grav instance. More details can be found in the [installation](..\/installation) section.\n\n### \/user\n\nThis is the most important folder for the majority of Grav users. This folder is where you will spend your time creating content, using plugins and editing your themes. Let us burrow a little further into this folder:\n\n[prism classes=\"language-bash line-numbers\"]\n\/user\/accounts\n\/user\/blueprints\n\/user\/config\n\/user\/data\n\/user\/images\n\/user\/languages\n\/user\/pages\n\/user\/plugins\n\/user\/themes\n[\/prism]\n\n### \/user\/accounts\n\nThe `accounts` folder is where you will define user accounts if access restrictions are required to certain portions of your site.\n\n### \/user\/blueprints\n\nThe `blueprints` folder contains your custom blueprints for the site.\n\n### \/user\/config\n\nThe [files in the config directory](..\/grav-configuration) are used to configure the website and have been discussed in the previous chapter.\n\n### \/user\/data\n\nThe `data` folder can be used by plugins to store data that you can reference later.  A good example of a plugin that utilizes this folder is the **Forms** plugin that can take a web form and store the submitted data in a text file in this folder.  You can also store other things such as user-uploads or anything you wish to really.\n\n!! This folder is not accessible via a browser by default.\n\n### \/user\/images\n\nThe `images` folder can be used for storing your images. It can be accessed by using `image:\/\/` stream. \n\n\n### \/user\/languages\n\nThe `languages` folder contains [Translation Overrides](..\/..\/content\/multi-language#translation-overrides). \n\n### \/user\/pages\n\nThis is the heart of Grav. The `pages` folder is where you create and edit your content.  We will go into much more depth in the [next section](..\/..\/content).\n\n### \/user\/plugins\n\nA plugin can extend the fast core of Grav with particular features you may need for your Website. Plugins can be downloaded from [GetGrav.org\/downloads\/plugins](https:\/\/getgrav.org\/downloads\/plugins), or you can [develop your own](..\/..\/plugins\/plugin-tutorial).\n\n### \/user\/themes\n\nA theme turns your content into a true website.  It converts the content you have constructed into the HTML that a browser understands and displays to your audience.  There is a base theme that is provided with Grav, but you can also download others from [GetGrav.org\/downloads\/themes](https:\/\/getgrav.org\/downloads\/themes) or even create your own.  The [Themes](..\/..\/themes) section will outline this in further detail.\n"},{"title":"Basic Tutorial","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/basics\/basic-tutorial","taxonomy":{"categories":["docs"],"tags":[]},"content":"Assuming you successfully [installed Grav](..\/installation) with the instructions listed in the previous chapter, we can continue and play around with Grav a little to get you more comfortable.\n\nBecause Grav does not require a database, it is pretty easy to work with, without having to worry about causing issues between your Grav installation and any other significant data source. If something goes awry, you can generally recover very easily.\n\n## Content Basics\n\nFirst, let us familiarize ourselves with where Grav stores content.  We will go into more depth in a [future chapter](..\/folder-structure), but for the time being, you need to be aware that all our user content, is stored in the `user\/pages\/` folder of your Grav install.\n\nCurrently, there are two folders in the pages folder, the first one is called `01.home` and the second is `02.Typography`.  The `01.` portion of the folder is optional but provides a couple of things that can be handy.\n\nFirstly, it lets you expressly define the order of your pages.  For example, `01` will come before `02`, but `00` will come before `01`.\n\nThe other thing that the numeric portion of the folder name does is explicitly inform Grav this page should be visible in the menu.  It is important to note that the numeric portion up to and including the `.` will be removed from URLs.\n\n## Home Page Configuration\n\nThere is an option in the `user\/config\/system.yaml` file that sets the location of the __home page__, in other words, where Grav points to when you reference the root of your site: `http:\/\/yoursite.com`.\n\nIf you examine this configuration file in your install, you will see that it already points to the alias for `\/home`.  We can leave it like this in this example.\n\n## Page Editing\n\nPages in **Grav** are composed in **Markdown** syntax.  Markdown is a formatting syntax that is written in plain text and then converted automatically to HTML. It uses elementary text symbols to indicate key HTML tags making it very easy to write without having to know the complexities of HTML. There are numerous other benefits of using Markdown including less-errors, valid markup, very readable, simple to learn, transferable, etc.\n\nYou can read an [extensive write-up of available syntax](..\/..\/content\/markdown) with examples in the documentation, but for now, follow along.\n\nOpen the home page in your text editor. The file that controls the homepage is located in the `user\/pages\/01.home\/` folder and is called `default.md`. All of the content you create will be created in the `user\/pages\/` folder in your Grav installation.\n\nWhen you edit the page in a text editor, the content will look something like this:\n\n[div class=\"no-margin-bottom\"]\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Home\nbody_classes: title-center title-h1h2\n---\n[\/prism]\n[\/div]\n[div class=\"no-margin-top\"]\n[prism classes=\"language-markdown line-numbers\" ln-start=\"5\"]\n# Say Hello to Grav!\n## installation successful...\n\nCongratulations! You have installed the **Base Grav Package** that provides a **simple page** and the default **Quark** theme to get you started.\n\n!! If you see a **404 Error** when you click `Typography` in the menu, please refer to the [troubleshooting guide](https:\/\/learn.getgrav.org\/troubleshooting\/page-not-found).\n[\/prism]\n[\/div]\n\nLet us break this down a little so you can see how easy it is to write in Markdown. The stuff between the `---` indicators are the [Page Headers](..\/..\/content\/headers), and these are written in a straightforward format called [YAML](..\/..\/advanced\/yaml). This configuration block that sits in the `.md` file is commonly known as **YAML Front Matter**.\n\n[prism classes=\"language-bash line-numbers\"]\ntitle: Home\nbody_classes: title-center title-h1h2\n[\/prism]\n\nThis block sets the HTML title tag for the page (the text you see in the browser tab).  You can also access this from your themes via the `page.title` attribute.  There are a [few standard headers](..\/..\/content\/headers) that let you configure a variety of options for this page. Another example is `menu: Something` that lets you override the text used to display the name of the page in a menu.  By default, Grav will use the title for the menu value.\n\n[prism classes=\"language-markdown line-numbers\"]\n# Say Hello to Grav!\n## installation successful...\n[\/prism]\n\nThe `#` or `hashes` syntax in markdown indicates a title.  A single `#` with a space and then text converts into an `<h1>` header in HTML. `##` or double hash would convert into an `<h2>` tag.  Of course, this goes all the way up to the HTML valid `<h6>` tag which of course, would be six hashes: `###### My H6 Level Header`.\n\n[prism classes=\"language-markdown line-numbers\"]\nCongratulations! You have installed the **Base Grav Package** that provides a **simple page** and the default **Quark** theme to get you started.\n[\/prism]\n\nThis is a simple paragraph that would have been wrapped in regular `<p>` tags when converted to HTML.  The `**` markers indicate bold text or `<b>` in HTML.  Italic text is indicated by wrapping text in `_` markers.\n\n[prism classes=\"language-markdown line-numbers\"]\n!! If you see a **404 Error** when you click `Typography` in the menu, please refer to the [troubleshooting guide](https:\/\/learn.getgrav.org\/troubleshooting\/page-not-found).\n[\/prism]\n\nThis section uses a custom markdown feature that is provided by the included `markdown-notices` plugin.  This allows you to create simple notices by prefix a paragraph of text with a number of `!` (apostrophe) symbols, from `!` to `!!!!`.\n\nThis overview should provide you with a few key pointers for writing Markdown, but you should check out our more [detailed explanation](..\/..\/content\/markdown) to get a thorough understanding.\n\n!! Ensure you save your `.md` files as `UTF8` files.  This will ensure they work with language-specific special characters.\n\n## Adding a New Page\n\nCreating a new page is a simple affair in **Grav**.  Just follow these simple steps:\n\n1. Navigate to your pages folder: `user\/pages\/` and create a new folder.  In this example, we will use [explicit default ordering](https:\/\/learn.getgrav.org\/content\/content-pages) and call the folder `03.mypage`.\n2. Launch your text editor, create a new file, and paste in the following sample code:\n\n[div class=\"no-margin-bottom\"]\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: My New Page\n---\n[\/prism]\n[\/div]\n[div class=\"no-margin-top\"]\n[prism classes=\"language-markdown line-numbers\" ln-start=\"4\"]\n# My New Page!\n\nThis is the body of **my new page** and I can easily use _Markdown_ syntax here.\n[\/prism]\n[\/div]\n\n3. Save this file in the `user\/pages\/03.mypage\/` folder as `default.md`. This will tell **Grav** to render the page using the **default** template in the current theme: `user\/themes\/quark\/templates\/default.html.twig`.\n4. That's it! Reload your browser to see your new page in the menu at the top.\n\nThe page will automatically show up in the Menu after the **\"Home\"** menu item. If you wish to change the name that shows up in the Menu, add: `menu: My Page` between the dashes in the page content.\n\n**Congratulations**, you have now successfully created a new page in Grav.  There is much more you can do with Grav, so please continue reading to find out about more advanced capabilities and in-depth features.\n\n!! If you have any issues accessing this new page, you are either missing an `.htaccess` file (Apache web server only) or you may need to edit the `RewriteBase` command in the `.htaccess` file. Please consult the [Troubleshooting](..\/..\/troubleshooting) section for more information.\n"},{"title":"Basics","date":"2019-07-18T07:31:58+00:00","url":"http:\/\/localhost\/docs\/basics","taxonomy":{"categories":["docs"],"tags":[]}},{"title":"Windows Subsystem for Linux","date":"2019-11-30T19:16:29+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/windows-subsystem-for-linux","taxonomy":{"categories":[],"tags":[]},"content":"The Windows Subsystem for Linux lets developers run GNU\/Linux environment -- including most command-line tools, utilities, and applications -- directly on Windows, unmodified, without the overhead of a virtual machine.\n\nYou can:\n- Choose your favorite GNU\/Linux distributions from the Windows Store.\n- Run common command-line free software such as grep, sed, awk, or other ELF-64 binaries.\n- Run Bash shell scripts and GNU\/Linux command-line applications including:\n  - Tools: vim, emacs, tmux\n  - Languages: Javascript\/node.js, Ruby, Python, C\/C++, C# & F#, Rust, Go, etc.\n  - Services: sshd, MySQL, Apache, lighttpd\n- Install additional software using own GNU\/Linux distribution package manager.\n- Invoke Windows applications using a Unix-like command-line shell.\n- Invoke GNU\/Linux applications on Windows.\n\nFor more information visit: [Windows Subsustem for Linux Documentation](https:\/\/docs.microsoft.com\/en-us\/windows\/wsl\/about)\n\n## Installing Windows Subsystem for Linux\nThe installation of *Windows Subsystem for Linux* is well described by Microsoft's own document [Install the Windows Subsystem for Linux](https:\/\/docs.microsoft.com\/en-us\/windows\/wsl\/install-win10?target=_blank).\nInstead of the standard Ubuntu distro mentioned in the installation guide, search for and choose the latest Ubuntu 18.04 LTS.\n\nTo initialize and update the Ubuntu installation follow [Initializing a newly installed distro](https:\/\/docs.microsoft.com\/en-us\/windows\/wsl\/initialize-distro?target=_blank).\nThis step may be skipped if you have already initialized the Ubuntu distro in the previous step.\n\n! An important aspect of WSL is that **Windows tools** are **not** able to access files stored inside Ubuntu. However, Ubuntu can (almost) freely read\/write the Windows filesystem. Therefore, files that need to be accessed by Windows tools (e.g. your IDE, Backup) need to be stored on the Windows filesystem.<br><br>\n! When accessing the Windows filesystem from within the bash shell, you need to prepend the path with `\/mnt\/c\/`. Although not required, it is best to use the exact same file path casing when creating symlinks.\n\n\n## Installing Apache\nUse the following command in the bash shell to install Apache:\n\n[prism classes=\"language-bash command-line\"]\nsudo apt install apache2\n[\/prism]\n\n!!! The terminal used by WSL does not support the pasting of text as you are used to. Use **right-click** for pasting.\n\nCreate a project folder for your websites. For reasons mentioned above, this folder needs to be outside of the WSL filesystem. You could use for example: `C:\/Users\/<Username>\/Documents\/Development\/Web\/webroot`, or simply `C:\/webroot`.\n\nIn Ubunto, create a symbolic link to the `webroot` folder.\n\n[prism classes=\"language-bash command-line\"]\nsudo ln -s \/mnt\/c\/your\/path\/to\/webroot \/var\/www\/webroot\n[\/prism]\n\nOpen the Apache default virtual host configuration file:\n\n[prism classes=\"language-bash command-line\"]\nsudo nano \/etc\/apache2\/sites-available\/000-default.conf\n[\/prism]\n\n!!! Remove existing content by keeping the `Shift`-key pressed and scroll down using the `\u2193`-key. Then press `Ctrl`<small>+<\/small>`K` to cut the selection.\n\nInsert the following VirtualHost configuration:\n\n[prism classes=\"language-apacheconf line-numbers\"]\n<VirtualHost *:80>\n\n    ServerName localhost\n\n    ServerAdmin webmaster@localhost\n    DocumentRoot  \/var\/www\/webroot\n\n    <Directory \/var\/www\/>\n        Options Indexes FollowSymLinks\n        AllowOverride All\n        Require all granted\n    <\/Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}\/error.log\n    CustomLog ${APACHE_LOG_DIR}\/access.log combined\n\n<\/VirtualHost>\n[\/prism]\n\n!!! Save the file by pressing `Ctrl`<small>+<\/small>`O`, and hit `Enter` to confirm. Exit with `Ctrl`<small>+<\/small>`X`.<br>\n!!! (In the command bar: `^` meants `Ctrl` and `M` means `Alt`)\n\nOpen your favorite Windows editor\/IDE, and create an `index.html` file in your webroot folder with the following content:\n\nStart the Apache service:\n\n[prism classes=\"language-bash command-line\"]\nsudo service apache2 start\n[\/prism]\n\n!! You will probably get the following known error message [which you can ignore](https:\/\/github.com\/Microsoft\/WSL\/issues\/1953?target=_blank):<br>\n!! *(92)Protocol not available: AH00076: Failed to enable APR_TCP_DEFER_ACCEPT*\n\nOpen [http:\/\/localhost](http:\/\/localhost?target=_blank) in your browser and you should see the text 'It works!'.\n\nFor your future Grav sites to work properly, the Apache module `rewrite` needs to be enabled.\n\n[prism classes=\"language-bash command-line\"]\nsudo a2enmod rewrite\n[\/prism]\n\n## Installing PHP\nUse the following command to install the latest PHP version:\n\n[prism classes=\"language-bash command-line\"]\nsudo apt install php\n[\/prism]\n\nTo verify that PHP is installed and checking its version, run the following command:\n\n[prism classes=\"language-bash command-line\"]\nphp -v\n[\/prism]\nYou should get a response similar to this:\n\n[prism classes=\"language-bash\"]\nPHP 7.2.7-0ubuntu0.18.04.2 (cli) (built: Jul  4 2018 16:55:24) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\n[\/prism]\n\nTo meet Grav's PHP requirements, a few extra PHP extensions need to be installed:\n\n[prism classes=\"language-bash command-line\"]\nsudo apt install php-mbstring php-gd php-curl php-xml php-zip\n[\/prism]\n\nRestart Apache to pick up the changes:\n\n[prism classes=\"language-bash command-line\"]\nsudo service apache2 restart\n[\/prism]\n\n## Installing Grav\nYou can install Grav either from within Windows or from within Ubuntu.\n\n#### Option 1: Windows\nInstall Grav by downloading the ZIP package and extracting it:\n1. Download the latest-and-greatest [**Grav**](https:\/\/getgrav.org\/download\/core\/grav\/latest?target=_blank) or [**Grav + Admin**](https:\/\/getgrav.org\/download\/core\/grav-admin\/latest?target=_blank) package.\n1. Extract the ZIP file into the webroot you have created before.\n1. Rename the extracted folder to `mysite`.\n1. Open [http:\/\/localhost\/mysite](http:\/\/localhost\/mysite?target=_blank) in the browser and you should have a working Grav installation.\n\n#### Option 2: Ubuntu\nRun the following commands to install Grav inside the default webroot of Apache:\n\n[prism classes=\"language-bash command-line\"]\nwget -O grav.zip https:\/\/getgrav.org\/download\/core\/grav\/latest\nsudo apt install unzip  # unzip is not installed by default on WSL\/Ubuntu\nunzip grav.zip -d \/var\/www\/webroot\nmv \/var\/www\/webroot\/grav \/var\/www\/webroot\/mysite\n[\/prism]\n\nOpen [http:\/\/localhost\/mysite](http:\/\/localhost\/mysite?target=_blank) in the browser and you should have a working Grav installation.\n\nFor other installation options, visit Grav's [Installation](https:\/\/learn.getgrav.org\/basics\/installation?target=_blank) documentation.\n\n## Installing XDebug (optional)\nIf you are a developer and want to develop your own plugins and themes, you ~~probably~~ inevitably need to debug your code at some point...\n\nInstall XDebug using the following command:\n\n[prism classes=\"language-bash command-line\"]\nsudo apt install php-xdebug\n[\/prism]\n\nXDebug needs to be enabled in `php.ini`.<br>\nOpen the editor:\n\n[prism classes=\"language-bash command-line\"]\nsudo nano \/etc\/php\/7.2\/apache2\/php.ini\n[\/prism]\n\nAnd add the following lines to the end of the file:\n\n[prism classes=\"language-text\"]\n[XDebug]\nxdebug.remote_enable = 1\n[\/prism]\n\n!!! In Nano, you can use `Alt`<small>+<\/small>`\/` to jump to the bottom of the file.\n\nRestart Apache again:\n\n[prism classes=\"language-bash command-line\"]\nsudo service apache2 restart\n[\/prism]\n\n#### Activating debugger\nIn order to start debugging, you first need to activate the debugger on the server. For this, you need to set a special GET\/POST or COOKIE parameter. You can do that [manually](https:\/\/xdebug.org\/docs\/remote?target=_blank#starting), but it is much more convenient to use a browser extension. It allows you to enable the debugger with the click of a button. When the extension is active, it sends the XDEBUG_SESSION cookie directly, instead of going through XDEBUG_SESSION_START. Below you can find a table with the link to the relevant extension for your browser.\n\n\n| Browser       | Helper extension  |\n| ------------- |-------------|-----|\n|Chrome         |[Xdebug Helper](https:\/\/chrome.google.com\/extensions\/detail\/eadndfjplgieldjbigjakmdgkmoaaaoc?target=_blank)|\n|Firefox|[Xdebug Helper](https:\/\/addons.mozilla.org\/en-US\/firefox\/addon\/xdebug-helper-for-firefox\/?target=_blank) or [The easiest Xdebug](https:\/\/addons.mozilla.org\/en-US\/firefox\/addon\/the-easiest-xdebug\/?target=_blank)|\n|Opera  |[Xdebug launcher](https:\/\/addons.opera.com\/addons\/extensions\/details\/xdebug-launcher\/?target=_blank)|\n\nWhen you want to switch on\/off debugging for a website, just toggle 'Debug' in the browser extention.\n\n#### Launching debugger in Visual Studio Code (optional)\nWhen using Vistual Studio Code, the default PHP debug launchers won't work when Apache\/PHP is running in WSL, because of the file mappings.\n\nInsert the following configuration into an already created PHP [launch configuration](https:\/\/code.visualstudio.com\/docs\/editor\/debugging?target=_blank#_launch-configurations) in `.vscode\/launch.json`:\n\n[prism classes=\"language-json line-numbers\"]\n{\n    \"name\": \"LSW Listen for XDebug\",\n    \"type\": \"php\",\n    \"request\": \"launch\",\n    \"port\": 9000,\n    \"pathMappings\": {\n        \"\/mnt\/c\": \"c:\/\",\n    }\n}\n[\/prism]\n\n## Adding extra virtual hosts (optional)\nDuring the different stages in the lifecycle of our site (development, testing, production) different Grav configurations may be needed. Take for example caching or asset pipelines. You might want to switch them off during development and switch them on when testing performance. For more information see the documentation on [Automatic Environment Configuration](https:\/\/learn.getgrav.org\/advanced\/environment-config?target=_blank#automatic-environment-configuration).\n- Start an editor as Administrator and open file `C:\/Windows\/System32\/drivers\/etc\/hosts`.\nYou could, for example, add the following hosts:\n\n    [prism classes=\"language-bash\"]\n    127.0.0.1 mysite-dev\n    127.0.0.1 mysite-prod\n    [\/prism]\n\n    Hosts defined in Windows hosts file will automatically be available in `\/etc\/hosts` in WSL\/Ubuntu.\n- Create new VirtualHost config files in folder `\/etc\/apache2\/sites-available`.\n    [prism classes=\"language-bash command-line\"]\n    sudo nano \/etc\/apache2\/sites-available\/mysite-dev.conf\n    [\/prism]\n    Past the following into the editor:\n    [prism classes=\"language-apacheconf line-numbers\"]\n    <VirtualHost *:80>\n\n        ServerName mysite-dev\n\n        ServerAdmin webmaster@localhost\n        DocumentRoot  \/var\/www\/webroot\/mysite\n\n        <Directory \/var\/www\/>\n            Options Indexes FollowSymLinks\n            AllowOverride All\n            Require all granted\n        <\/Directory>\n\n        ErrorLog ${APACHE_LOG_DIR}\/error.log\n        CustomLog ${APACHE_LOG_DIR}\/access.log combined\n\n    <\/VirtualHost>\n    [\/prism]\nRepeat the above commands for `mysite-prod.conf` and use `ServerName mysite-prod` as server.\n\nEnable the new VirtualHosts in the Apache configuration:\n[prism classes=\"language-bash command-line\"]\nsudo a2ensite mysite-*\nsudo service apache2 reload\nsudo service apache2 restart\n[\/prism]\nNow you can point the browser to [http:\/\/mysite-dev](http:\/\/mysite-dev?target=_blank) and it will open the Grav installation at `C:\/your\/path\/to\/webroot\/mysite` using the config files in folder `\/user\/mysite-dev\/config\/`.\n\n## Automatically start Apache (optional)\nFor starting and stopping Apache, elevated privileges are required. And to be granted the elevated privileges, a password is requested. To prevent Ubuntu asking for a password you can grant yourself permanent elevated privileges for certain services.\n\nStart the [visudo](http:\/\/manpages.ubuntu.com\/manpages\/trusty\/man8\/visudo.8.html?target=_blank) editor to edit the sudoer file:\n[prism classes=\"language-bash command-line\"]\nsudo visudo -f \/etc\/sudoers.d\/services\n[\/prism]\nCopy the following lines into the editor:\n[prism classes=\"language-bash\"]\n%sudo ALL=(root) NOPASSWD: \/usr\/sbin\/service *\n%wheel ALL=(root) NOPASSWD: \/usr\/sbin\/service *\n[\/prism]\n\nApache can now be started with elevated privileges without providing a password.\n\nTo start Apache whenever an Ubuntu shell is started, the `sudo service apache2 start` command needs to be added to the `.bashrc` startup script. This script is run whenever you start a WSL terminal.\n[prism classes=\"language-bash command-line\"]\nnano .bashrc\n[\/prism]\nAdd the following script to the end of the file:\n[prism classes=\"language-apacheconf line-numbers\"]\n## Start apache2 if not running\nstatus=`service apache2 status`\nif [[ $status == *\"apache2 is not running\" ]]\nthen\n  sudo service apache2 start\nfi\n[\/prism]\nAnd add the following to `.bash_logout` to stop Apache when closing the bash shell.\n[prism classes=\"language-apacheconf line-numbers\"]\n## Stop apache2 if running\nstatus=`service apache2 status`\nif [[ $status == *\"apache2 is running\" ]]\nthen\n  sudo service apache2 stop\nfi\n[\/prism]\n\n## Tips and Tricks\n\n### GUI Linux terminal emulator\nIf you're not a fan of the default terminal experience and would like to install a \"native\" Linux GUI terminal, you might want to have a look at the article [Configuring a pretty and usable terminal emulator for WSL](https:\/\/blog.ropnop.com\/configuring-a-pretty-and-usable-terminal-emulator-for-wsl\/?target=_blank).\n\n### Multiple websites, one Grav codebase\nIf you are like me and have multiple Grav websites deployed for separate projects, you might want to read the documentation on [Symbolic Links](https:\/\/learn.getgrav.org\/cli-console\/command-line-intro?target=_blank#symbolic-links) and on [Copying a Project](https:\/\/learn.getgrav.org\/cli-console\/grav-cli?target=_blank#copying-a-project) to create a symlinked copy of a single Grav core."},{"title":"Fortrabbit - PHP hosting","date":"2019-07-05T11:02:39+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/paas\/fortrabbit","taxonomy":{"categories":["docs"],"tags":[]},"media":["fortrabbit-website.png"],"content":"[Fortrabbit](http:\/\/www.fortrabbit.com) \u2014 secure like fort knox, fast like a rabbit \u2014 is a managed cloud hosting service dedicated for PHP. It supports a modern PHP development with micro-service oriented hosting infrastructure \u2014 perfect for Grav. Fortrabbit is a Platform as a Service \u2014 thus a bit different than traditional hosting.\n\n![Fortrabbit website](fortrabbit-website.png)\n\n## Sign up\n\nTo sign up to Fortrabbit you only need to verify your email address and set up password.\n\n## Spin up an App\n\nChoose a preset or configure single Component scalings on your own. Grav \u2014 without plugins \u2014 doesn't require huge amounts of RAM. Grav doesn't need a MySQL database \u2014 so deselected it. Start with the smallest plan and scale up when needed.\n\nThere is also **free trial** \u2014 which is feature complete but limited in time. Your App will be destroyed when the App is over. Then you can start a new trial. You can also ask to extend a trial.\n\n## Install locally\n\nFirst [download](https:\/\/getgrav.org\/downloads) and unpack the latest Grav locally. It unpacks in the subfolder `grav`. You might configure your localhost to serve the grav site locally now.\n\n## Deploy to Fortrabbit\n\nNow you can push it. Change into the project folder and set it up with your Git remote on Fortrabbit:\n\n[prism classes=\"language-bash command-line\"]\n$ cd grav\n$ git init .\n\\$ git remote add fortrabbit git@deploy.eu2.frbit.com:your-app.git\n[\/prism]\n\nBefore committing anything, you should exclude the `vendor\/` and the `cache\/` folder. Create the file `.gitignore` with the following contents:\n\n[prism classes=\"language-text\"]\nvendor\ncache\/\\*\n!cache\/.gitkeep\n[\/prism]\n\nNow you can add everything and push everything to your App:\n\n[prism classes=\"language-bash command-line\"]\n$ git add -A\n$ git commit -m 'Initial'\n\\$ git push -u fortrabbit master\n[\/prism]\n\nDone: The first deployment triggers a Composer install on remote which can take a few minutes. You can watch it build in the Git output stream. Now, your Grav site is online. Each App comes with an App URL (your-app.frb.io) which you can visit in the browser.\n\nRepeat: Craft your theme and contents locally and just push it to the Fortrabbit master branch to deploy. The second deploy will only take a few seconds.\n\n### Further reading\n\nThat is just the basics visit the [Fortrabbit Grav install and tuning guide](http:\/\/help.fortrabbit.com\/install-grav) to learn about themes, plugins and quirks.\n"},{"title":"Microsoft Azure","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/paas\/azure","taxonomy":{"categories":["docs"],"tags":[]},"media":["Azure.png","step1.png","step2.png","step3.png","step4.png"],"content":"[Microsoft Azure](http:\/\/azure.microsoft.com) is an enterprise-grade cloud computing platform that is open and flexible.  There are multiple ways to deploy Grav within Azure however this tutorial will walk through using Azure's Web App (PaaS).\n\n## Things you'll need\n\n* An Azure Account\n* Github Account\n* A copy of Grav\n\n![Azure Logo](Azure.png)\n\n## Signing Up On Azure\nFirst [sign up for an account](https:\/\/azure.microsoft.com\/en-gb\/free\/) on Azure, you will receive access to free services plus \u00a3150 (UK) in credit to use for the first 30 days. \n\n## Signing Up on GitHub\nIf you do not have a GitHub account set [please sign up for one](https:\/\/github.com\/join?source=header-home), the free plan is sufficient. \n\n## Clone Grav Source Code\nYou need a copy of Grav in order to follow this tutorial, I would suggest downloading the basic Grav and Admin Plugin files, and creating a Github repository with those files \n\nYou should now have all the necessary components to deploy a working copy of Grav within Azure. \n\n## Web.Config File\n\nIn addition to the Grav code you need a web.config file.  The web.config file is an XML file that sits in the root folder of the Web App and generally contains the main settings and configuration for Web App.  \n\nAn example web.config file is available [here](web.config).  This web.config file, covers off what the Web App should do with file formats such as *.woff* and *.woff2*, which are now part of the latest [Font Awesome packs](https:\/\/fontawesome.com).\n\nGrav have also included examples of the web.config files in their source files, you can find them located in the *webserver-configs* folder. \n\nOnce you have your web.config setup, you should upload this to your Grav GitHub repository, it needs to be at the root level. \n\n## Installing And Running Grav On Azure\n\n### Setting Up Your Web App\n\n+ The first step is to [login to the Azure Portal](https:\/\/portal.azure.com), click on *Create a Resource* on the left hand side menu. \n\n![Step 1](step1.png)\n\n+ Search for *web app* and select the service\n\n![Step 2](step2.png)\n\n+ A new blade will open, describing the Web App service.  At the bottom of the page you will find a *create* button, when you initiate that another blade will open.  You will be asked several questions. \n\n    - The App Name will form part of the public URL your website will have when first created, \n    - The subscription is the plan your web app will be hosted within and where the payment for the service will come from\n    - A resource group within Azure is a way of logically grouping your services, the name of this group is private and only you will see this\n    - An Azure Web App can run on a Windows, Linux or Docker platform.  For Grav select Windows\n    - The App Service Plan\/Location determines which data centre your web app will reside in within Azure and the cost of it\n    - Application Insights is the service on Azure that can help monitor your web app for issues and understand how your end users are interacting with it.  \n\nMy recommendation regarding the App Service Plan would be to select the Dev\/Test F1 plan for testing purposes.  The plan has some limitations but it will give you the ability to deploy your first Grav site on Azure without incurring any costs.  In terms of the location I would select one that is close to your location.  Also in this example I would avoid deploying Application Insights as it needs coded in order to integrate with Grav. \n\n![Step 3](step3.png)\n\nYour Web App should deploy within a few minutes. \n\n### Install Composer\n\nComposer is a dependency manager for PHP. Composer will manage the dependencies you require on a project by project basis, meaning Composer will pull in all the required libraries, dependencies and for your application.  As Grav is a PHP application we need to ensure the Composer is installed on the Web App for Grav to run properly. \n\nIn order to do this follow these steps:\n\n    - Open up your Web App\n    - Click on the Extensions setting\n    - Click on Add\n    - Select Composer\n    - Click OK\n\nOnce Composer has installed on your Web App you are now ready to deploy your code. \n\n### Deploying Your Code\n\nNow that your Web App is up and running and you have the code, it is time to deploy it.  To do that open up the Web App within the Azure Portal. \n\n+ Navigate to the *Deployment Options* blade \n\n![Step 4](step4.png)\n\n+ Select GitHub as your source\n\n+ You will be asked for credentials to your GitHub account and then presented with options about which repository and branch to pull from, select the options relevant for you\n\n+ *Azure will now start to pull your code from GitHub, within a few minutes your site should be live*\n\n\n## Additional Information \n\n### Custom Domain\n\nIf you wish to use your own website URL, please follow the [official documentation](https:\/\/docs.microsoft.com\/en-gb\/azure\/app-service\/app-service-web-tutorial-custom-domain).\n\n### Always On\n\nBy default all Azure Web Apps are unloaded if they are idle for some period of time.  This is to help conserve resources. If you have selected a Basic or Standard plan you can enable the *Always On* mode, which will keep the app loaded all the time.  The Always On setting can be found within the *Application Settings* blade in your Web App. \n\n### Quotas\n\nIf you have selected one of the Free or Shared Web App Plans for your deployment you will be restricted in regards of storage space and compute resources you can use.  To monitor these settings you should monitor the *Quotas* blade. "},{"title":"Heroku","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/paas\/heroku","taxonomy":{"categories":["docs"],"tags":[]},"content":"Heroku is a very well known hosting for web applications.\nIt has a free plan useful for testing purposes, and paid options to deploy the website.\n\nIt offers a wide variety of addons and it's one of the most flexible PAAS around.\n\nThey are PHP friendly, and they have a great \"Getting Started with PHP on Heroku\" guide at [https:\/\/devcenter.heroku.com\/articles\/getting-started-with-php#introduction](https:\/\/devcenter.heroku.com\/articles\/getting-started-with-php#introduction), and it will be the base of the instruction set.\n\nLet's see how to install Grav on Heroku.\n\nFirst, sign up for Heroku.\n\nDownload the Heroku Toolbelt, which is a command-line utility needed to deploy create and deploy your site.\n\nOnce installed, type\n\n\n[prism classes=\"language-bash command-line\"]\nheroku login\n[\/prism]\n\n\nEnter your credentials.\n\nNow checkout the PHP \"Getting Started\" example they provide in your local web root, so you can test locally the site prior to deploying it.\n\n[prism classes=\"language-bash command-line\"]\ngit clone https:\/\/github.com\/heroku\/php-getting-started.git your-folder\n[\/prism]\n\n[prism classes=\"language-bash command-line\"]\ncd your-folder\n[\/prism]\n\nNow deploy your app with\n\n[prism classes=\"language-bash command-line\"]\nheroku create\n[\/prism]\n\nand\n\n[prism classes=\"language-bash command-line\"]\ngit push heroku master\n[\/prism]\n\nEnsure that at least one instance of the app is running:\n\n[prism classes=\"language-bash command-line\"]\nheroku ps:scale web=1\n[\/prism]\n\nand open the site in the browser:\n\n\n[prism classes=\"language-bash command-line\"]\nheroku open\n[\/prism]\n\n\n\nYou should now see the sample PHP project. Now that all is set, you're ready to go on and run Grav instead of the sample site.\n\nFirst, delete the web\/ folder in your current site folder.\n\nCopy your Grav site files there, making sure you're also copying the `.htaccess` hidden file. Overwrite all the files that were existing.\n\nNow open the `Procfile` file. This is a Heroku-specific file. Change the line to\n\n[prism classes=\"language-text\"]\nweb: vendor\/bin\/heroku-php-apache2 .\/\n[\/prism]\n\nYou should make sure the site works locally, prior to uploading it to Heroku, just to ensure the are no errors.\n\nNow commit to the repository with\n\n`git add . ; git commit -am 'Added Grav'`\n\nThen edit `composer.json` and add post deploy command to the `scripts` section as in\n\n[prism classes=\"language-json line-numbers\"]\n\"scripts\": {\n  \"compile\": [\n    \"bin\/grav install\",\n    \"bin\/gpm install quark -y\"\n  ]\n}\n[\/prism]\n\nand commit that to the repository with \n\n[prism classes=\"language-bash command-line\"]\ngit add . ; git commit -am 'Add post deploy bin\/grav install'\n[\/prism]\n\nThen run\n\n[prism classes=\"language-bash command-line\"]\ngit push heroku master\n[\/prism]\n\nand the site should be good to go!\n\nDue to the ephemeral nature of Heroku's filesystem, all needed plugins or themes must be added to `composer.json` just like above and kept there so they are installed every time the site is pushed to Heroku. For example, if you need the `admin` plugin and a theme, add them in composer like in\n\n[prism classes=\"language-json line-numbers\"]\n\"scripts\": {\n  \"compile\": [\n    \"bin\/grav install\",\n \u00a0 \u00a0\"bin\/gpm install admin -y\",\n \u00a0 \u00a0\"bin\/gpm install awesome-theme-name-here -y\"\n \u00a0]\n}\n[\/prism]\n"},{"title":"Cloudways - Managed Cloud for PHP Hosting","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/paas\/cloudways","taxonomy":{"categories":["docs"],"tags":[]},"media":["cw-logo.png"],"content":"[Cloudways](http:\/\/www.cloudways.com) is a Managed Cloud Platform for PHP-based web apps. On Cloudways, you can choose your server from four cloud providers: DigitalOcean, Vultr, Google Cloud Engine (GCE) and Amazon Web Services (AWS) to run your PHP work on it. It allows user to launch cloud servers with minutes for PHP app development. Cloud server management is the job of Cloudways; you're only responsible for your Grav CMS application. \n\nRecently, Cloudways interviewed one of the [lead developer of Grav CMS Andy Miller](https:\/\/www.cloudways.com\/blog\/interview-andy-miller\/).\n\n![Cloudways](cw-logo.png)\n## Signing Up On Cloudways\nFirst [sign up for an account](https:\/\/platform.cloudways.com\/signup) on Cloudways by using your GitHub account. If you do not want to use your Grav CMS credentials, you can create an account using a email address. After signing up on Cloudways and launching a PHP Stack application, follow these steps to install and run Grav CMS on your cloud server: \n\n## Installing And Running Grav On Cloudways\nLogin in SSH Terminal and move to your application public_html folder.\n\n[prism classes=\"language-bash command-line\"]\ncd applications\/<foldername>\/public_html\/\n[\/prism]\n\nGo [Grav CMS download](https:\/\/getgrav.org\/downloads) page and copy the download link. Now, go to the terminal and download it there by using the following command\n\n[prism classes=\"language-bash command-line\"]\nwget https:\/\/github.com\/getgrav\/grav\/releases\/download\/{{ grav_version }}\/grav-admin-v{{ grav_version }}.zip\n[\/prism]\n\nAfter downloading it, unzip the file.\n\n[prism classes=\"language-bash command-line\"]\nunzip grav-admin-v{{ grav_version }}.zip\n[\/prism]\n\nThat\u2019s it! Grav CMS is ready for your use on Cloudways PHP Hosting Platform. Head to your Application Staging URL and add \/grav-admin at the end of the URL."},{"title":"Paas","date":"2019-07-05T11:04:59+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/paas","taxonomy":{"categories":[],"tags":[]}},{"title":"Local Development with ddev","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/local-development-with-ddev","taxonomy":{"categories":[],"tags":[]},"content":"[ddev](https:\/\/ddev.readthedocs.io) is an open-source, PHP development tool, built upon Docker.  It can easliy create local hosting environments, and its server configurations can be version controlled.  Originally meant for Drupal development, ddev easily can host Drupal, Wordpress, and GravCMS sites.  Since it is based on Docker, ddev is compatible with Windows, Mac, and Linux.\n\n\n## Installing ddev\n\nPlease see the [official ddev documentation](https:\/\/ddev.readthedocs.io\/en\/latest\/) for the most up to date instructions for installing ddev.  \n\n## Configuration\n\n* Place the Grav files in a folder on the host machine (\/home\/USER\/projects\/grav).\n* In your terminal, cd to that folder `cd \/home\/USER\/projects\/grav`\n* Type `ddev config`.  The following prompts will display:\n * Project name (defaults to \\[GRAV_ROOT]'s folder name\n * Docroot path (defaults to the \\[GRAV_ROOT])\n * Project type (use type `php` for this option)\n* ddev is configured to use nginx, so copy the configuration from \\[GRAV_ROOT]\\webserver-configs\\nginx-ddev-site.conf to \\[GRAV_ROOT]\\.ddev\\nginx-site.conf\n* run `ddev start `from the \\[GRAV_ROOT] folder.\n* Let ddev build out the containers it requires.  Root\/ Sudo credentials may be required in order to make local hosts changes.\n\n## Using ddev\n\nRun these commands from the \\[GRAV_ROOT] on the host machine:\n* `ddev describe` - Views all available services\n* `ddev ssh` - Connects a shell to the webserver at the docroot.\n* `ddev exec params` - Executes params at the docroot (e.g. `ddev exec bin\/grav clear` to clear the cache)\n\n_I need to intall \\[insert plugin\/ theme here].  How do I access `bin\/gpm`?_\n\n  From the \\[GRAV_ROOT], type `ddev ssh` and you'll be connected to the web server at the docroot. From here, you can run any php command (composer, bin\/gpm, bin\/grav, etc).\n\n_Where do I edit my files?_\n\n  An editor on the host machine can edit the files at  \\[GRAV_ROOT].  Changes will reflect into the ddev container automatically.  Changes performed in the container (i.e. `bin\/gpm install admin`) will reflect to the host machine.\n\n\n"},{"title":"Nginx","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/servers\/nginx","taxonomy":{"categories":["docs"],"tags":[]},"content":"*Nginx* is a HTTP server software with focus on core web server and proxy features. It is very common because of its resource efficiency and responsiveness under load. Nginx spawns worker processes, each of which can handle thousands of connections. Each of the connections handled by the worker get placed within an event loop where they exist with other connections. Within the loop, events get processed asynchronously, allowing work to be handled in a non-blocking manner. When the connection closes, it gets removed from the loop. This style of connection processing allows Nginx to scale incredibly far with limited resources.\n\n<!-- source: https:\/\/www.digitalocean.com\/community\/tutorials\/apache-vs-nginx-practical-considerations -->\n\n## Requirements\n\nThis page explains how to run Grav with *Nginx* as the HTTP server and *PHP-FPM* (FastCGI Process Manager) to process PHP scripts, so these packages need to be installed on your server:\n\n* `nginx`\n* `php5-fpm`\n\n## Configuration\n\nIf you are new to Nginx and don't yet have a basic understanding of block directives\/context, it is recommended to read the Nginx [Beginners's Guide](http:\/\/nginx.org\/en\/docs\/beginners_guide.html), especially the sections [Configuration File\u2019s Structure](http:\/\/nginx.org\/en\/docs\/beginners_guide.html#conf_structure) and [Serving Static Content](http:\/\/nginx.org\/en\/docs\/beginners_guide.html#static).\n\nIt is assumed that your Nginx configuration is located in `\/etc\/nginx\/` and your Grav installation is stored in `\/var\/www\/grav\/`. The structure of the configuration is a `http` block that contains general directives relevant for all pages served by Nginx, as well as one or multiple `server` blocks for each page, containing site-specific directives. The main server configuration file is `nginx.conf` and stores the `http` block, while site-specific configurations (`server` blocks) are stored in `sites-available` and symlinked to `sites-enabled`.\n\n### File Permissions\n\nThe `\/var\/www` directory and all contained files and folders should be owned by `$USER:www-data` (or whatever you name the Nginx user\/group). The section <troubleshooting\/permissions> explains how to setup file and directory permissions for Grav, in this case using a shared group. Basically what you want is `775` for directories and `664` for files in the Grav directory, so Grav is allowed to modify content and upgrade itself. You should add your user to the `www-data` group so you can access files that are created by Grav\/Nginx.\n\n\n### Example nginx.conf\n\nThe following configuration is an improved version of the default `\/etc\/nginx\/nginx.conf` file, mainly with improvements from [github.com\/h5bp\/server-configs-nginx](https:\/\/github.com\/h5bp\/server-configs-nginx). See their repository for explanations on these settings or the Nginx [core module](http:\/\/nginx.org\/en\/docs\/ngx_core_module.html) and [http module](http:\/\/nginx.org\/en\/docs\/http\/ngx_http_core_module.html) documentation to look up specific directives.\n\n!! It is recommended to use an updated MIME types definition file (`mime.types`) from [github.com\/h5bp\/server-configs-nginx](https:\/\/github.com\/h5bp\/server-configs-nginx). This will make sure that the types are correctly set for gzip compression.\n\n**nginx.conf**:\n\n[prism classes=\"language-nginx line-numbers\"]\nuser www-data;\nworker_processes auto;\nworker_rlimit_nofile 8192; # should be bigger than worker_connections\npid \/run\/nginx.pid;\n\nevents {\n    use epoll;\n    worker_connections 8000;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n\n    keepalive_timeout 30; # longer values are better for each ssl client, but take up a worker connection longer\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    # maximum file upload size\n    # update 'upload_max_filesize' & 'post_max_size' in \/etc\/php5\/fpm\/php.ini accordingly\n    client_max_body_size 32m;\n    # client_body_timeout 60s; # increase for very long file uploads\n\n    # set default index file (can be overwritten for each site individually)\n    index index.html;\n\n    # load MIME types\n    include mime.types; # get this file from https:\/\/github.com\/h5bp\/server-configs-nginx\n    default_type application\/octet-stream; # set default MIME type\n\n    # logging\n    access_log \/var\/log\/nginx\/access.log;\n    error_log \/var\/log\/nginx\/error.log;\n\n    # turn on gzip compression\n    gzip on;\n    gzip_disable \"msie6\";\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 5;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_min_length 256;\n    gzip_types\n        application\/atom+xml\n        application\/javascript\n        application\/json\n        application\/ld+json\n        application\/manifest+json\n        application\/rss+xml\n        application\/vnd.geo+json\n        application\/vnd.ms-fontobject\n        application\/x-font-ttf\n        application\/x-web-app-manifest+json\n        application\/xhtml+xml\n        application\/xml\n        font\/opentype\n        image\/bmp\n        image\/svg+xml\n        image\/x-icon\n        text\/cache-manifest\n        text\/css\n        text\/plain\n        text\/vcard\n        text\/vnd.rim.location.xloc\n        text\/vtt\n        text\/x-component\n        text\/x-cross-domain-policy;\n\n    # disable content type sniffing for more security\n    add_header \"X-Content-Type-Options\" \"nosniff\";\n\n    # force the latest IE version\n    add_header \"X-UA-Compatible\" \"IE=Edge\";\n\n    # enable anti-cross-site scripting filter built into IE 8+\n    add_header \"X-XSS-Protection\" \"1; mode=block\";\n\n    # include virtual host configs\n    include sites-enabled\/*;\n}\n[\/prism]\n\n### Grav Site Configuration\n\nGrav gets shipped with a configuration file for your site in the `webserver-configs` directory of your Grav installation. You can copy that file into your nginx config directory:\n\n[prism classes=\"language-bash command-line\"]\ncp \/var\/www\/grav\/webserver-configs\/nginx.conf \/etc\/nginx\/sites-available\/grav-site\n[\/prism]\n\nOpen that file with an editor and replace \"example.com\" with your domain\/IP (or \"localhost\" if you want to just run it locally), replace the \"root\" line with \"root \/var\/www\/grav\/;\" and then create a symbolic link of your site-config in `sites-enabled`:\n\n[prism classes=\"language-bash command-line\"]\nln -s \/etc\/nginx\/sites-available\/grav-site \/etc\/nginx\/sites-enabled\/grav-site\n[\/prism]\n\n<!--\n!! It is recommended to use the file `expires.conf` from [github.com\/h5bp\/server-configs-nginx](https:\/\/github.com\/h5bp\/server-configs-nginx) (in the directory `h5bp\/location\/`). It will set \"Expires\" headers for different file types, so the browser can cache them. Save the file somewhere in your `\/etc\/nginx\/` directory and include it in your site config, e.g. before the first location directive in `\/etc\/nginx\/sites-available\/grav-site`.\n-->\n\nFinally let Nginx reload its configuration:\n\n[prism classes=\"language-bash command-line\"]\nnginx -s reload\n[\/prism]\n\n### Fix against httpoxy vulnerability\n\n> httpoxy is a set of vulnerabilities that affect application code running in CGI, or CGI-like environments.\n> (Source: [httpoxy.org](https:\/\/httpoxy.org))\n\nIn order to secure your site against this vulnerability you should block the `Proxy` header. This can be done by adding a FastCGI parameter to your config. Simply open the file `\/etc\/nginx\/fastcgi.conf` and add this line at the end:\n\n[prism classes=\"language-nginx\"]\nfastcgi_param  HTTP_PROXY         \"\";\n[\/prism]\n\n### Using SSL (with an existing certificate)\n\nIf you want to use an existing SSL certificate to encrypt your website traffic, this section provides the necessary steps to modify your Nginx configuration for that.\n\nFirst, create a file `\/etc\/nginx\/ssl.conf` with the following content and adjust the paths to your certificate and key file. The last section is about OSCP stapling and requires you to provide a chain+root certificate. If you don't want this, you can comment or remove everything below the `OCSP Stapling` comment. If your website is SSL only (including subdomains), you can submit your domain for preloading in browsers at <https:\/\/hstspreload.appspot.com>. If that isn't the case, you can remove ` preload;` from the line that adds the \"Strict-Transport-Security\" header. Make sure to check if all of these options work for your setup.\n\n**ssl.conf**:\n\n[prism classes=\"language-nginx line-numbers\"]\n# set the paths to your cert and key files here\nssl_certificate \/etc\/ssl\/certs\/example.com.crt;\nssl_certificate_key \/etc\/ssl\/private\/example.com.key;\n\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\nssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;\nssl_prefer_server_ciphers on;\n\nssl_session_cache shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions\nssl_session_timeout 24h;\n\n# Use a higher keepalive timeout to reduce the need for repeated handshakes\nkeepalive_timeout 300s; # up from 75 secs default\n\n# submit domain for preloading in browsers at: https:\/\/hstspreload.appspot.com\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload;\";\n\n# OCSP stapling\n# nginx will poll the CA for signed OCSP responses, and send them to clients so clients don't make their own OCSP calls.\n# see https:\/\/sslmate.com\/blog\/post\/ocsp_stapling_in_apache_and_nginx on how to create the chain+root\nssl_stapling on;\nssl_stapling_verify on;\nssl_trusted_certificate \/etc\/ssl\/certs\/example.com.chain+root.crt;\nresolver 198.51.100.1 198.51.100.2 203.0.113.66 203.0.113.67 valid=60s;\nresolver_timeout 2s;\n[\/prism]\n\nNow change the content of your Grav-specific config `\/etc\/nginx\/sites-available\/grav-site` to redirect unencrypted HTTP requests to HTTPS, that means to a `server` block listening on port 443 and including your `ssl.conf` (replace \"example.com\" with your domain\/IP). You can also change this to redirect from the non-www to the www version of your domain.\n\n**grav-site**:\n\n[prism classes=\"language-nginx line-numbers\"]\n# redirect http to non-www https\nserver {\n    listen [::]:80;\n    listen 80;\n    server_name example.com www.example.com;\n\n    return 302 https:\/\/example.com$request_uri;\n}\n\n# redirect www https to non-www https\nserver {\n    listen [::]:443 ssl;\n    listen 443 ssl;\n    server_name www.example.com;\n\n    # add ssl cert & options\n    include ssl.conf;\n\n    return 302 https:\/\/example.com$request_uri;\n}\n\n# serve website\nserver {\n    listen [::]:443 ssl;\n    listen 443 ssl;\n    server_name example.com;\n\n    # add ssl cert & options\n    include ssl.conf;\n\n    root \/var\/www\/example.com;\n\n    index index.html index.php;\n\n    # ...\n    # the rest of this server block (location directives) is identical to the one from the shipped config\n}\n[\/prism]\n\nFinally reload your Nginx configuration:\n\n[prism classes=\"language-bash command-line\"]\nnginx -s reload\n[\/prism]\n\n<!-- TODO: ### Using a Let's Encrypt SSL certificate -->\n"},{"title":"Servers","date":"2017-12-01T22:17:34+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/servers","taxonomy":{"categories":[],"tags":[]}},{"title":"Ubuntu 18.04 VPS Installation","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/ubuntu-18.04","taxonomy":{"categories":[],"tags":[]},"content":"{% set ssh_port = page.header.ssh_port %}\n\n### Update and Upgrade Packages\n\nAt this point, you might want to either setup a local `\/etc\/hosts` entry to give the IP provided a nice friendly name such as `{{ page.header.localname }}`.  That way you can more easily SSH to your server with `ssh root@{{ page.header.localname }}{% if ssh_port %} -p{{ ssh_port }}{% endif %}`.\n\n{% if ssh_port %}\n!!! The `-p{{ ssh_port}}` configuration option is required in order to be able to the non-standard SSH port\n{% endif %}\n\nAfter successfully SSH'ing to your server as **root**, the first thing you will want to do is update and upgrade all the installed packages.  This will ensure you are running the _latest-and-greatest_:\n\n```\n# apt update\n# apt upgrade\n```\n\nJust answer `Y` if prompted.\n\nBefore we go any further, let's remove **Apache2** which we will replace with **Nginx**:\n\n```\n# apt remove apache2*\n# apt autoremove\n```\n\n!! NOTE: You might not have this installed.  But better safe than sorry!\n\nNext you will want to install some essential packages:\n\n```\n# apt install vim zip unzip nginx git php-fpm php-cli php-gd php-curl php-mbstring php-xml php-zip php-apcu\n```\n\nThis will install the complete VIM editor (rather than the mini version that ships with Ubuntu), Nginx web server, GIT commands, and **PHP 7.2**.\n\n### Configure PHP7.2 FPM\nOnce php-fpm is installed, there is a slight configuration change that needs to take place for a more secure setup.\n\n```\n# vim \/etc\/php\/7.2\/fpm\/php.ini\n```\n\nSearch for `cgi.fix_pathinfo`. This will be commented out by default and set to '1'.\n\nThis is an extremely insecure setting because it tells PHP to attempt to execute the closest file it can find if the requested PHP file cannot be found. This basically would allow users to craft PHP requests in a way that would allow them to execute scripts that they shouldn't be allowed to execute.\n\nUncomment this line and change '1' to '0' so it looks like this\n\n```\ncgi.fix_pathinfo=0\n```\n\nSave and close the file, and then restart the service.\n\n```\n# systemctl restart php7.2-fpm \n```\n\n### Configure Nginx Connection Pool\n\nNginx has already been installed, but you should configure is so that it uses a user-specific PHP connection pool.  This will ensure you are secure and avoid any potential file permissions when working on the files as your user account, and via the web server.\n\nNavigate to the pool directory and create a new `grav` configuration:\n\n```\n# cd \/etc\/php\/7.2\/fpm\/pool.d\n# mv www.conf www.conf.bak\n# vim grav.conf\n```\n\nIn Vim, you can paste the following pool configuration:\n\n```\n[grav]\n\nuser = grav\ngroup = grav\n\nlisten = \/var\/run\/php\/php7.2-fpm.sock\n\nlisten.owner = www-data\nlisten.group = www-data\n\npm = dynamic\npm.max_children = 5\npm.start_servers = 2\npm.min_spare_servers = 1\npm.max_spare_servers = 3\n\nchdir = \/\n```\n\nThe key things here are the `user` and `group` being set to a user called `grav`, and the listen socket having a unique name from the standard socket.  Save and exit this file.\n\nWe need to create the dedicated `grav` user now:\n\n```\n# adduser grav\n```\n\nProvide a strong password, and leave the other values as default. We need to next create an appropriate location for Nginx to serve files from, so let's switch user and create those folder, and create a couple of test files:\n\n```\n# su - grav\n$ mkdir -p www\/html\n$ cd www\/html\n```\n\nCreate a simple `index.html` with the contents of:\n\n```\n <h1>Working!<\/h1>\n```\n\n..and a file called `info.php` with the contents of:\n\n```\n<?php phpinfo();\n```\n\nNow we can exit out of this user and return to root in order to setup the Nginx server configuration:\n\n```\n$ exit\n# cd \/etc\/nginx\/sites-available\/\n# vim grav\n```\n\nThen simply paste in this configuration:\n\n```\nserver {\n    #listen 80;\n    index index.html index.php;\n\n    ## Begin - Server Info\n    root \/home\/USER\/www\/html;\n    server_name localhost;\n    ## End - Server Info\n\n    ## Begin - Index\n    # for subfolders, simply adjust:\n    # `location \/subfolder {`\n    # and the rewrite to use `\/subfolder\/index.php`\n    location \/ {\n        try_files $uri $uri\/ \/index.php?$query_string;\n    }\n    ## End - Index\n\n    ## Begin - Security\n    # deny all direct access for these folders\n    location ~* \/(\\.git|cache|bin|logs|backup|tests)\/.*$ { return 403; }\n    # deny running scripts inside core system folders\n    location ~* \/(system|vendor)\/.*\\.(txt|xml|md|html|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny running scripts inside user folder\n    location ~* \/user\/.*\\.(txt|md|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny access to specific files in the root folder\n    location ~ \/(LICENSE\\.txt|composer\\.lock|composer\\.json|nginx\\.conf|web\\.config|htaccess\\.txt|\\.htaccess) { return 403; }\n    ## End - Security\n\n    ## Begin - PHP\n    location ~ \\.php$ {\n        # Choose either a socket or TCP\/IP address\n        fastcgi_pass unix:\/var\/run\/php\/php7.2-fpm.sock;\n        # fastcgi_pass unix:\/var\/run\/php5-fpm.sock; #legacy\n        # fastcgi_pass 127.0.0.1:9000;\n\n        fastcgi_split_path_info ^(.+\\.php)(\/.+)$;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root\/$fastcgi_script_name;\n    }\n    ## End - PHP\n}\n```\n\nThis is the stock `nginx.conf` file that comes with Grav with 2 changes. 1) the `root` has been adapted to our user\/folder we just created and the `fastcgi_pass` option has been set to the socket we defined in our `grav` pool. Now we just need to link this file appropriately so that it's **enabled**:\n\n```\n# cd ..\/sites-enabled\n# ln -s ..\/sites-available\/grav\n# rm default\n```\n\nYou can test the configuration with the command `nginx -t`. It should return the following.\n\n```\nnginx: the configuration file \/etc\/nginx\/nginx.conf syntax is ok\nnginx: configuration file \/etc\/nginx\/nginx.conf test is successful\n```\n\nNow all we have to do is restart Nginx and the php7-fpm process and test to ensure we have configured Nginx and the PHP connection pool correctly:\n\n```\n# systemctl restart nginx \n# systemctl restart php7.2-fpm\n```\n\nNow point your browser at your server: `http:\/\/{{ page.header.localname }}` and you should see the text: **Working!**\n\nYou can also test to ensure that PHP is installed and working correctly by pointing your browser to: `http:\/\/{{ page.header.localname }}\/info.php`.  You should see a standard PHP info page with APCu, Opcache, etc listed.\n\n### Installing Grav\n\nThis is the easy part!  First we need to jump back over to the Grav user, so either SSH as `grav@{{ page.header.localname }}` or `su - grav` from the root login. then follow these steps:\n\n```\n$ cd ~\/www\n$ wget -O grav.zip https:\/\/getgrav.org\/download\/core\/grav\/latest\n$ unzip grav.zip\n$ rm -Rf html\n$ mv grav html\n```\n\nNow That's done you can confirm Grav is installed by pointing your browser to `http:\/\/{{ page.header.localname }}` and you should be greeted with the **Grav is Running!** page.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n```\n$ cd ~\/www\/html\n$ bin\/grav clear\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/compiled\/*\n\nTouched: \/home\/grav\/www\/html\/user\/config\/system.yaml\n```\n\nand GPM commands:\n\n```\n$ bin\/gpm index\n```\n"},{"title":"Ubuntu 16.04 VPS Installation","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/ubuntu-16.04","taxonomy":{"categories":[],"tags":[]},"content":"{% set ssh_port = page.header.ssh_port %}\n\n### Update and Upgrade Packages\n\nAt this point, you might want to either setup a local `\/etc\/hosts` entry to give the IP provided a nice friendly name such as `{{ page.header.localname }}`.  That way you can more easily SSH to your server with `ssh root@{{ page.header.localname }}{% if ssh_port %} -p{{ ssh_port }}{% endif %}`.\n\n{% if ssh_port %}\n!!! The `-p{{ ssh_port}}` configuration option is required in order to be able to the non-standard SSH port\n{% endif %}\n\nAfter successfully SSH'ing to your server as **root**, the first thing you will want to do is update and upgrade all the installed packages.  This will ensure you are running the _latest-and-greatest_:\n\n```\n$ apt update\n$ apt upgrade\n```\n\nJust answer `Y` if prompted.\n\nBefore we go any further, let's remove **Apache2** which we will replace with **Nginx**:\n\n```\n$ apt remove apache2*\n$ apt autoremove\n```\n\nNext you will want to install some essential packages:\n\n```\n$ apt install vim zip unzip nginx git php7.0-fpm php7.0-cli php7.0-gd php7.0-curl php7.0-mbstring php7.0-xml php7.0-zip php-apcu\n```\n\nThis will install the complete VIM editor (rather than the mini version that ships with Ubuntu), Nginx web server, GIT commands, and **PHP 7.0**.\n\n### Configure PHP7 FPM\nOnce php-fpm is installed, there is a slight configuration change that needs to take place for a more secure setup.\n\n```\n$ vi \/etc\/php\/7.0\/fpm\/php.ini\n```\n\nSearch for `cgi.fix_pathinfo`. This will be commented out by default and set to '1'.\n\nThis is an extremely insecure setting because it tells PHP to attempt to execute the closest file it can find if the requested PHP file cannot be found. This basically would allow users to craft PHP requests in a way that would allow them to execute scripts that they shouldn't be allowed to execute.\n\nUncomment this line and change '1' to '0' so it looks like this\n\n```\n$ cgi.fix_pathinfo=0\n```\n\nSave and close the file, and then restart the service.\n\n```\n$ systemctl restart php7.0-fpm\n```\n\n### Configure Nginx Connection Pool\n\nNginx has already been installed, but you should configure is so that it uses a user-specific PHP connection pool.  This will ensure you are secure and avoid any potential file permissions when working on the files as your user account, and via the web server.\n\nNavigate to the pool directory and create a new `grav` configuration:\n\n```\n$ cd \/etc\/php\/7.0\/fpm\/pool.d\n$ mv www.conf www.conf.bak\n$ vi grav.conf\n```\n\nIn Vi, you can paste the following pool configuration:\n\n```\n[grav]\n\nuser = grav\ngroup = grav\n\nlisten = \/run\/php\/php7.0-fpm.sock\n\nlisten.owner = www-data\nlisten.group = www-data\n\npm = dynamic\npm.max_children = 5\npm.start_servers = 2\npm.min_spare_servers = 1\npm.max_spare_servers = 3\n\nchdir = \/\n```\n\nThe key things here are the `user` and `group` being set to a user called `grav`, and the listen socket having a unique name from the standard socket.  Save and exit this file.\n\nWe need to create the dedicated `grav` user now:\n\n```\n$ adduser grav\n```\n\nProvide a strong password, and leave the other values as default. We need to next create an appropriate location for Nginx to serve files from, so let's switch user and create those folder, and create a couple of test files:\n\n```\n$ su - grav\n$ mkdir www;cd www;mkdir html;cd html\n```\n\nCreate a simple `index.html` with the contents of:\n\n```\n <h1>Working!<\/h1>\n```\n\n..and a file called `info.php` with the contents of:\n\n```\n<?php phpinfo();\n```\n\nNow we can exit out of this user and return to root in order to setup the Nginx server configuration:\n\n```\n$ exit\n$ cd \/etc\/nginx\/sites-available\/\n$ vi grav\n```\n\nThen simply paste in this configuration:\n\n```\nserver {\n    #listen 80;\n    index index.html index.php;\n\n    ## Begin - Server Info\n    root \/home\/grav\/www\/html;\n    server_name {{ page.header.localname }};\n    ## End - Server Info\n\n    ## Begin - Index\n    # for subfolders, simply adjust the rewrite:\n    # to use `\/subfolder\/index.php`\n    location \/ {\n        try_files $uri $uri\/ \/index.php?$query_string;\n    }\n    ## End - Index\n\n    ## Begin - PHP\n    location ~ \\.php$ {\n        # Choose either a socket or TCP\/IP address\n        fastcgi_pass unix:\/run\/php\/php7.0-fpm.sock;\n        # fastcgi_pass 127.0.0.1:9000;\n\n        fastcgi_split_path_info ^(.+\\.php)(\/.+)$;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root\/$fastcgi_script_name;\n    }\n    ## End - PHP\n\n    ## Begin - Security\n    # deny all direct access for these folders\n    location ~* \/(.git|cache|bin|logs|backups)\/.*$ { return 403; }\n    # deny running scripts inside core system folders\n    location ~* \/(system|vendor)\/.*\\.(txt|xml|md|html|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny running scripts inside user folder\n    location ~* \/user\/.*\\.(txt|md|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny access to specific files in the root folder\n    location ~ \/(LICENSE|composer.lock|composer.json|nginx.conf|web.config|htaccess.txt|\\.htaccess) { return 403; }\n    ## End - Security\n}\n```\n\nThis is the stock `nginx.conf` file that comes with Grav with 2 changes. 1) the `root` has been adapted to our user\/folder we just created and the `fastcgi_pass` option has been set to the socket we defined in our `grav` pool. Now we just need to link this file appropriately so that it's **enabled**:\n\n```\n$ cd ..\/sites-enabled\n$ ln -s ..\/sites-available\/grav\n$ rm default\n```\n\nYou can test the configuration with the command `nginx -t`. It should return the following.\n\n```\nnginx: the configuration file \/etc\/nginx\/nginx.conf syntax is ok\nnginx: configuration file \/etc\/nginx\/nginx.conf test is successful\n```\n\nNow all we have to do is restart Nginx and the php7-fpm process and test to ensure we have configured Nginx and the PHP connection pool correctly:\n\n```\n$ service nginx restart\n$ service php7.0-fpm restart\n```\n\nNow point your browser at your server: `http:\/\/{{ page.header.localname }}` and you should see the text: **Working!**\n\nYou can also test to ensure that PHP is installed and working correctly by pointing your browser to: `http:\/\/{{ page.header.localname }}\/info.php`.  You should see a standard PHP info page with APCu, Opcache, etc listed.\n\n### Installing Grav\n\nThis is the easy part!  First we need to jump back over to the Grav user, so either SSH as `grav@{{ page.header.localname }}` or `su - grav` from the root login. then follow these steps:\n\n```\n$ cd ~\/www\n$ wget -O grav-latest.zip https:\/\/getgrav.org\/download\/core\/grav\/latest\n$ unzip grav-latest.zip\n$ rm -Rf html\n$ mv grav html\n```\n\nNow That's done you can confirm Grav is installed by pointing your browser to `http:\/\/{{ page.header.localname }}` and you should be greeted with the **Grav is Running!** page.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n```\n$ cd ~\/www\/html\n$ bin\/grav clear\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/compiled\/*\n\nTouched: \/home\/grav\/www\/html\/user\/config\/system.yaml\n```\n\nand GPM commands:\n\n```\n$ bin\/gpm index\n```"},{"title":"Ubuntu 14.04 VPS Installation","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/ubuntu-14.04","taxonomy":{"categories":[],"tags":[]},"content":"### Update and Upgrade Packages\n\nAt this point, you might want to either setup a local `\/etc\/hosts` entry to give the IP provided a nice friendly name such as `{{ page.header.localname }}`.  That way you can more easily SSH to your server with `ssh root@{{ page.header.localname }}`.\n\nAfter successfully SSH'ing to your server as **root**, the first thing you will want to do is update and upgrade all the installed packages.  This will ensure you are running the _latest-and-greatest_:\n\n```\n$ apt-get update\n$ apt-get upgrade\n```\n\nJust answer `Y` if prompted.\n\nNext you will want to install some essential packages:\n\n```\n$ apt-get install vim zip unzip nginx git php5-fpm php5-cli php5-gd php5-curl php5-apcu\n```\n\nThis will install the complete VIM editor (rather than the mini version that ships with Ubuntu), Nginx web server, GIT commands, and **PHP 5.5**.\n\n!! If you would prefer to use **PHP 5.6**, you probably should start over and provision your server with **Ubuntu 15.10** which is the more cutting edge version of Ubuntu.\n\n### Configure Nginx Connection Pool\n\nNginx has already been installed, but you should configure is so that it uses a user-specific PHP connection pool.  This will ensure you are secure and avoid any potential file permissions when working on the files as your user account, and via the web server.\n\nNavigate to the pool directory and create a new `grav` configuration:\n\n```\n$ cd \/etc\/php5\/fpm\/pool.d\n$ vi grav.conf\n```\n\nIn Vi, you can paste the following pool configuration:\n\n```\n[grav]\n\nuser = grav\ngroup = grav\n\nlisten = \/var\/run\/php5-fpm.grav.sock\n\nlisten.owner = www-data\nlisten.group = www-data\n\npm = dynamic\npm.max_children = 5\npm.start_servers = 2\npm.min_spare_servers = 1\npm.max_spare_servers = 3\n\nchdir = \/\n```\n\nThe key things here are the `user` and `group` being set to a user called `grav`, and the listen socket having a unique name from the standard socket.  Save and exit this file.\n\nWe need to create the dedicated `grav` user now:\n\n```\n$ adduser grav\n```\n\nProvide a strong password, and leave the other values as default. We need to next create an appropriate location for Nginx to serve files from, so let's switch user and create those folder, and create a couple of test files:\n\n```\n$ su - grav\n$ mkdir www;cd www;mkdir html;cd html\n```\n\nCreate a simple `index.html` with the contents of `<h1>Working!<\/h1>` and a file called `info.php` with the contents of `<?php phpinfo();`\n\nNow we can exit out of this user and return to root in order to setup the Nginx server configuration:\n\n```\n$ exit\n$ cd \/etc\/nginx\/sites-available\/\n$ vi grav\n```\n\nThen simply paste in this configuration:\n\n```\nserver {\n    #listen 80;\n    index index.html index.php;\n\n    ## Begin - Server Info\n    root \/home\/grav\/www\/html;\n    server_name {{ page.header.localname }};\n    ## End - Server Info\n\n    ## Begin - Index\n    # for subfolders, simply adjust the rewrite:\n    # to use `\/subfolder\/index.php`\n    location \/ {\n        try_files $uri $uri\/ \/index.php?$query_string;\n    }\n    ## End - Index\n\n    ## Begin - PHP\n    location ~ \\.php$ {\n        # Choose either a socket or TCP\/IP address\n        fastcgi_pass unix:\/var\/run\/php5-fpm.grav.sock;\n        # fastcgi_pass 127.0.0.1:9000;\n\n        fastcgi_split_path_info ^(.+\\.php)(\/.+)$;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root\/$fastcgi_script_name;\n    }\n    ## End - PHP\n\n    ## Begin - Security\n    # deny all direct access for these folders\n    location ~* \/(.git|cache|bin|logs|backups)\/.*$ { return 403; }\n    # deny running scripts inside core system folders\n    location ~* \/(system|vendor)\/.*\\.(txt|xml|md|html|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny running scripts inside user folder\n    location ~* \/user\/.*\\.(txt|md|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny access to specific files in the root folder\n    location ~ \/(LICENSE|composer.lock|composer.json|nginx.conf|web.config|htaccess.txt|\\.htaccess) { return 403; }\n    ## End - Security\n}\n```\n\nThis is the stock `nginx.conf` file that comes with Grav with 2 changes. 1) the `root` has been adapted to our user\/folder we just created and the `fastcgi_pass` option has been set to the socket we defined in our `grav` pool. Now we just need to link this file appropriately so that it's **enabled**:\n\n```\n$ cd ..\/sites-enabled\n$ ln -s ..\/sites-available\/grav\n$ rm default\n```\n\nNow all we have to do is restart Nginx and the php5-fpm process and test to ensure we have configured Nginx and the PHP connection pool correctly:\n\n```\n$ service nginx restart\n$ service php5-fpm restart\n```\n\nNow point your browser at your server: `http:\/\/{{ page.header.localname }}` and you should see the text: **Working!**\n\nYou can also test to ensure that PHP is installed and working correctly by pointing your browser to: `http:\/\/{{ page.header.localname }}\/info.php`.  You should see a standard PHP info page with APCu, Opcache, etc listed.\n\n### Installing Grav\n\nThis is the easy part!  First we need to jump back over to the Grav user, so either SSH as `grav@{{ page.header.localname }}` or `su - grav` from the root login. then follow these steps:\n\n```\n$ cd ~\/www\n$ wget -O grav-latest.zip https:\/\/getgrav.org\/download\/core\/grav\/latest\n$ unzip grav-latest.zip\n$ rm -Rf html\n$ mv grav html\n```\n\nNow That's done you can confirm Grav is installed by poiting your browser to `http:\/\/{{ page.header.localname }}` and you should be greeted with the **Grav is Running!** page.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n```\n$ cd ~\/www\/html\n$ bin\/grav clear\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/compiled\/*\n\nTouched: \/home\/grav\/www\/html\/user\/config\/system.yaml\n```\n\nand GPM commands:\n\n```\n$ bin\/gpm index\n```"},{"title":"Generic VPS Installation","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/generic","taxonomy":{"categories":[],"tags":[]},"content":"### Update and Upgrade Packages\n\nAt this point, you might want to either setup a local `\/etc\/hosts` entry to give the IP provided a nice friendly name such as `{{ page.header.localname }}`.  That way you can more easily SSH to your server with `ssh root@{{ page.header.localname }}`.\n\nAfter successfully SSH'ing to your server as **root**, the first thing you will want to do is update and upgrade all the installed packages.  This will ensure you are running the _latest-and-greatest_:\n\n```\n$ apt-get update\n$ apt-get upgrade\n```\n\nJust answer `Y` if prompted.\n\nNext you will want to install some essential packages:\n\n```\n$ apt-get install vim zip unzip nginx git php5-fpm php5-cli php5-gd php5-curl php5-apcu\n```\n\nThis will install the complete VIM editor (rather than the mini version that ships with Ubuntu), Nginx web server, GIT commands, and **PHP 5.5**.\n\n!! If you would prefer to use **PHP 5.6**, you probably should start over and provision your server with **Ubuntu 15.10** which is the more cutting edge version of Ubuntu.\n\n### Configure Nginx Connection Pool\n\nNginx has already been installed, but you should configure is so that it uses a user-specific PHP connection pool.  This will ensure you are secure and avoid any potential file permissions when working on the files as your user account, and via the web server.\n\nNavigate to the pool directory and create a new `grav` configuration:\n\n```\n$ cd \/etc\/php5\/fpm\/pool.d\n$ vi grav.conf\n```\n\nIn Vi, you can paste the following pool configuration:\n\n```\n[grav]\n\nuser = grav\ngroup = grav\n\nlisten = \/var\/run\/php5-fpm.grav.sock\n\nlisten.owner = www-data\nlisten.group = www-data\n\npm = dynamic\npm.max_children = 5\npm.start_servers = 2\npm.min_spare_servers = 1\npm.max_spare_servers = 3\n\nchdir = \/\n```\n\nThe key things here are the `user` and `group` being set to a user called `grav`, and the listen socket having a unique name from the standard socket.  Save and exit this file.\n\nWe need to create the dedicated `grav` user now:\n\n```\n$ adduser grav\n```\n\nProvide a strong password, and leave the other values as default. We need to next create an appropriate location for Nginx to serve files from, so let's switch user and create those folder, and create a couple of test files:\n\n```\n$ su - grav\n$ mkdir www;cd www;mkdir html;cd html\n```\n\nCreate a simple `index.html` with the contents of `<h1>Working!<\/h1>` and a file called `info.php` with the contents of `<?php phpinfo();`\n\nNow we can exit out of this user and return to root in order to setup the Nginx server configuration:\n\n```\n$ exit\n$ cd \/etc\/nginx\/sites-available\/\n$ vi grav\n```\n\nThen simply paste in this configuration:\n\n```\nserver {\n    #listen 80;\n    index index.html index.php;\n\n    ## Begin - Server Info\n    root \/home\/USER\/www\/html;\n    server_name localhost;\n    ## End - Server Info\n\n    ## Begin - Index\n    # for subfolders, simply adjust:\n    # `location \/subfolder {`\n    # and the rewrite to use `\/subfolder\/index.php`\n    location \/ {\n        try_files $uri $uri\/ \/index.php?$query_string;\n    }\n    ## End - Index\n\n    ## Begin - Security\n    # deny all direct access for these folders\n    location ~* \/(\\.git|cache|bin|logs|backup|tests)\/.*$ { return 403; }\n    # deny running scripts inside core system folders\n    location ~* \/(system|vendor)\/.*\\.(txt|xml|md|html|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny running scripts inside user folder\n    location ~* \/user\/.*\\.(txt|md|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }\n    # deny access to specific files in the root folder\n    location ~ \/(LICENSE\\.txt|composer\\.lock|composer\\.json|nginx\\.conf|web\\.config|htaccess\\.txt|\\.htaccess) { return 403; }\n    ## End - Security\n\n    ## Begin - PHP\n    location ~ \\.php$ {\n        # Choose either a socket or TCP\/IP address\n        fastcgi_pass unix:\/var\/run\/php\/php7.2-fpm.sock;\n        # fastcgi_pass unix:\/var\/run\/php5-fpm.sock; #legacy\n        # fastcgi_pass 127.0.0.1:9000;\n\n        fastcgi_split_path_info ^(.+\\.php)(\/.+)$;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root\/$fastcgi_script_name;\n    }\n    ## End - PHP\n}\n```\n\nThis is the stock `nginx.conf` file that comes with Grav with 2 changes. 1) the `root` has been adapted to our user\/folder we just created and the `fastcgi_pass` option has been set to the socket we defined in our `grav` pool. Now we just need to link this file appropriately so that it's **enabled**:\n\n```\n$ cd ..\/sites-enabled\n$ ln -s ..\/sites-available\/grav\n$ rm default\n```\n\nNow all we have to do is restart Nginx and the php5-fpm process and test to ensure we have configured Nginx and the PHP connection pool correctly:\n\n```\n$ service nginx restart\n$ service php5-fpm restart\n```\n\nNow point your browser at your server: `http:\/\/{{ page.header.localname }}` and you should see the text: **Working!**\n\nYou can also test to ensure that PHP is installed and working correctly by pointing your browser to: `http:\/\/{{ page.header.localname }}\/info.php`.  You should see a standard PHP info page with APCu, Opcache, etc listed.\n\n### Installing Grav\n\nThis is the easy part!  First we need to jump back over to the Grav user, so either SSH as `grav@{{ page.header.localname }}` or `su - grav` from the root login. then follow these steps:\n\n```\n$ cd ~\/www\n$ wget https:\/\/getgrav.org\/download\/core\/grav\/latest\n$ unzip grav-v{{ grav_version }}.zip\n$ rm -Rf html\n$ mv grav html\n```\n\nNow That's done you can confirm Grav is installed by poiting your browser to `http:\/\/{{ page.header.localname }}` and you should be greeted with the **Grav is Running!** page.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/..\/advanced\/grav-gpm) commands such as:\n\n```\n$ cd ~\/www\/html\n$ bin\/grav clear\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/compiled\/*\n\nTouched: \/home\/grav\/www\/html\/user\/config\/system.yaml\n```\n\nand GPM commands:\n\n```\n$ bin\/gpm index\n```\n"},{"title":"Vultr","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/vultr","taxonomy":{"categories":["docs"],"tags":[]},"media":["deploy.png","manage-server.png","os-and-server.png","vultr.png"],"content":"[Vultr](https:\/\/www.vultr.com) is another entry in the **SSD-Powered VPS** market and offers similar features and functionality as the other VPS providers, but for slightly less money. You get **100% SSD Storage**, **Ultra fast Intel CPUs** and **14 low latency locations**.\n\n![](vultr.png) {.center}\n\nAfter creating an account and navigating to the **Vultr Control Manager**, click on the **Deploy** tab.  Leave the server type on **Compute Instances** and choose a location:\n\n![](deploy.png) {.center}\n\nNext select the **Operating System** from the list available.  We have selected **Ubuntu 18.04 LTS** to be consistent with the other guides and because it's the latests, very popular, reliable, and well supported distribution.\n\nFor the **Server Size** you can pick a size that is appropriate for you but Grav will run great on any of them.  For the sake of this guide, we'll use the 1 CPU, 1GB memory option that is currently priced at $8\/month.\n\n![](os-and-server.png) {.center}\n\nYou can choose any optional features you would like, and then provide a simple **Server Label** to identify the VPS instance.  We'll use `Grav`.  Then click **Place Order** to create and install the server.\n\n![](manage-server.png) {.center}\n\nAfter a minute or so, your server should be ready and you can click the **manage** link next to your server in the list to get the server details.  On this page you will be shown a control panel for the server that lets you control the state, along with the initial root username and password.  You can can SSH via the command provided in this tab using the password you entered when you created the distribution instance. Public key authentication is recommended, and Vultur has [SSH public key authentication documentation](https:\/\/www.vultr.com\/docs\/using-your-ssh-key-to-login-to-non-root-users) that walks you through the steps required.\n\n---\n\n[plugin:content-inject](\/webservers-hosting\/vps\/ubuntu-18.04)\n\n\n\n"},{"title":"RoseHosting","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/rosehosting","taxonomy":{"categories":["docs"],"tags":[]},"media":["rosehosting-home.png","rosehosting-plans.png"],"content":"Back in 2001, [RoseHosting](https:\/\/www.rosehosting.com) was the first and only company in the world to offer commercial Linux virtual servers.  Now they offer a wide range of Linux hosting packages, including **Linux VPS** powered by enterprise **SSD Storage**. All their hosting plans are **fully managed** and include **free 24\/7 support**, so they can install and set up Grav for you for free.\n\n![](rosehosting-home.png) {.center}\n\nNavigate to their [Linux VPS Hosting](https:\/\/www.rosehosting.com\/linux-vps-hosting.html) page and **choose a VPS hosting plan** that suits you the most. You can even create a custom VPS based on your needs. For this guide, we'll be using the smallest plan, 'SSD 1 VPS'.\n\n![](rosehosting-plans.png) {.center}\n\nAfter you enter your existing domain name's information or order a new one, you'll be taken to the **Product Configuration** page where you can choose your billing cycle and the OS you want to use. For this guide we'll be using **Ubuntu 18.04 LTS**. You can get an additional DNS service for free and order addons like WHM\/cPanel and Softaculous. Their support team can install Webmin or any other application on your VPS for free. Confirm the order information and billing information and submit it.\n\nYour order will be processed and confirmed, after which you will receive an e-mail with information about your VPS. You will get an SSH login and password with **full root access**.\n\n---\n\n[plugin:content-inject](\/webservers-hosting\/vps\/ubuntu-18.04)\n\n\n\n"},{"title":"Linode","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/linode","taxonomy":{"categories":["docs"],"tags":[]},"media":["add-linode.png","booted.png","deploy-image.png","linode.png","pick-distro.png"],"content":"[Linode](https:\/\/www.linode.com\/?r=300c424631b602daaa0ecef22912c1c26c81e3af) has been in the VPS game for quite some time and focus on providing **lightning-quick SSD equipped Linux servers** for developers.  There is a quick and easy process to getting a server up and running that involves: picking a **pricing plan**, picking a **Linux distribution**, and then choosing a **node location** that is best suited to your needs.\n\n![](linode.png) {.center}\n\nAfter creating an account and navigating to the **Linode Manager**, you first need to add a Linode. For this test, we will pick the smallest and cheapest option at $10\/month for 1 CPU core and 24GB of SSD Disk space. There are plenty of scaling options here all the way up to 20 CPU cores and 2GB of disk space! Also remember to choose an appropriate location from the drop-down:\n\n![](add-linode.png) {.center}\n\nAfter the Linode has been created you will need to click the **Dashboard** link from the options column. This will take you to the page where you can now choose your distribution. From the Dashboard, choose **Deploy an Image**.\n\n![](deploy-image.png) {.center}\n\nFor the sake of compatibility and ease of use, I like to choose a stable distribution of Ubuntu.  So **Ubuntu 18.04 LTS** it is! Leave the rest as defaults and provide a **strong password**, then click deploy:\n\n![](pick-distro.png) {.center}\n\nThe creation of your server should take about 30 seconds, and after that you can click the **Boot** button to get it up and running:\n\n![](booted.png) {.center}\n\nYou can click on the **Remote Access** tab in the Linode Manager to get relevant information about how to remotely connect to the VPS instance you have just setup.  You can can SSH via the command provided in this tab using the password you entered when you created the distribution instance. Public key authentication is recommended, and Linode has good [SSH public key authentication documentation](https:\/\/www.linode.com\/docs\/security\/use-public-key-authentication-with-ssh?r=300c424631b602daaa0ecef22912c1c26c81e3af) that walks you through the steps required.\n\n---\n\n[plugin:content-inject](\/webservers-hosting\/vps\/ubuntu-18.04)\n\n\n\n"},{"title":"DigitalOcean","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps\/digitalocean","taxonomy":{"categories":["docs"],"tags":[]},"media":["digitalocean.png","droplet.png","step-1.png","step-2.png","step-3.png"],"content":"Perhaps the most popular and most widely used of all the VPS providers out there, [DigitalOcean](https:\/\/www.digitalocean.com\/) provides a range of VPS options.  Starting at **$5\/mo for a 1 CPU, 1024MB system** up to $960\/mo for a 32 CPU, 192GB setup, [DigitalOcean](https:\/\/www.digitalocean.com\/) has solutions that can scale with you.  All their servers are built with **RAID SSD drives**, **modern hexa-core hardware**, **KVM Virtualization**, and reliable **Tier-1 bandwidth** to ensure maximum performance.  They are a fantastic option for hosting your Grav-based site.\n\n![](digitalocean.png) {.shadow}\n\nAfter creating an account and depositing some credit into it, you can get started.  DigitalOcean let's you create **Droplets** that represent a VPS instance.  You simple click the **Create Droplet** button in your Control Panel, and fill in the form:\n\n![](step-1.png) {.shadow}\n\nSimply pick a name for your Droplet, and **choose a size** based on price and server needs.  Grav will run fine on any configuration even the base $5\/mo option will run Grav quickly and efficiently.\n\n![](step-2.png) {.shadow}\n\nNext, **select a Region** where your VPS will be located.  It's best to pick a region that is going to serve your target audience the best.  If the server is for development purposes only, pick one that is located closest to you.\n\n![](step-3.png) {.shadow}\n\nLastly you will need to select an Image to install.  DigitalOcean lets you choose from a wide variety of stock Linux distributions, as well as complete Applications and even prior saved snapshots.  For the purpose of this guide, we'll install the latest **Ubuntu 18.04 LTS** which is very popular and very well supported.\n\nYou can leave all the other options at their defaults.  After clicking **Create Droplet** your Droplet will be created within 55 seconds, and you will see it listed in your list of Droplets.  You should receive an email with your root password. Clicking on the Droplet you just created you will see various options.\n\n![](droplet.png) {.shadow}\n\nThe **Access** tab in the Droplet Manager allows you to quickly log on to your instance, but using SSH is a more enjoyable experience. Public key authentication is also recommended, and DigitalOcean has great [SSH public key authentication documentation](https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-use-ssh-keys-with-digitalocean-droplets) that walks you through the steps required.\n\n---\n\n[plugin:content-inject](\/webservers-hosting\/vps\/ubuntu-18.04)\n"},{"title":"Vps","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/vps","taxonomy":{"categories":[],"tags":[]}},{"title":"SiteGround","date":"2019-07-15T12:47:47+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/shared\/siteground","taxonomy":{"categories":["docs","docs2"],"tags":["cat","dog"]},"media":["phpinfo-1.png","phpinfo-2.png","siteground.png","ssh-public-key.png"],"content":"[SiteGround](http:\/\/www.siteground.com\/)'s tag line is **Web Hosting Crafted With Care**, and it is for this reason it has proven a popular hosting solution for people in the Joomla and WordPress communities. It also makes a good option for hosting a Grav-based web site.\n\n![](siteground.png)\n\nIn this guide we will cover the essentials for configuring a pretty bog-standard SiteGround shared hosting account to work optimally with Grav.\n\n## Picking your Hosting Plan\n\nAt the time of writing, SiteGround offers [three shared hosting options](http:\/\/www.siteground.com\/web-hosting.htm) ranging from low-end $3.95\/month to $14.95\/month for what they call the **GoGeek** plan. We strongly suggest going with the higher-end but still very cheap **GoGeek** plan. This provides better server hardware and less _user crowding_ on the server.\n\n## Configuring\n\nSiteGround provides a very full-featured **cPanel** control panel. This is directly accessible via the **My Accounts** tab.\n\n## Enabling SSH\n\nFirst, you will have to open the **SSH\/Shell Access** option in the **ADVANCED** section of cPanel.\n\nSiteGround provides a very thorough [tutorial for using SSH](http:\/\/www.siteground.com\/tutorials\/ssh\/), however it's simpler to create your public\/private key pair locally on your computer, and then just upload the DSA Public Key.\n\n!! Windows users will first need to install [Cygwin](https:\/\/www.cygwin.com\/) to provide many useful GNU and open source tools that are available on Mac and Linux platforms. When prompted to choose packages, ensure you check the SSH option. After installation, launch the `Cygwin Terminal`.\n\nFire up a terminal window and type:\n\n[prism classes=\"language-bash command-line\"]\n\\$ ssh-keygen -t dsa\n[\/prism]\n\nThis key generation script will prompt you to fill in some values, or you can just hit `[return]` to accept the default values. This will create an `id_dsa` (private key), and an `id_dsa.pub` (public key) in a folder called `.ssh\/` in your home directory. It is important to ensure you **NEVER** give out your private key, nor upload it anywhere, **only your public key**.\n\nOnce generate you can paste the contents of your `id_dsa.pub` public key into the `Public Key` field in the **Upload SSH key** section of the **SSH\/Shell Access** page:\n\n![](ssh-public-key.png)\n\nAfter uploading, you should see the key listed at the bottom of this page. This means you are ready to test SSH'ing to your server.\n\n[prism classes=\"language-bash command-line\"]\n\\$ ssh siteground_username@siteground_servername -p18765\n[\/prism]\n\nObviously, you will need to put in your SiteGround-provided username for `siteground_username`, and the SiteGround-provided servername for `siteground_servername`. The `-p18765` is important as this is the non-standard port that SiteGround runs SSH on.\n\n## Enabling PHP OPcache\n\n!!! Update [2016-03]: Siteground Support advised that OPCache is available from PHP7 and not 5.5. This then had OPCache enabled by default, and so no further configuration was required in this stage of the setup, so some of the below instructions may no longer be required.\n\nBy default, SiteGround hosting comes with **support** for **Zend OPcache**, but it is **not enabled**. You must manually enable it by creating a `php.ini` file in your `public_html\/` folder with the contents:\n\n[prism classes=\"language-text\"]\nzend_extension=opcache.so\n[\/prism]\n\nTo test you have the correct version of PHP and the Zend OPcache running, you can create a temporary file: `public_html\/info.php` and put this in the contents:\n\n[prism classes=\"language-php\"]\n\n<?php phpinfo();\n[\/prism]\n\nSave the file and point your browser to this info.php file on your site and you should be greeted with a PHP information reflecting the version you selected earlier:\n\n![](phpinfo-1.png)\n\nYou should also be able to scroll down and see a section called **Zend OPcache**:\n\n![](phpinfo-2.png)\n\n## Install and Test Grav\n\nUsing your new found SSH capabilities, let's SSH to your SiteGround server (if you are not already there) and download the latest version of Grav, unzip it and test it out!\n\nWe will extract Grav into a `\/grav` subfolder, but you could unzip directly into the root of your `~\/public_html\/` folder to ensure Grav is accessible directly.\n\n[prism classes=\"language-bash command-line\"]\n$ cd ~\/public_html\n[~\/public_html]$ curl -L -O https:\/\/github.com\/getgrav\/grav\/releases\/download\/{{ grav_version }}\/grav-v{{ grav_version}}.zip\n[~\/public_html]$ unzip grav-v{{ grav_version}}.zip\n[\/prism]\n\nYou should now be able to point your browser to `http:\/\/mysiteground.com\/grav` using the appropriate URL of course.\n\n!!! Update [2016-03]: The path to the CLI for PHP 7 on Siteground shared hosting at this time appears to be: `\/usr\/local\/php70\/bin\/php-cli`, and so for command line use of gpm\/grav you could make an alias and then reference the php-cli directly via terminal, e.g. `alias php-cli=\"\/usr\/local\/php70\/bin\/php-cli\"`. Then you can use it as: `$php-cli bin\/grav list`\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n[prism classes=\"language-bash command-line\" cl-output=\"3-13\"]\n$ cd ~\/public_html\/grav\n$ bin\/grav clear-cache\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/doctrine\/*\nCleared:  cache\/compiled\/*\nCleared:  cache\/validated-*\nCleared:  images\/*\nCleared:  assets\/*\n\nTouched: \/home\/your_user\/public_html\/grav\/user\/config\/system.yaml\n[\/prism]\n\nIn order to use the Grav package manager (gpm) you'll have to set it as an executable by running this command in your Grav folder\n\n[prism classes=\"language-bash command-line\"]\n$ chmod +x bin\/gpm\n[\/prism]\n"},{"title":"Dreamhost","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/shared\/dreamhost","taxonomy":{"categories":["docs"],"tags":[]},"media":["dreamhost.png","install-plugin.png","php-version.png"],"content":"[Dreamhost](http:\/\/dreamhost.com) is a famous hosting provider that offers various levels of service ranging from SSD-powered shared hosting to dedicated servers.\n\n![](dreamhost.png)\n\nLet\u2019s focus on the lower end offer, shared hosting. It comes with a great admin panel, not the usual cPanel but a custom panel you can use to configure anything ranging from managing SSH users to choose the PHP version you run.\n\n## Configuring PHP\n\nYou can set every (sub)domain to have its own PHP version. At the time of writing, the default PHP version for new sites is 5.4. You can choose to use a later version (5.6 available), and we recommend doing so as PHP 5.5.9+ is required for Grav.\n\n![](php-version.png)\n\n## Enabling SSH\n\nOpen the Users panel. Every Dreamhost user can have different access levels. Set your user to Shell User.\n\nAt the time of writing the default PHP CLI version is 5.5, so you don\u2019t need to do anything to make the Grav CLI tools work properly.\n\n## Install and Test Grav\n\nWhen you add a new domain, Dreamhost creates a folder for it under your account folder.\n\nAccess the server using SSH and go into that folder, then download Grav into it:\n\n[prism classes=\"language-bash command-line\"]\nwget https:\/\/github.com\/getgrav\/grav\/releases\/download\/{{ grav_version }}\/grav-v{{ grav_version}}.zip\n[\/prism]\n\n(Please check on [](https:\/\/github.com\/getgrav\/grav\/releases\/) the latest version available)\n\nUnzip with `unzip grav-v{{ grav_version }}.zip`. This will create a `grav` folder, so we need to move the files up to the current folder.\nJust type:\n\n[prism classes=\"language-bash command-line\"]\nmv grav\/* grav\/.htaccess .\/; rmdir grav\n[\/prism]\n\nYou can now also delete the zip file:\n\n[prism classes=\"language-bash command-line\"]\nrm grav-v{{ grav_version }}.zip\n[\/prism]\n\nGrav has now been successfully installed. Try accessing the site from the browser, you should see a Grav welcome message.\n\nYou can now install plugins and themes, for example type this to install the Grav Admin plugin:\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm install admin\n[\/prism]\n\n![](install-plugin.png)\n\n## Enable OPCache\n\nOPCache is supported but not enabled by default. You need to manually activate it by creating a phprc file under your user folder, under `.php\/5.6\/phprc` (change the number according to your PHP version). In this file, put the following code:\n\n[prism classes=\"language-text\"]\nzend_extension=opcache.so\n[\/prism]\n\nYou can further customize OPCache in that file according to your needs.\n"},{"title":"Arvixe","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/shared\/arvixe","taxonomy":{"categories":["docs"],"tags":[]},"media":["arvixe.png","authorized-keys.png","php-selector.png","phpinfo.png","ssh-public-key.png"],"content":"[Arvixe](http:\/\/www.arvixe.com) is an award winning hosting company that prides themselves on providing quality web hosting that is **affordable** and unmatched in **reliability**.  With great features, and a **developer-friendly** stance, Arvixe shared hosting is a great option for a Grav-based site.\n\n![](arvixe.png)\n\nIn this guide: We will cover the essentials for configuring a pretty bog-standard Arvixe shared hosting account to work optimally with Grav.\n\n## Picking your Hosting Plan\n\nAt the time of writing, Arvixe offers [two Linux-based shared hosting options](http:\/\/www.arvixe.com\/linux_web_hosting) that cost $4.00\/month for the **PersonalClass**, and $7.00 for the **PersonalClass Pro** plan. Both plans are almost identical, but the Pro plan offers unlimited concurrent domains. Either one will work well with Grav.\n\n## Configuring PHP\n\nArvixe provides a very full featured **cPanel** control panel. The URL for this is provided with your welcome email.\n\nBecause Arvixe's default PHP version is **5.3**, The first thing to do is to change the default version of PHP your site runs with.\n\nOn the main cPanel Home page, there is a section called **Software\/Services**.  Here you will find the **ntPHPSelector**. When you click this, you will be confronted with a folder tree where you can set a specific folder, or set the version site-wide by clicking `public_html`. When you choose a folder, you can select the version of PHP, just select **5.5**, and click submit.\n\n![](php-selector.png)\n\nClick **Save** for this to take effect.\n\nYou should be able to reach your site via your website URL with `phpinfo.php` appended to the end.  For example: `http:\/\/myarvixe.com\/phpinfo.php`\n\n![](phpinfo.png)\n\nYou can ensure you are running the correct version of PHP.\n\n!! Arvixe's PHP 5.5 already includes Zend OPcache enabled, so there is no extra step required to getting this setup.\n\n## Enabling SSH\n\nFirst, you will have to open the **SSH\/Shell Access** option in the **Security** section of cPanel. On this SSH Access page, you should click the **Manage SSH Keys** button.\n\nThere are two options at this point.  **Generate a New Key**, or **Import Key**. It's simpler to create your public\/private key pair locally on your computer and then just import the DSA Public Key.\n\n!! Windows users will first need to install [Cygwin](https:\/\/www.cygwin.com\/) to provide many useful GNU and open source tools that are available on Mac and Linux platforms. When prompted to choose packages, ensure you check the SSH option. After installation, launch the `Cygwin Terminal`\n\nFire up a terminal window and type:\n\n[prism classes=\"language-bash command-line\"]\n$ ssh-keygen -t dsa\n[\/prism]\n\nThis key generation script will prompt you to fill in some values, or you can just hit `[return]` to accept the default values.  This will create an `id_dsa` (private key), and an `id_dsa.pub` (public key) in a folder called `.ssh\/` in your home directory. It is important to ensure you **NEVER** give out your private key, nor upload it anywhere, **only your public key**.\n\nOnce generate you can paste the contents of your `id_dsa.pub` public key into the `Public Key` field in the **Import SSH key** section of the **SSH Access** page:\n\n![](ssh-public-key.png)\n\nAfter uploading, you should see the key listed at the **Public Keys** section of the Manage SSH Keys page.  You then need to clikc **Manage** to ensure the key is authorized:\n\n![](authorized-keys.png)\n\nThis means you are ready to test ssh'ing to your server.\n\n[prism classes=\"language-bash command-line\"]\n$ ssh arvixe_username@arvixe_servername\n[\/prism]\n\nObviously, you will need to put in your Arvixe-provided username for `arvixe_username`, and the Arvixe-provided servername for `arvixe_servername`.\n\n## Setup CLI PHP\n\nAt the time of this writing, Arvixe's default PHP version is **5.3**.  Because Grav requires PHP **5.5+**, we need to ensure that Grav is using a newer version of PHP on the command line (CLI).  To accomplish this, you should use SSH to access your server and edit your `.bash_profile` file and change the path so that it references the appropriate PHP path before the regular path:\n\n[prism classes=\"language-bash\"]\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~\/.bashrc ]; then\n        . ~\/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=\/opt\/ntphp\/php55\/bin:$PATH:$HOME\/bin\n\nexport PATH\n[\/prism]\n\nYou will need _source_ the profile: `$ source ~\/.bash_profile` or re-login to your terminal for you path change to take effect, but after doing so you should be able to type `php -v` and see:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-5\"]\n$ php -v\nPHP 5.5.18 (cli) (built: Nov 19 2014 14:29:20)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\n    with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies\n[\/prism]\n\n## Install and Test Grav\n\nUsing your new found SSH capabilities, let's SSH to your Arvixe server (if you are not already there) and download the latest version of Grav, unzip it and test it out!\n\nWe will extract Grav into a `\/grav` subfolder, but you could unzip directly into the root of your `~\/public_html\/` folder to ensure Grav is accessible directly.\n\n[prism classes=\"language-bash command-line\"]\n$ cd ~\/public_html\n[~\/public_html]$ curl -L -O https:\/\/github.com\/getgrav\/grav\/releases\/download\/{{ grav_version }}\/grav-v{{ grav_version}}.zip\n[~\/public_html]$ unzip grav-v{{ grav_version}}.zip\n [\/prism]\n\nYou should now be able to point your browser to `http:\/\/myarvixe.com\/grav` using the appropriate URL of course.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-15\"]\n$ cd ~\/public_html\/grav\n$ bin\/grav clear-cache\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/doctrine\/*\nCleared:  cache\/compiled\/*\nCleared:  cache\/validated-*\nCleared:  images\/*\nCleared:  assets\/*\n\nTouched: \/home\/your_user\/public_html\/grav\/user\/config\/system.yaml\n[\/prism]\n"},{"title":"Crucial Web Hosting","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/shared\/crucial","taxonomy":{"categories":["docs"],"tags":[]},"media":["authorized-keys.png","crucial.png","manage-ssh-keys.png","php-info.png","ssh-public-key.png"],"content":"[Crucial Web Hosting](http:\/\/www.crucialwebhost.com\/promo\/1421086\/) is another of the new bread of modern web hosting platforms that focuses on both speed and support.  The use of **SSD drives** and **Litespeed** web servers with the latest **Intel XEON processors** ensures that Grav performs fantastically. Crucial also now provides PHP all the way up to the latest PHP 7.0 releases.\n\n![](crucial.png)\n\nIn this guide, we will cover the essentials for configuring the **Tier-1 Split-Shared** hosting package to work optimally with Grav.\n\n## Picking your Hosting Plan\n\n[Crucial Web Hosting](http:\/\/www.crucialwebhost.com\/promo\/1421086\/) has two primary options when it comes to hosting: **Spit-Shared** and **Split-Dedicated** hosting.  According to Crucial, these cloud-based options are superior to traditional hosting setups as they provide better isolation and performance.\n\nSplit-Shared hosting ranges from $10\/month to $100\/month depending on memory and SSD space.  Split Dedicated ranges from $150\/month to $650\/month depending on number of cores, memory, SSD space and bandwidth.  We'll just be using the baseline $10\/moth option that comes with 256MB of memory and 10GB of SSD space.\n\n## Enabling SSH\n\nFirst, you will have to open the **Toggle SSH Access** option in the **Security** section of cPanel. On this SSH Access page, you should click the **Enable SSH Access** button.\n\nThen from the **Security Section** again, click the **Manage SSH Keys** option.\n\n![](manage-ssh-keys.png)\n\nThere are two options at this point.  **Generate a New Key**, or **Import Key**. It's simpler to create your public\/private key pair locally on your computer and then just import the DSA Public Key.\n\n!! Windows users will first need to install [Cygwin](https:\/\/www.cygwin.com\/) to provide many useful GNU and open source tools that are available on Mac and Linux platforms. When prompted to choose packages, ensure you check the SSH option. After installation, launch the `Cygwin Terminal`\n\nFire up a terminal window and type:\n\n[prism classes=\"language-bash command-line\"]\nssh-keygen -t dsa\n[\/prism]\n\nThis key generation script will prompt you to fill in some values, or you can just hit `[return]` to accept the default values.  This will create an `id_dsa` (private key), and an `id_dsa.pub` (public key) in a folder called `.ssh\/` in your home directory. It is important to ensure you **NEVER** give out your private key, nor upload it anywhere, **only your public key**.\n\nOnce generate you can paste the contents of your `id_dsa.pub` public key into the `Public Key` field in the **Import SSH key** section of the **SSH Access** page:\n\n![](ssh-public-key.png)\n\nAfter uploading, you should see the key listed at the **Public Keys** section of the Manage SSH Keys page.  You then need to click **Manage** to ensure the key is authorized:\n\n![](authorized-keys.png)\n\nThis means you are ready to test ssh'ing to your server.\n\n[prism classes=\"language-bash command-line\"]\nssh crucial_username@crucial_servername\n[\/prism]\n\nObviously, you will need to put in your Crucial-provided username for `crucial_username`, and the crucial-provided servername for `crucial_servername`.\n\n## Configuring PHP\n\nCurrently Crucial Web Hosting defaults to **PHP 5.3**, which is not up to the minimum requirements for Grav. Luckily Crucial supports PHP all the way up to the latest **PHP 7.0** so we change the PHP version to something more current.\n\nTo do this, we have to add a special handler call in the `.htaccess` file in the web root.  So create the `~\/www\/.htaccess` file and put the following:\n\n[prism classes=\"language-bash command-line\"]\nAddHandler application\/x-httpd-php70 .php\n[\/prism]\n\nSave the file. To test that you have the **correct version of PHP**, you can create a temporary file: `~\/www\/info.php` and put this in the contents:\n\n[prism classes=\"language-php\"]\n<?php phpinfo();\n[\/prism]\n\nSave the file and point your browser to this info.php file on your site, and you should be greeted with PHP information reflecting the version you selected earlier:\n\n![](php-info.png)\n\n\n!! If you are installing Grav at the root of your hosting account, you will need to add the **AddHandler** method to the top of the `.htaccess` file that is provided with Grav\n\n!!! You can choose another version of php to run Grav under using such as PHP 5.6 with `x-httpd-php56` for example\n\n## Setup CLI PHP\n\nAt the time of this writing, Crucial's default PHP version is **5.3**.  Because Grav requires PHP **5.5+**, we need to ensure that Grav is using a newer version of PHP on the command line (CLI).  To accomplish this, you should use SSH to access your server and create a new symbolic link to a newer PHP version in your user's `bin\/` folder:\n\n[prism classes=\"language-bash command-line\"]\nln -s \/usr\/local\/bin\/php-70 ~\/bin\/php\n[\/prism]\n\nNext, edit your `.bash_profile` file and add move the `$HOME\/bin` reference in front of the regular `$PATH` string:\n\n[prism classes=\"language-text line-numbers\"]\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~\/.bashrc ]; then\n        . ~\/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$HOME\/bin:$PATH\n\nexport PATH\n[\/prism]\n\nYou will need _source_ the profile: `$ source ~\/.bash_profile` or re-login to your terminal for you path change to take effect, but after doing so you should be able to type `php -v` and see:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-5\"]\nphp -v\nPHP 7.0.1 (cli) (built: Dec 28 2015 17:55:36) ( NTS )\nCopyright (c) 1997-2015 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies\n[\/prism]\n\n## Install and Test Grav\n\nUsing your new found SSH capabilities, let's SSH to your Crucial server (if you are not already there) and download the latest version of Grav, unzip it and test it out!\n\nWe will extract Grav into a `\/grav` subfolder, but you could unzip directly into the root of your `~\/www\/` folder to ensure Grav is accessible directly.\n\n[prism classes=\"language-bash command-line\"]\ncd ~\/www\nwget --no-check-certificate https:\/\/getgrav.org\/download\/core\/grav\/latest\nunzip grav-v{{ grav_version }}.zip\n[\/prism]\n\nYou should now be able to point your browser to `http:\/\/mycrucialserver.com\/grav` using the appropriate URL of course.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n[prism classes=\"language-bash command-line\" cl-output=\"3-13\"]\ncd ~\/public_html\/grav\nbin\/grav clear-cache\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/doctrine\/*\nCleared:  cache\/compiled\/*\nCleared:  cache\/validated-*\nCleared:  images\/*\nCleared:  assets\/*\n\nTouched: \/home\/your_user\/public_html\/grav\/user\/config\/system.yaml\n[\/prism]\n"},{"title":"WireNine","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/shared\/wirenine","taxonomy":{"categories":["docs"],"tags":[]},"media":["authorized-keys.png","manage-ssh-keys.png","php-info1.png","php-info2.png","php-settings.png","soft_1.png","soft_2.png","soft_3.png","soft_4.png","ssh-public-key.png","wirenine.png"],"content":"[WireNine](https:\/\/my.wirenine.com\/aff.php?aff=023) is a fast, modern hosting provider that focuses on performance via their use of **100% SSD** storage, **Litespeed** web servers, the latest **Intel E5-based** processors with fast **DDR4 ram**. These features ensure their shared hosting offerings are a fantastic solution for Grav sites.\n\n![](wirenine.png)\n\nIn this guide, we will cover the essentials for configuring a middle of the road shared hosting account to work optimally with Grav.\n\n## Picking your Hosting Plan\n\n[WireNine](https:\/\/my.wirenine.com\/aff.php?aff=023) has three shared hosting plans that range from $9\/month for a basic plan, to $18\/month for their heavy traffic option.  Configuration for all of these plans are the same, but we recommend the middle **Plus** plan at $14\/month because it provides a good compromise with 1 CPU and 1GB of memory.\n\n## Enabling SSH\n\nFirst, you will have to open the **SSH Access** option in the **Security** section of cPanel. On this SSH Access page, you should click the **Manage SSH Keys** button.\n\n![](manage-ssh-keys.png)\n\nThere are two options at this point.  **Generate a New Key**, or **Import Key**. It's simpler to create your public\/private key pair locally on your computer and then just import the DSA Public Key.\n\n!! Windows users will first need to install [Cygwin](https:\/\/www.cygwin.com\/) to provide many useful GNU and open source tools that are available on Mac and Linux platforms. When prompted to choose packages, ensure you check the SSH option. After installation, launch the `Cygwin Terminal`\n\nFire up a terminal window and type:\n\n[prism classes=\"language-bash command-line\"]\nssh-keygen -t dsa\n[\/prism]\n\nThis key generation script will prompt you to fill in some values, or you can just hit `[return]` to accept the default values.  This will create an `id_dsa` (private key), and an `id_dsa.pub` (public key) in a folder called `.ssh\/` in your home directory. It is important to ensure you **NEVER** give out your private key, nor upload it anywhere, **only your public key**.\n\nOnce generate you can paste the contents of your `id_dsa.pub` public key into the `Public Key` field in the **Import SSH key** section of the **SSH Access** page:\n\n![](ssh-public-key.png)\n\nAfter uploading, you should see the key listed at the **Public Keys** section of the Manage SSH Keys page.  You then need to click **Manage** to ensure the key is authorized:\n\n![](authorized-keys.png)\n\n!! WireNine does not seem to enable **Shell Access** on their accounts by default.  You will need to open a support ticket, and request shell access to be enabled for your account.\n\nThis means you are ready to test ssh'ing to your server.\n\n[prism classes=\"language-bash command-line\"]\nssh wirenine_username@wirenine_servername -p2200\n[\/prism]\n\nObviously, you will need to put in your WireNine-provided username for `wirenine_username`, and the WireNine-provided servername for `wirenine_servername`.  The `-p2200` is important as this is the non-standard port that WireNine runs SSH on.\n\n## 403 Forbidden Errors\n\nIt seems in some WireNine setups the default permissions on user created files are incorrect and will cause **403 Forbidden** errors due to security flags being triggered.  The issue is that the default **umask is incorrect** and files are created with `775` for folders and `664` for files.  These files need to be `755` and `644` respectively to work correctly.\n\nThis should be setup automatically but is not currently.  However, the fix is easy.  Just edit your `.bash_profile` file and add this line to the bottom of it.\n\n[prism classes=\"language-text\"]\numask 022\n[\/prism]\n\nYou will need to re-login to your terminal to get this change picked up.\n\n## Configuring PHP & Caching\n\nWireNine uses PHP **5.4** by default, but you do have the option to use the newer **5.5**, **5.6**, or **7.0** versions. Grav requires at least PHP 5.5.9 to operate.\n\nWireNine provides a very full-featured **cPanel** control panel. This is directly accessible via the **My Accounts** tab.\n\nThe first thing to do is to change the default version of PHP your site runs with. So click the **Select PHP Version** link in the **Software** Section.\n\nYou will see a page that shows the current version of PHP.  Below is a dropdown that let's you pick alternative versions.  Choose **5.6** and click `Set as current` button.\n\n![](php-settings.png)\n\nYou will first need to enable `mbstring` and `zip` extension.\n\nWireNine is a rare bread in the world of hosting providers, in that they provide some sophisticated caching extensions for PHP.  To take advantage of these, enable the `apcu` caching extension, and also the Zend `opcache` extension.  Then, click `Save` at the bottom of these options.\n\nTo test that you have the **correct version of PHP**, **Zend OPcache**, and **APCu** running, you can create a temporary file: `public_html\/info.php` and put this in the contents:\n\n[prism classes=\"language-php line-numbers\"]\n<?php phpinfo();\n[\/prism]\n\nSave the file and point your browser to this info.php file on your site, and you should be greeted with PHP information reflecting the version you selected earlier:\n\n![](php-info1.png)\n\nYou should also be able to scroll down and see **Zend OPcache** listed in the **zend engine** block, and an **APCu** section below it:\n\n![](php-info2.png)\n\n## Install and Test Grav\n\nUsing your new found SSH capabilities, let's SSH to your WireNine server (if you are not already there) and download the latest version of Grav, unzip it and test it out!\n\nWe will extract Grav into a `\/grav` subfolder, but you could unzip directly into the root of your `~\/public_html\/` folder to ensure Grav is accessible directly.\n\n[prism classes=\"language-bash command-line\"]\ncd ~\/public_html\nwget https:\/\/getgrav.org\/download\/core\/grav\/latest\nunzip grav-v{{ grav_version }}.zip\n[\/prism]\n\nYou should now be able to point your browser to `http:\/\/mywirenineserver.com\/grav` using the appropriate URL of course.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n[prism classes=\"language-bash command-line\" cl-output=\"3-13\"]\ncd ~\/public_html\/grav\nbin\/grav clear-cache\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/doctrine\/*\nCleared:  cache\/compiled\/*\nCleared:  cache\/validated-*\nCleared:  images\/*\nCleared:  assets\/*\n\nTouched: \/home\/your_user\/public_html\/grav\/user\/config\/system.yaml\n[\/prism]\n\n## Alternate Install Method: Softaculous\n\n[ui-callout]\n[ui-callout-item title=\"Portal\/CMS\" position=\"67%, 20%, se\"]\nSelecting this category will take you to a page where you can find the Grav CMS.\n[\/ui-callout-item]\n![](soft_1.png)\n[\/ui-callout]\n\nAvailable in Cpanel, Softaculous is a quick-and-easy installation method for Grav. You will find it at the bottom of your Cpanel dashboard in the **Portals\/CMS** category. Once you have selected that category, you can scroll down and find the Grav entry.\n\n[ui-callout]\n[ui-callout-item title=\"Download\" position=\"67%, 85%, se\"]\nSelecting the download icon will take you to the product page for Grav.\n[\/ui-callout-item]\n![](soft_2.png)\n[\/ui-callout]\n\nAt this point, you can select the **Downlaod** icon to progress to the main product page for Grav. This page includes additional information, as well as the link where you can install Grav directly to your server.\n\n[ui-callout]\n[ui-callout-item title=\"Download\" position=\"28%, 5%, se\"]\nSelecting the download icon will take you to the installation page for Grav.\n[\/ui-callout-item]\n![](soft_3.png)\n[\/ui-callout]\n\nOnce there, you can select the blue **Install** button in the upper-left area of the page to begin the installation process. This will take you to a configuration page enabling you to set up your Grav install, including the directory you wish to install it to, and an Admin account so you can hit the ground running in the Grav Admin.\n\n![](soft_4.png)\n\nOnce you have configured this page as you would like, you're good to go!\n"},{"title":"Rochen Web Hosting","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/shared\/rochen","taxonomy":{"categories":["docs"],"tags":[]},"media":["authorized-keys.png","manage-ssh-keys.png","php-info1.png","php-info2.png","php-settings.png","rochen.png","ssh-public-key.png"],"content":"[Rochen Web Hosting](http:\/\/www.rochen.com\/?utm_source=RocketTheme&utm_medium=Showcase&utm_campaign=Promotions) is the long-time hosting partner for both **GetGrav.org** and **RocketTheme.com**.  Rochen now has a new premium shared hosting offering that uses **SSD drives**, **Litespeed** web servers with the latest **Intel XEON processors** ensures that Grav performs optimally.  They also offer the choice of US or UK-based servers, so you can pick the best option for your users.\n\n![](rochen.png)\n\n## Picking your Hosting Plan\n\n[Rochen Web Hosting](http:\/\/www.rochen.com\/?utm_source=RocketTheme&utm_medium=Showcase&utm_campaign=Promotions) has two options when it comes to hosting: **Shared** and **Burst** hosting.  Rochen recommends the Burst option for busier and more demanding sites.  For the sake of this guide, we'll use the basic Shared option.\n\nShared hosting ranges from $7.95\/month $13.95\/month depending on length of commitment.\n\n## Enabling SSH\n\nFirst, you will have to open the **Toggle SSH Access** option in the **Security** section of cPanel. On this SSH Access page, you should click the **Enable SSH Access** button.\n\nThen from the **Security Section** again, click the **Manage SSH Keys** option.\n\n![](manage-ssh-keys.png)\n\nThere are two options at this point.  **Generate a New Key**, or **Import Key**. It's simpler to create your public\/private key pair locally on your computer and then just import the DSA Public Key.\n\n!! Windows users will first need to install [Cygwin](https:\/\/www.cygwin.com\/) to provide many useful GNU and open source tools that are available on Mac and Linux platforms. When prompted to choose packages, ensure you check the SSH option. After installation, launch the `Cygwin Terminal`\n\nFire up a terminal window and type:\n\n[prism classes=\"language-bash command-line\"]\nssh-keygen -t dsa\n[\/prism]\n\nThis key generation script will prompt you to fill in some values, or you can just hit `[return]` to accept the default values.  This will create an `id_dsa` (private key), and an `id_dsa.pub` (public key) in a folder called `.ssh\/` in your home directory. It is important to ensure you **NEVER** give out your private key, nor upload it anywhere, **only your public key**.\n\nOnce generate you can paste the contents of your `id_dsa.pub` public key into the `Public Key` field in the **Import SSH key** section of the **SSH Access** page:\n\n![](ssh-public-key.png)\n\nAfter uploading, you should see the key listed at the **Public Keys** section of the Manage SSH Keys page.  You then need to click **Manage** to ensure the key is authorized:\n\n![](authorized-keys.png)\n\nTo **enable SSH** access for your account, simply navigate to the **Managed Services** section on the **my.rochen.com** portal, and click on your **Shared Hosting** account information.  Next to the **SSH** option, click the **Disabled** link, and confirm that you wish to enable SSH.\n\nThis means you are ready to test ssh'ing to your server.\n\n[prism classes=\"language-bash command-line\"]\nssh rochen_username@rochen_servername\n[\/prism]\n\nObviously, you will need to put in your Rochen-provided username for `rochen_username`, and the rochen-provided servername for `rochen_servername`.\n\n## Configuring PHP & Caching\n\nRochen uses PHP **5.4** by default, but you do have the option to use a newer **5.5** or **5.6** version which is required for Grav.\n\nThe first thing to do is to change the default version of PHP your site runs with. So click the **Select PHP Version** link in the **Software and Services** Section.\n\nYou will see a page that shows the current version of PHP.  Below is a dropdown that let's you pick alternative versions.  Choose **5.6** and click `Set as current` button.\n\n![](php-settings.png)\n\nRochen is a rare breed in the world of hosting providers, in that they provide some sophisticated caching extensions for PHP.  To take advantage of these, enable the `apcu` caching extension, and also the Zend `opcache` extension.  Then, click `Save` at the bottom of these options.\n\nOne optimization that you should make is to **disable** the `xdebug` extension which is enabled by default, but not needed in a production environment, in fact it only slows things down.\n\nTo test that you have the **correct version of PHP**, **Zend OPcache**, and **APCu** running, you can create a temporary file: `public_html\/info.php` and put this in the contents:\n\n[prism classes=\"language-php\"]\n<?php phpinfo();\n[\/prism]\n\nSave the file and point your browser to this info.php file on your site, and you should be greeted with PHP information reflecting the version you selected earlier:\n\n![](php-info1.png)\n\nYou should also be able to scroll down and see **Zend OPcache** listed in the **zend engine** block, and an **APCu** section below it:\n\n![](php-info2.png)\n\n## Install and Test Grav\n\nUsing your new found SSH capabilities, let's SSH to your Rochen server (if you are not already there) and download the latest version of Grav, unzip it and test it out!\n\nWe will extract Grav into a `\/grav` subfolder, but you could unzip directly into the root of your `~\/www\/` folder to ensure Grav is accessible directly.\n\n[prism classes=\"language-bash command-line\"]\ncd ~\/www\nwget https:\/\/getgrav.org\/download\/core\/grav\/latest\nunzip grav-v{{ grav_version }}.zip\n[\/prism]\n\nYou should now be able to point your browser to `http:\/\/myrochenserver.com\/grav` using the appropriate URL of course.\n\nBecause you have followed these instructions diligently, you will also be able to use the [Grav CLI](..\/..\/advanced\/grav-cli) and [Grav GPM](..\/..\/advanced\/grav-gpm) commands such as:\n\n[prism classes=\"language-bash command-line\" cl-output=\"3-13\"]\ncd ~\/public_html\/grav\nbin\/grav clear-cache\n\nClearing cache\n\nCleared:  cache\/twig\/*\nCleared:  cache\/doctrine\/*\nCleared:  cache\/compiled\/*\nCleared:  cache\/validated-*\nCleared:  images\/*\nCleared:  assets\/*\n\nTouched: \/home\/your_user\/public_html\/grav\/user\/config\/system.yaml\n[\/prism]\n"},{"title":"Shared","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting\/shared","taxonomy":{"categories":[],"tags":[]}},{"title":"Web Servers & Hosting","date":"2019-07-11T07:50:20+00:00","url":"http:\/\/localhost\/docs\/webservers-hosting","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 9\n\n# Web Servers & Hosting\n\nDiscover detailed guides to set up Grav on a variety of **Web Servers** and **Shared**, **VPS** & **PaaS** hosting providers.\n"},{"title":"Blogging Metadata","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/hints-tips\/blogging\/metadata","taxonomy":{"categories":["docs"],"tags":[]},"content":"When you use Grav as your blogging platform you will want to include metadata that helps to populate descriptions and images when people share your post on Social Media such as Facebook, Twitter, etc. \n\nYou would add this information into the [Header](\/content\/headers) section of your Grav page. \n\nWithin the documentation there is reference to the meta data that you need to add within the header section, under [Meta Page Headers](\/content\/headers#meta-page-headers).  However, if you have transitioned from a platform such as WordPress where you use a plugin for this you might not realise the importance of the Metadata. \n\nAt the start of each of your blog posts you will want to have the following: \n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Blog Post Title\npublish_date: Date the blog post will go live\ndate: Date the blog post was written\nmetadata:\n    'og:title': Blog Post Title\n    'og:type': article\n    'og:description': Description of what your blog post is covering.  This will be visible when people share your post on social media.\n    'og:url': The URL of the blog post\n    'og:site_name': The name of the overall site the blog post belongs to. \n    'og:locale': The language your blog post is written in\n    'og:image': The image you reference here will be visible when shared on social media. \n    'twitter:card' : The type of Twitter card that should be used. \n    'twitter:site' : Your Twitter handle\n    'twitter:title' : Blog Post Title\n    'twitter:description' : Description of what your blog post is covering.  This will be visible when people share your post on social media.\n    'twitter:image' : The image you reference here will be visible when shared on social media. \n    'twitter:creator': The twitter handle of the blog post author. \ntaxonomy:\n    category: [Blog post category]\n    tag: [Tag 1, Tag 2, Tag 3, Tag 4]\n    author: Author's name\n---\n[\/prism]\n\nRead more about [Twitter Cards](https:\/\/developer.twitter.com\/en\/docs\/tweets\/optimize-with-cards\/guides\/getting-started.html)\n\nRead more about [The Open Graph Protocol](http:\/\/ogp.me\/)\n"},{"title":"Blogging","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/hints-tips\/blogging","taxonomy":{"categories":[],"tags":[]}},{"title":"Hints and Tips","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/hints-tips","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 15\n\n# Hints and Tips\n\nDiscover hints and tips from Grav users. \n"},{"title":"Grav API","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/api","taxonomy":{"categories":[],"tags":[]}},{"title":"Server-side","date":"2019-06-29T11:59:02+00:00","url":"http:\/\/localhost\/docs\/security\/server-side","taxonomy":{"categories":["docs"],"tags":[]},"content":"Protecting your Grav-installation server-side consists of using sensible options for your server and PHP. This guide does not cover settings for the server you run Grav on, nor ideal conditions, but rather highlights some tips and best practices in securing Grav or links to resources which detail how to secure the server. **This is relevant for a production-server, not local development, and not recommended for novice users!**\n\n## Grav and default configuration\n\nFor Grav, you should always use an up-to-date directory-specific configuration relevant to your server. These are found in the [GitHub repository](https:\/\/github.com\/getgrav\/grav\/tree\/develop\/webserver-configs). Further, periodically update your installation of Grav as new security-patches are implemented in new versions - for details consult the [CHANGELOG](https:\/\/github.com\/getgrav\/grav\/blob\/develop\/CHANGELOG.md).\n\n## PHP configuration\n\nBefore meddling with PHP's configuration, be aware that most shared hosts that you rent hosting-space from will likely already have set up sensible, secure defaults. Also, in most cases they do not allow you to edit this yourself. Before disabling or changing any configuration, you should familiarize yourself with Grav's [requirements, including PHP-extensions](https:\/\/github.com\/getgrav\/grav\/blob\/develop\/composer.json) and how changes will affect them.\n\nGenerally, PHP's configuration is changed through `php.ini`. You can find the location of this file from the command-line with the `php --ini`-command, or if you do not have access to direct commands, create a file named `phpinfo.php` in your webservers public root folder that contains `<?php phpinfo(); ?>` and open it with your browser. The path will be listed under \"Loaded Configuration File\". Once located, delete the `phpinfo.php`-file.\n\nSome general recommendations:\n\n- **Always keep your PHP-version up to date**: Use a [supported version](http:\/\/php.net\/supported-versions.php) of PHP, preferably one that is in active, stable development. For instance, PHP 5.6 and PHP 7.0 will only have security-fixes implemented until December 2018, whilst PHP 7.1 remains in active development alongside PHP 7.2.\n- Consider disabling the display of errors and PHP-version publicly: [PHP.earth article](https:\/\/php.earth\/doc\/security\/intro#php-configuration).\n- Use a separate user with restricted permissions to execute PHP for Grav: [Permissions in Docs](https:\/\/learn.getgrav.org\/troubleshooting\/permissions).\n- Use Suhosin for [advanced protection of PHP](https:\/\/suhosin.org\/stories\/feature-list.html).\n\n## Webserver configuration\n\nCommon webserver, or HTTP server software includes Nginx and Apache, as well as more modern alternatives such as LiteSpeed or CaddyServer. The aforementioned [webserver configurations](https:\/\/github.com\/getgrav\/grav\/tree\/develop\/webserver-configs) include necessary defaults for Grav, but you can further secure the webserver through its configuration. Some relevant resources:\n\n- [How To Secure Nginx](https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-secure-nginx-on-ubuntu-14-04) on DigitalOcean, and [Nginx WebServer Best Security Practices](https:\/\/www.cyberciti.biz\/tips\/linux-unix-bsd-nginx-webserver-security.html) on nixCraft.\n- [Apache Web Server Hardening & Security Guide](https:\/\/geekflare.com\/apache-web-server-hardening-security\/) on Geek Flare, and [Apache Web Server Security and Hardening Tips](https:\/\/www.tecmint.com\/apache-security-tips\/) on Tecmint.\n- [Ways of improving security in Litespeed](https:\/\/bobcares.com\/blog\/ways-of-improving-security-in-litespeed\/) on Bobcares.\n\n## Server configuration\n\nYou should **always keep your Operating System (OS) up to date**. OS' are vulnerable to exploits and intrusions, even more so than PHP, and should be updated as frequently as possible. Also, you should **always keep other software up to date**: Your installation is never just OS, PHP, and Grav. Other software packages are also risk-factors, and should be updated frequently.\n\nTo protect your users' connection to your site, you should enable and enforce [HTTPS with a SSL-certificate](https:\/\/php.earth\/doc\/security\/ssl). This ensures that all communication between the server and browser remains private and encrypted. Free certificates and services are available through for example [Let's Encrypt](https:\/\/letsencrypt.org\/about\/) or [CloudFlare](https:\/\/www.cloudflare.com\/ssl\/).\n\nIf your server runs on Linux, enable [Security Enhanced Linux](https:\/\/selinuxproject.org\/page\/Main_Page). SELinux is typically enabled by default, and [well worth the trouble](http:\/\/www.computerworld.com\/article\/2717423\/security\/why-selinux-is-more-work--but-well-worth-the-trouble.html) to have. Some more recommendations for SysAdmins are available on [nixCraft](https:\/\/www.cyberciti.biz\/tips\/php-security-best-practices-tutorial.html).\n"},{"title":"Developers","date":"2019-06-29T11:58:55+00:00","url":"http:\/\/localhost\/docs\/security\/developers","taxonomy":{"categories":["docs"],"tags":[]},"content":"When creating a plugin or theme for Grav, it is not only important to follow best practices, but to consider whether your work opens up any avenues of attack for potential intruders to a site. As Grav is a flat-file CMS and reliant on few dependencies, it is by nature more secure than similar systems, but insecure channels can be created inadvertently.\n\n## Best practices\n\nThese are some recommendations for how to best create a secure and trustworthy extension to Grav, and should be considered essential knowledge for any theme- or plugin-author \n\n- When writing Twig-templates that output user-submitted information, always [escape the input](https:\/\/twig.sensiolabs.org\/doc\/2.x\/filters\/escape.html), this also includes [assets](https:\/\/twig.sensiolabs.org\/doc\/2.x\/filters\/raw.html).\n- PHP-code should [sanitize](http:\/\/php.net\/manual\/en\/filter.filters.sanitize.php) input and output.\n- Blueprints should prefer preset options: When possible, give the user a set of choices rather than raw input.\n- Be aware of how memory and processor-usage affect the extension, and avoid using system resources unjustifiably.\n- Use Grav's ecosystem of functionalities and procedures rather than writing untested code, and consider battle-tested [third-party libraries](https:\/\/packagist.org\/) if you need more.\n- Do not use [unsafe PHP-functions](https:\/\/www.owasp.org\/index.php\/PHP_Security_Cheat_Sheet#Other_Injection_Cheat_Sheet). Also, read [PHP's own recommendations](http:\/\/php.net\/manual\/en\/security.php) and the [PHP Security Consortium's guide](http:\/\/phpsec.org\/projects\/guide\/) on the subject.\n- Use error-specific [exceptions](http:\/\/php.net\/manual\/en\/language.exceptions.php), not error reporting, for when a script should fail. Never include user, installation, or system data in exceptions or publicly visible debugging.\n\n## Flat-file CMS\n\nGrav has limited, modern [basic requirements](https:\/\/learn.getgrav.org\/basics\/requirements), and notably its flat-file architecture alleviates the need for a database. This is beneficial because a common attack-vector is a system's database. Sanitizing and securing input is a much harder task when the whole CMS relies on a database, and SQL-injection attacks can automatically try to execute SQL-statements even on remote hosts.\n"},{"title":"Users","date":"2019-06-29T11:58:49+00:00","url":"http:\/\/localhost\/docs\/security\/users","taxonomy":{"categories":["docs"],"tags":[]},"content":"When running Grav, with or without an Administration Panel installed, there are some best practices to keep in mind. These relate to *who* can access *what* on your website, and the potential risks of not limiting risk factors in this regard.\n\n## Grav Users and the Administration Panel\n\nWhen creating users who will have access to the [Admin Panel](https:\/\/learn.getgrav.org\/admin-panel), you should first consider what they will have access to. The Admin-plugin offers solid [permissions](https:\/\/learn.getgrav.org\/admin-panel\/dashboard\/profile#access-levels) that should be set to restrict what new users can do with the site. If you have many users, and some of them will only write content for the site, these should typically only need the `admin.pages`-permission -- as well as normal permissions like `admin.login`.\n\nFurther, it is always a best practice that your users do not have only one password that they use everywhere. If someone stole their password, they could then log in everywhere. A good password is a strong password, but even a long sentence using words in the dictionary is easier to crack than a password made up of random symbols, letters and numbers. Any human will have trouble remembering a long, random password [though](https:\/\/xkcd.com\/936\/) -- much less several -- so the [best practice](https:\/\/support.google.com\/accounts\/answer\/32040) is to use a [password manager](https:\/\/alternativeto.net\/tag\/encrypted-passwords\/) and **never the same password twice**. Many people also like to have their browser remember the passwords for each site, and only remember one strong password to unlock these. To generate a random password, you need only open Notepad and furiously hit random keys on your keyboard.\n\nTell your users to use random passwords and create one strong, long password that they'll remember. On occasion this long password should also be changed. And because the Admin-plugin features it, they should always use [2-Factor Authentication](https:\/\/learn.getgrav.org\/admin-panel\/security\/2fa). To prevent brute force attacks against the Admin Panel, the administrator should also enable [Flood Protection](https:\/\/learn.getgrav.org\/admin-panel\/security\/rate-limiting).\n\n## Server users and the Webmaster\n\nThe Webmaster is the person responsible for maintaining the website, and typically has access to it on a server-level. This person should of course [secure the server](https:\/\/learn.getgrav.org\/security\/server-side), but also ensure that he or she -- and anyone else with server-access -- only accesses the server in a secure manner. This means that **under no circumstance should the FTP-protocol be used**, only [SFTP](https:\/\/www.ssh.com\/ssh\/sftp\/) with phrase-secured [key-pairs](https:\/\/www.ssh.com\/ssh\/public-key-authentication). The server host typically has information about disabling regular FTP and accessing the server through SFTP, creating key-pairs is [well documented](https:\/\/www.linode.com\/docs\/security\/authentication\/use-public-key-authentication-with-ssh\/#generating-keys).\n\nMore broadly, consider whether any other user *needs* server-access. Every additional user with access is a potential risk, not just by their own behavior, but by the danger that if their keys or passwords are stolen others can access the server directly. In the same vein, **no users should have root access** to the server, and the system-user that runs PHP for Grav should be a separate user that only the system has access to.\n\nGiven how essential the server is for your website or service, taking care to protect it and its contents should be paramount."},{"title":"Overview","date":"2019-06-29T11:58:44+00:00","url":"http:\/\/localhost\/docs\/security\/overview","taxonomy":{"categories":["docs"],"tags":[]},"content":"If you discover a possible security issue related to Grav or one of its extensions, please send an email to the core team at [contact@getgrav.org](mailto:contact@getgrav.org) and we'll address it as soon as possible.\n\nIssues should not be publicly disclosed - including on GitHub, Discord, or the Discourse forum - before the core team has had a chance to examine it and contact the relevant parties to solve it. Also, if the issue is not a potential threat for the users of Grav, it should probably be submitted [as an issue](https:\/\/github.com\/getgrav\/grav\/blob\/develop\/CONTRIBUTING.md#bug-reports) instead. If you are unsure, get in touch and we'll help you figure out where the report belongs.\n\n## Submitting a report\n\nWhen you have discovered a potential vulnerability in Grav's core or in one of its extensions, it is advisable that you follow due diligence in reporting it:\n\n1. Include the **version numbers** of Grav and any installed extensions, as well as **which component** the issue relates to.\n2. Describe the vulnerability in a **detailed and concise manner**, so that less time is spent on searching for its source.\n3. Write down exact steps needed to **reproduce the environment** in which the vulnerability occurs: What settings are set in system.yaml, what content is created, and what system settings applied?\n4. If possible, describe the source of the vulnerability and how to **patch it** so developers can both reconstruct and secure it.\n\n### Responsible disclosure\n\nGrav follows the _responsible disclosure_ model for submittal of discovered vulnerabilities. This means that once an issue is discovered, tested, and successfully demonstrated, the developer(s) should be allowed a period of time to patch the vulnerability before it is publicly disclosed. This is because finding and testing solutions to reported issues are time-consuming and time-sensitive, and Grav is an open-source project whose authors do not have unlimited time to dedicate to it. It is therefore recommended that you also propose how to solve the issue or patch it, if you have knowledge of the relevant code.\n\n## Process of resolution\n\nIf your report is accurate and a new security issue is reproduced, the core team will address it as soon as possible. When this is done, the issue and its solution will be included in the [public repository of reports](\/security\/reports). You will be credited by name and with an optional link to your website\/social media profile, but if you prefer you can request it be credited to a pseudonym or \"anonymous reporter\".\n\nReports and issues are kept private until the issue is resolved. In the case that the maintainer of an extension fails to address the issue in a timely manner, the extension is removed from the Grav Package Manner until it is resolved.\n\n## Supported versions\n\nOnly the current `major.minor` version of Grav is supported. This means that patches are implemented in `major.minor.patch`, but not regressively backwards for older versions of Grav. Keeping your installation up-to-date is important, and many changes are beneficial even if not explicitly needed from a security perspective.\n\n## Risk-levels\n\nThere are five levels of risk involved with Grav as a software:\n\n- Highly Critical\n- Critical\n- Moderately Critical\n- Less Critical\n- Not Critical\n\nThese are calculated based on the \"[Common Misuse Scoring System](https:\/\/www.nist.gov\/news-events\/news\/2012\/07\/software-features-and-inherent-risks-nists-guide-rating-software)\" (CMSS) by the [National Institute of Standards and Technology](https:\/\/www.nist.gov\/) (NIST). For lack of an easily available calculator for Grav, use Drupal's [RiskCalc](https:\/\/security.drupal.org\/riskcalc) ([notes](https:\/\/www.mydropwizard.com\/blog\/understanding-drupal-security-advisories-risk-calculator)).\n"},{"title":"Grav Admin: Moderately Critical, Access Bypass, ADMIN-2018-001","date":"2018-07-10T22:00:00+00:00","url":"http:\/\/localhost\/docs\/security\/reports\/admin-2018-001","taxonomy":{"categories":[],"tags":[]},"content":"- ID: ADMIN-2018-001\n- Project: Grav Admin plugin\n- Date: 11-07-2018\n- Risk-level: Moderately Critical\n\nAdmin tasks a have low level of access-specificity, DirectInstall especially should be allowed only by super-administrators.\n\n### Advisory\n\nUpgrade to v1.8.6 of the Admin-plugin. The vulnerability is more pertinant to sites with multiple or many users, less so for few or single users.\n\n### Description\n\nCertain tasks within the Admin-plugin interface were exposed to lower-level, registered, users. This allows users without the `admin.login` permissions to update the newsfeed, check for updates via GPM, process notifications, and reinstall packages. Users without `admin.pages` permissions could process Markdown, delete media, or change language. Users without the `admin.super` permissions, who can do all of this, could also perform direct installations via uploaded packages.\n\nUsers capable of performing low-level POST requests, with authenticated access to the Admin-plugin interface, could execute any of these tasks. Whilst the majority are not critical, especially direct installations would allow remote code execution.\n\n### Versions affected\n\nVersions prior to 1.8.6 of the Admin-plugin are affected, discovered in 1.8.5.\n\n### Solution\n\nFixed in [Admin\/Classes\/AdminController](https:\/\/github.com\/getgrav\/grav-plugin-admin\/blob\/e87217a2426864669cc63740620f5bd702860874\/classes\/admincontroller.php), lines 879-882, 931-934, 981-984, 1024-1027, 1236-1244, 1873-1875, 2202-2205, 2231-2280 at [Jul 11, 2018, 11:30 PM GMT+2](https:\/\/github.com\/getgrav\/grav-plugin-admin\/commit\/e87217a2426864669cc63740620f5bd702860874).\n\n\n### Attribution\n\nReported by [cure53-alex](https:\/\/github.com\/cure53-alex), fixed by [Andy Miller](https:\/\/github.com\/rhukster)."},{"title":"Grav Admin: Moderately Critical, Access Bypass, ADMIN-2018-001","date":"2018-07-10T22:00:00+00:00","url":"http:\/\/localhost\/docs\/security\/reports\/2018-06-11","taxonomy":{"categories":[],"tags":[]},"content":"- ID: ADMIN-2018-001\n- Project: Grav Admin plugin\n- Date: 11-07-2018\n- Risk-level: Moderately Critical\n\nAdmin tasks a have low level of access-specificity, DirectInstall especially should be allowed only by super-administrators.\n\n### Advisory\n\nUpgrade to v1.8.6 of the Admin-plugin. The vulnerability is more pertinant to sites with multiple or many users, less so for few or single users.\n\n### Description\n\nCertain tasks within the Admin-plugin interface were exposed to lower-level, registered, users. This allows users without the `admin.login` permissions to update the newsfeed, check for updates via GPM, process notifications, and reinstall packages. Users without `admin.pages` permissions could process Markdown, delete media, or change language. Users without the `admin.super` permissions, who can do all of this, could also perform direct installations via uploaded packages.\n\nUsers capable of performing low-level POST requests, with authenticated access to the Admin-plugin interface, could execute any of these tasks. Whilst the majority are not critical, especially direct installations would allow remote code execution.\n\n### Versions affected\n\nVersions prior to 1.8.6 of the Admin-plugin are affected, discovered in 1.8.5.\n\n### Solution\n\nFixed in [Admin\/Classes\/AdminController](https:\/\/github.com\/getgrav\/grav-plugin-admin\/blob\/e87217a2426864669cc63740620f5bd702860874\/classes\/admincontroller.php), lines 879-882, 931-934, 981-984, 1024-1027, 1236-1244, 1873-1875, 2202-2205, 2231-2280 at [Jul 11, 2018, 11:30 PM GMT+2](https:\/\/github.com\/getgrav\/grav-plugin-admin\/commit\/e87217a2426864669cc63740620f5bd702860874).\n\n### Attribution\n\nReported by [cure53-alex](https:\/\/github.com\/cure53-alex), fixed by [Andy Miller](https:\/\/github.com\/rhukster).\n"},{"title":"Report Template","date":"2017-06-16T22:00:00+00:00","url":"http:\/\/localhost\/docs\/security\/reports\/report-template","taxonomy":{"categories":[],"tags":[]},"content":"Short details including ID, Project's Full Name, Date, Risk-level. Eg:\n\n- ID: CORE-2017-001\n- Project: Grav Core\n- Date: 17-06-2017\n- Risk-level: Less Critical\n\nSummary. Eg. \"REST-API is publicly exposed without authentication required.\"\n\nTitle is \"PROJECT_FULL: LEVEL, TARGET, ID\", eg. `Grav Core: Less Critical, Access Bypass, CORE-2017-001`, where ID is \"ID: PROJECT_SHORT-YEAR-INT(3)\", eg. `CORE-2017-001`. ID should be incremented following previous report within the project, year. Date should be in [Grav-parsable format](https:\/\/learn.getgrav.org\/content\/headers#date).\n\n### Advisory\n\nWhat users should do to solve the issue or to prevent the vulnerability. Eg. \"Update to v1.2.2 of Grav Core\", \"Change PHP settings to `safe_mode = On`\", \"Ensure Server-configuration prevents access via HTTP\/1.1\".\n\n### Description\n\nWhat the vulnerability exposes, why it is insecure, and how it would be used. Eg. \"Public requests to \/api could modify a page with a `POST` or `PATCH` request, without being authenticated.\"\n\n### Versions affected\n\nSpecific versions of Grav Core affected, including backward SemVer-ranges such as `1.1.x` and current SemVer-ranges such as `1.2.x` and specific versions such as `1.2.2`. Eg. \"Core `v1.1.x`, discovered in `v1.1.5`.\"\n\n### Solution\n\nHow the vulnerability was fixed in code, with specific file-at-tag references, and what specific version afterwards has solved it, such as `1.2.2`. Eg. \"Fixed in [Grav\/Common\/Page\/Page](https:\/\/github.com\/getgrav\/grav\/blob\/1.1.4\/system\/src\/Grav\/Common\/Page\/Page.php#L94-L97), lines 94-97 at v1.1.4.\"\n\n### Attribution\n\nWho reported the issue, who solved the issue, who coordinated the effort to solve the issue. Eg:\n\nReported by [John Doe](https:\/\/en.wikipedia.org\/wiki\/John_Doe), fixed by [Foo](https:\/\/en.wikipedia.org\/wiki\/Placeholder_name#Computing), [Bar](https:\/\/en.wikipedia.org\/wiki\/Placeholder_name#Computing), [Alice](https:\/\/en.wikipedia.org\/wiki\/Placeholder_name#Computing), and [Bob](https:\/\/en.wikipedia.org\/wiki\/Placeholder_name#Computing). Coordinated by the [core team](https:\/\/getgrav.org\/about).\n"},{"title":"Reports","date":"2019-06-23T21:08:01+00:00","url":"http:\/\/localhost\/docs\/security\/reports","taxonomy":{"categories":[],"tags":[]},"content":"This is the public repository for security reports for Grav. Below are the most recent reports that have been submitted and processed.\n"},{"title":"Security","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/security","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 13\n\n# Security Policies\n\nThis section details Grav's security policies, how to report security issues, and the status of current and previous reports.\n"},{"title":"Migration","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/migration","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 12\n\n# Migration\n\nThis section is dedicated to support migrations from other CMSes like WordPress\n"},{"title":"Permissions","date":"2019-08-23T10:30:21+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/permissions","taxonomy":{"categories":["docs"],"tags":[]},"content":"Depending on your hosting environment, permissions may or may not be an issue you need to concern yourself with. The important thing to understand is that there is a potential issue if the user you use to edit your files on the file-system is different from the user that PHP runs under (usually the webserver), or at the very least, the two users don't have **Read\/Write** access to these files.\n\nFirst, find out which user Apache or Nginx runs with by running the following command\nFor Apache:\n\n    ps aux | grep -v root | grep apache | cut -d\\  -f1 | sort | uniq\n\nFor Nginx:\n\n    ps aux | grep -v root | grep nginx | cut -d\\  -f1 | sort | uniq\n\nAnd find out which user owns the file in your grav directory by running\n\n    ls -l\n\nBeing a file-based CMS, Grav needs to write to the file-system in order to create cache and log files. There are three main scenarios:\n\n1. ##### PHP\/Webserver runs with the same user that edits the files. (Preferred)\n\n   This is the approach used by most **shared hosting** setups and also works well for local development. The blog post we wrote regarding [MacOS Yosemite, Apache, and PHP](https:\/\/getgrav.org\/blog\/mac-os-x-apache-setup-multiple-php-versions) outlines how to configure Apache to run as your personal user account. This approach is not considered secure enough to use on a dedicated web host, so the second or third option should be used.\n\n2. ##### PHP\/Webserver runs with different accounts but same Group\n\n   By using a shared Group between your user and PHP\/Webserver account with `775` and `664` permissions you ensure that even though you have two different accounts, both will have **Read\/Write** access to the files. You should also probably set a `umask 0002` on the root so that new files are created with the proper permissions.\n\n3. ##### Different accounts, fix permissions manually\n   The last approach is to have completely different accounts and just update the ownership and permissions of the files after editing to ensure that the PHP\/Webserver user can **Read\/Write** appropriately.\n\nA simple **permissions-fixing** shell script can be used to do this:\n\n[prism classes=\"language-bash line-numbers\"]\n#!\/bin\/sh\nchown -R joeblow:staff .\nfind . -type f | xargs chmod 664\nfind .\/bin -type f | xargs chmod 775\nfind . -type d | xargs chmod 775\nfind . -type d | xargs chmod +s\n[\/prism]\n\nYou can use this file and edit as needed for the appropriate user and group that works for your setup. What this script basically does, is:\n\n1. Changes the current directory, all files and subfolder to `joeblow` and `staff` ownership\n2. Finds all the files from the current directory down and sets the permissions to `664` so they are `RW` for User & Group and `R` for Others.\n3. Finds all the folders from the current directory down and sets the permissions to `775` so they are `RWX` for User & Group and `RX` for Others.\n4. Sets the **ownership** of all directories to ensure that User and Group changes are maintained\n\n### Image Cache folder permissions\n\nIf image files in the cache folder are written with the wrong permissions, try setting in your `user\/config\/system.yaml` file,\n\n[prism classes=\"language-yaml line-numbers\"]\nimages:\ncache_perms: '0775'\n[\/prism]\n\nif the `images` property is already present, just add `cache_perms: '0775'` at the end of it.\n\nIf this does still not work, create a `setup.php` file in the root Grav folder (the one with `index.php`), and add\n\n[prism classes=\"language-php line-numbers\"]\n\n<?php\numask(0002);\n[\/prism]\n\ninto it.\n\nIf you already have a `setup.php` file, just add this line to the top. This file is commonly used for multisite setup, but being called in every Grav call, you can also use it for other uses.\n\n### Co-hosting with a WordPress site\n\nIn general, Grav can be installed in a root level folder of an existing WordPress site and the two CMS will co-exist nicely.  (Remember to set Base Rewrite in the Grav folder's htaccess.)  If you are encountering permissions errors with cache files when accessing the Admin and\/or viewing Grav pages, check to see if WP-Engine is installed for this WordPress site.  If it is, you will need to contact their support to create an exception for the Grav folder from their aggressive distributed cache service.\n\n### SELinux-specific advice\n\nIf the above suggestions still do not work, run\n\n`chcon -Rv system_u:object_r:httpd_sys_rw_content_t:s0 .\/` into the Grav root folder.\n\nReferences:\n- [https:\/\/unix.stackexchange.com\/questions\/337704\/selinux-is-preventing-nginx-from-writing-via-php-fpm](https:\/\/unix.stackexchange.com\/questions\/337704\/selinux-is-preventing-nginx-from-writing-via-php-fpm)\n- [https:\/\/github.com\/getgrav\/grav\/issues\/912#issuecomment-227627196](https:\/\/github.com\/getgrav\/grav\/issues\/912#issuecomment-227627196)\n- [http:\/\/stopdisablingselinux.com](http:\/\/stopdisablingselinux.com\/)\n- [http:\/\/stackoverflow.com\/questions\/28786047\/failed-to-open-stream-on-file-put-contents-in-php-on-centos-7](http:\/\/stackoverflow.com\/questions\/28786047\/failed-to-open-stream-on-file-put-contents-in-php-on-centos-7)\n- [http:\/\/www.serverlab.ca\/tutorials\/linux\/web-servers-linux\/configuring-selinux-policies-for-apache-web-servers\/](http:\/\/www.serverlab.ca\/tutorials\/linux\/web-servers-linux\/configuring-selinux-policies-for-apache-web-servers\/)\n"},{"title":"404 Not Found","date":"2019-04-07T09:07:04+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/page-not-found","taxonomy":{"categories":["docs"],"tags":[]},"media":["404-not-found.png","error-404.png","htaccess_tester.png"],"content":"There are a couple of reasons you might receive a **Not Found** error, and they are each caused by different factors.\n\n![404 Not Found](404-not-found.png?classes=shadow)\n\n!! The examples below are for the Apache Web Server which is the most common server software used.\n\n### IIS use of .htaccess file\nAfter adding URL Rewrite to the IIS server using the Web Platform Installer, restart the IIS server. Go to the management interface, IIS, double-click on URL Rewrite, under Inbound Rules, click on Import Rules, under Rules to Import, browse to the Configuration file, choosing the .htaccess file in the root, and then click on Import. Restart the IIS server. Access Grav now.\n\n### Missing .htaccess File\n\nThe first thing to check is if you have the provided `.htaccess` file at the root of your Grav installation. Because this is a **hidden** file, you won't normally see this in your explorer or finder windows.  If you have extracted Grav then **selected** and **moved** or **copied** the files, you may well have left this very important file behind.\n\nIt is **strongly advised** to unzip Grav and move the **entire folder** into place, then simply rename the folder. This will ensure all the files retain their proper positions.\n\n### AllowOverride All\n\nIn order for the Grav-provided `.htaccess` to be able to set the rewrite rules required for routing to work properly, Apache needs to first read the file.  When your `<Directory>` or `<VirtualHost>` directive is setup with `AllowOverride None`, the `.htaccess` file is completely ignored.  The simplest solution is to change this to `AllowOverride All`\nwhere RewriteRule is used, **FollowSymLinks** or **SymLinksIfOwnerMatch** needs to be set in Options directive. Simply add on the same line '+FollowSymlinks' after 'Options'\n\nMore details on `AllowOverride` and all the possible configuration options can be found in the [Apache Documentation](http:\/\/httpd.apache.org\/docs\/2.4\/mod\/core.html#allowoverride).\n\n### RewriteBase Issue\n\nIf the homepage of your Grav site loads, but **any other page** displays this very rough _Apache-style_ error, then the most likely cause is that there is a problem with your `.htaccess` file.\n\nThe default `.htaccess` that comes bundled with Grav works fine out-of-the-box in most cases.  However, there are certain setups involving virtual hosts where the file system does not match the virtual hosting setup directly.  In these cases you must configure the `RewriteBase` option in the `.htaccess` to point to the correct path.\n\nThere is a short explanation of this in the `.htaccess` file itself:\n\n[prism classes=\"language-apacheconf line-numbers\"]\n##\n# If you are getting 404 errors on subpages, you may have to uncomment the RewriteBase entry\n# You should change the '\/' to your appropriate subfolder. For example if you have\n# your Grav install at the root of your site '\/' should work, else it might be something\n# along the lines of: RewriteBase \/<your_sub_folder>\n##\n\n# RewriteBase \/\n[\/prism]\n\nSimply remove the `#` before the `RewriteBase \/` directive to uncomment it, and adjust the path to match your server environment.\n\nWe've included additional information to help you locate and troubleshoot your `.htaccess` file in our [htaccess guide](..\/htaccess).\n\n### Missing Rewrite Modules\n\nSome webserver packages (I'm looking at your EasyPHP and WAMP!) do not come with the Apache **rewrite** module enabled by default. They usually can be enabled from the configuration settings for Apache, or you can do so manually via the `httpd.conf` by uncommenting this line (or something similar) so they are loaded by Apache:\n\n[prism classes=\"language-apacheconf\"]\n#LoadModule rewrite_module modules\/mod_rewrite.so\n[\/prism]\n\nThen restart your Apache server.\n\n### .htaccess Test Script\n\nTo help isolate `.htaccess` and **rewrite** issues, you can download this [htaccess_tester.php](https:\/\/gist.githubusercontent.com\/rhukster\/a727fb70d9341536d49980d1239bd97e\/raw\/a3078da16b894ba86f9d000bcfc4850e098199fc\/htaccess_tester.php) file, and drop it in your Grav root directory.\n\nThen point your browser to `http:\/\/yoursite.com\/htaccess_tester.php`.  You should get a successful message and a copy of the Grav `.htaccess` file displayed.\n\n![](htaccess_tester.png?classes=shadow)\n\nNext you can test if rewrites are working by backing up the existing .htaccess file:\n\n[prism classes=\"language-bash command-line\"]\nmv .htaccess .htaccess-backup\n[\/prism]\n\nAnd then try this simple `.htaccess` file:\n\n[prism classes=\"language-apacheconf line-numbers\"]\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteRule ^.*$ htaccess_tester.php\n<\/IfModule>\n[\/prism]\n\nThen try this URL: `http:\/\/yoursite.com\/test`.  Actually any path you use should display a success message telling you that `mod_rewrite` is working.\n\nAfter you have finished testing, you should delete the test file and restore your `.htaccess` file:\n\n[prism classes=\"language-bash command-line\"]\nrm htaccess_tester.php\nmv .htaccess-backup .htaccess\n[\/prism]\n\n### Grav Error 404 Page\n\n![404 Not Found](error-404.png?classes=shadow)\n\nIf you receive a _Grav-style_ error saying **Error 404** then your `.htaccess` is functioning correctly, but you're trying to reach a page that Grav cannot find.\n\nThe most common cause of this is simply that the page has been moved or renamed. Another thing to check is if the page has a `slug` set in the page YAML headers. This overrides the explicit folder name that is used by default to construct the URL.\n\nAnother cause could be your page is **not routable**. The routable option for a page can be set in the [page headers](..\/..\/content\/headers).\n\n### 404 Page Not Found on Nginx\n\nIf your site is in a subfolder, make sure your nginx.conf location points to that subfolder. Grav's [sample nginx.conf](https:\/\/github.com\/getgrav\/grav\/blob\/master\/webserver-configs\/nginx.conf) has a comment in the code that explains how.\n\n"},{"title":"htaccess","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/htaccess","taxonomy":{"categories":["docs"],"tags":[]},"media":["test.png"],"content":"Grav comes complete with its own `.htaccess` file. This file enables Grav to operate properly and should be kept in its root folder. You may encounter issues that can be resolved using the `.htaccess` file.\n\nApache is one of the most popular server solutions available today. It's free, and widely available just about everywhere. Unfortunately, Apache isn't perfect, and sometimes the `.htaccess` file can give you a headache. Don't worry, it's almost always fixable.\n\n## How to Edit .htaccess in Windows and macOS\n\nThe .htaccess file is a hidden file, meaning that by default, users of macOS and Windows will be unable to see this file in the file manager (Finder) unless they enable hidden files to be viewed.\n\nIn **macOS**:\n\n1. Open **Terminal**.\n2. Enter `defaults write com.apple.finder AppleShowAllFiles YES` into the **Terminal** and hit **return**.\n3. Enter `killall Finder` into the **Terminal** and hit **return**.\n\nYou should now be able to see the `.htaccess` file in the root directory of the unzipped Grav folder. You can return your settings to their original hidden state by repeating the process and entering `NO` at the end of step 2 instead of `YES`.\n\nIn **Windows 10**:\n\n1. Open **File Explorer**.\n2. Select the **View** tab.\n3. Check the box next to **Hidden Items**.\n\nUnchecking this box will hide these hidden files again, returning the **File Explorer** to its default state.\n\n## Testing .htaccess\n\nLet's say you go to your browser and navigate to your new Grav site and... it's not there! A big, bold message stating `Not Found` is where your beautiful Grav site should be. This is not a fun problem to have, but the solution could be as simple as adjusting your `.htaccess` file.\n\nThe first step in troubleshooting issues with the `.htaccess` file should be making sure that the file is actually being picked up and utilized by the server. Make sure the file is in the root directory of your Grav site where it should be, and that it is properly named `.htaccess` with a leading (`.`) period.\n\nIf the file is there, your next step is to give it a test and make sure your server is picking it up. This is a simple process that involves adding a single line at the top of the file.\n\nTo test, open up the `.htaccess` file in a text editor. Then, you'll want to create a new first line and place the text `Test.` and save.\n\n![HTACCESS Test](test.png)  {.border .shadow}\n\nThis error doesn't solve your problem by itself, but it does let you know that the `.htaccess` in the root directory of your Grav site is the one your server is parsing.\n\nIf you don't receive this error, make sure you have the file in your site's root directory. This should be the file included with the original Grav install. This is one of the reasons we recommend unpacking the zipped Grav directory and moving that directory where you want your site to be on your server, rather than copying the files and pasting them. This ensures that all of the files and the directory structure is kept the same, avoiding issues like these.\n\n## Troubleshooting a Broken .htaccess\n\nIf nothing changed when you edited the .htaccess file, you may need to make sure that `.htaccess` is enabled. If not, your server won't even look for it in the first place.\n\nHere's what you can do:\n\nFind and open `httpd.conf` or `apache.conf` file in a text editor. In Windows, this will probably be Notepad or a text editor made for development. Word processors can add unnecessary information that could make the problem worse.\n\nNext, you'll want to look for the `Directory` area of the file. There should be a block of text like this:\n\n[prism classes=\"language-text line-numbers\"]\n    #\n    # AllowOverride controls what directives may be placed in .htaccess files.\n    # It can be \"All\", \"None\", or any combination of the keywords:\n    #   Options FileInfo AuthConfig Limit\n    #\n    AllowOverride All\n[\/prism]\n\nIf `AllowOverride` is set to `None` or anything other than `All`, you will need to change it to `All` and save. This change will require a reset of your Apache server to register.\n\nOnce you have done this, give your site another test.\n\nWe've also included troubleshooting guides to help you should you encounter a [404](..\/page-not-found) or [500](..\/internal-server-error) internal server error while working with Grav.\n"},{"title":"Common Problems","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/common-problems","taxonomy":{"categories":["docs"],"tags":[]},"content":"Here you can find information on problems and issues raised on [Grav forum](https:\/\/getgrav.org\/forum) and in the [Discord Chat server](https:\/\/chat.getgrav.org) that occur frequently enough that we thought we would save time and list the problem and the relevant solution in one easy to find location.\n\n## Cannot connect to the GPM\n\n**Problem:** The GPM cannot be reached, and you get this error in the Admin panel\n\n**Solution:**\n\nFirst, make sure PHP has cURL and OpenSSL installed. You can check this in the Admin panel, in Configuration -> Info. You should see a \"OpenSSL\" section with `OpenSSL support: enabled`. Same for cURL, a section with `cURL support: enabled`.\n\nIf this is ok, make sure you're not behind a proxy. If so, [configure it](\/basics\/grav-configuration#system-configuration) in the Grav System configuration and [make sure there are no issues with the connection](\/troubleshooting\/proxy).\n\nThen, [check your permissions](\/troubleshooting\/permissions).\n\nIf after all the above you are still getting issues connecting with GPM, we have noticed that on some servers (mostly local machines running Windows), there are issues verifying the SSL certificate of getgrav.org, even though it is [A Rating](https:\/\/www.ssllabs.com\/ssltest\/analyze.html?d=getgrav.org&hideResults=on).\nTo work around this problem, we have added a new system config `system.gpm.verify_peer` that is enabled by default. Set it to false and try again.\n\nIf at this point it's still not working, get in touch, or report back if you were pointed here via chat\/forum.\n\nAlso, check the CLI command is working, by opening a SSH connection to the server and running `bin\/gpm index` and check if it's just inside Admin that you get this error, or in the command line too.\n\n## Admin Interface won't scroll\n\n**Problem:** When accessing the Admin-plugin's interface, the page will not scroll\n\n**Solution:** There are several reported causes of this, but the most common solutions are the following.\n\n- Hard-reload the page by clearing your browser's cache and then refreshing.\n- Make sure you are using the newest version of Grav, and switch to the default language - English. If this solves the scrolling issue, please report the faulty language [as an issue](https:\/\/github.com\/getgrav\/grav-plugin-admin\/issues\/).\n- If you are using CloudFlare for HTTPS or as a CDN, their JS-optimization - which is enabled by default - can block scripts from rendering. To disable this, log in to CloudFlare and select the relevant domain, then do one of the following:\n    1. To disable this optimization entirely, navigate to \"Speed\" and scroll down to \"Rocket Loader\".\n        - Set this to \"Off\" and CloudFlare will not block the script, but you will also not benefit from their optimization.\n    2. To only disable the optimization for Grav's Admin interface, navigate to \"Page Rules\" and click the \"Create Page Rule\"-button.\n        - For \"If the URL matches\" field, fill in your domain name, followed by `\/admin`, for example: `example.com\/admin`.\n        - Click \"Add a Setting\", and in the dropdown find \"Rocket Loader\". When selected, change the value in \"Select Value\" to **off**.\n        - Leave the \"Order\"-field as is, by default it is set to **First**.\n        - Finally, click the \"Save and Deploy\"-button\n\nIf none of the above work, please check your browser's console for any reported JavaScript errors; In Chrome or Firefox either press F12 or Ctrl+Shift+I, then click the \"Console\"-tab. Report the errors [as an issue](https:\/\/github.com\/getgrav\/grav-plugin-admin\/issues\/).\n\n## Fetch failed\n\nInside Admin sometimes a \"Fetch Failed\" red popup might appear. If it happens once in a while, do not worry as it might simply mean a connection issue.\n\nBut if it shows up every time, an issue some users run into is `mod_security` blocking Grav's network requests.\n\nThis can be solved by finding and disabling the rules that are raised, which depending on the configuration of mod_security, might be different from case to case.\n\nIf you are running your own server, a guide on how to do this can be found in [http:\/\/www.inmotionhosting.com\/support\/website\/modsecurity\/find-and-disable-specific-modsecurity-rules](http:\/\/www.inmotionhosting.com\/support\/website\/modsecurity\/find-and-disable-specific-modsecurity-rules), otherwise just contact your hosting provider and illustrate the problem.\n\nRelated issue: [admin#951](https:\/\/github.com\/getgrav\/grav-plugin-admin\/issues\/951)\n\n## Zend OPcache API is restricted\n\nIf you are running PHP with Zend OPache and you receive this error, then your current OPCache configuration is [limiting access to OPcache API function to scripts only from a specified string](http:\/\/php.net\/manual\/en\/opcache.configuration.php). The simplest solution to this is to find the location of this directive either in your `php.ini` file or in a specialized `opcache.ini` file that is being pulled in to your overall `php.ini` file and set this value to nothing:\n\n[prism classes=\"language-apacheconf line-numbers\"]\nopcache.restrict_api=\n[\/prism]\n\nThis is an issue with any [ServerPilot](https:\/\/serverpilot.io) managed hosting with PHP 7.2 enabled.  A ticket has been submitted to resolve this on their end.\n\n## LinkedIn Sharing and Wayback Machine Indexing Not Working\n\n**Problem:** Sharing pages with LinkedIn and having the page's data propagate is not working. The Wayback Machine is not properly indexing my website's pages.\n\n**Solution:** Enable WebServer Gzip or Gzip compression. Both may be used, but at least one needs to be active for these particular functions to work on some server cases.\n\nThis [issue](https:\/\/github.com\/getgrav\/grav\/issues\/1639) has popped up for users on specific server environments. In particular, with AWS cloud-based servers, users were experiencing issues sharing web pages from their Grav sites on LinkedIn or having them properly indexed by the Wayback Machine. This problem was resolved by turning on either WebServer Gzip or Gzip compression.\n\n## Cannot Scroll in Admin on CloudFlare\n\nFor CloudFlare users, the ability to scroll in the Admin can be interrupted. There are solutions to this, as follows:\n\nIn CloudFlare's interface, go to **Speed** and disable **Rocket Loader** (or through a page-rule).\n\nIt can also be disabled in the (default) 'automatic' mode with a **data-attribute** on scripts: `<script data-cfasync=\"false\" src=\"\/javascript.js\"><\/script>`.\n\nAn example of a page-rule would be the URL match `example.com\/staging\/*\/admin`, where the `*` is a wildcard indicating any folder-name. For settings, add `Rocket Loader` and select **Off**.\n"},{"title":"403 Forbidden","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/forbidden","taxonomy":{"categories":["docs"],"tags":[]},"media":["forbidden-403.png"],"content":"![](forbidden-403.png)  {.border .shadow}\n\nThere is an obscure but persistent issue with **Apache** on **Windows** causing a 403 forbidden error.\n\nBasically, Apache won't allow the `:` in the URL that works on other systems due to a security concern based on the fact that windows paths can have colons in them: `C:\\some\\path`.\n\nWe have addressed this by providing a configurable option for the parameter separator that is defaulting to `:`\n\nSimply edit your `user\/config\/system.yaml` and add this at the top:\n\n[prism classes=\"language-yaml\"]\nparam_sep: ';'\n[\/prism]\n\nThis will configure Grav to use a semicolon, rather than a colon for parameters such as `http:\/\/yoursite.com\/blog\/tag:something` will now be: `http:\/\/yoursite.com\/blog\/tag;something`.\n\n## 403 issue in Admin\n\nIf you have `mod_security` installed, we had reports of rule 350147 (http:\/\/wiki.atomicorp.com\/wiki\/index.php\/WAF_350147) triggering a false positive. Whitelist that rule, or ask your hosting provider support to do it.\n\n[prism classes=\"language-yaml line-numbers\"]\nModSecurity: [file \"\/etc\/httpd\/conf\/modsecurity.d\/rules\/tortix\/modsec\/50_plesk_basic_asl_rules.conf\"] [line \"308\"] [id \"350147\"] [rev \"143\"] [msg \"Protected by Atomicorp.com Basic Non-Realtime WAF Rules: Potentially Untrusted Web Content Detected\"] [data \"\"] [severity \"CRITICAL\"] Access denied with code 403 (phase 2). Match of \"rx ((?:submit(?:\\\\+| )?(request)?(?:\\\\+| )?>+|<<(?:\\\\+| )remove|(?:sign ?in|log ?(?:in|out)|next|modifier|envoyer|add|continue|weiter|account|results|select)?(?:\\\\+| )?>+)$|^< ?\\\\??(?: |\\\\+)?xml|^<samlp|^>> ?$)\" against \"ARGS:notifications\" required. [hostname \"mydomain\"] [uri \"\/grav\/admin\/notifications.json\/task:processNotifications\"] [unique_id \"WXoYHcpkEKz0qCI66845gQAAAAo\"], referer: http:\/\/mydomain\/grav\/admin\/tools\n[\/prism]\n"},{"title":"500 Internal Server Error","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/internal-server-error","taxonomy":{"categories":["docs"],"tags":[]},"content":"> The server encountered an internal error or misconfiguration and was unable to complete your request.\n>\n> Please contact the server administrator at webmaster@localhost to inform them of the time this error occurred, and the actions you performed just before this error.\n>\n> More information about this error may be available in the server error log.\n> <cite>Apache\/2.4.7 Server at localhost Port 80<\/cite>\n\nThis error can be triggered by the following:\n\n- server misconfiguration (httpd.conf)\n- .htaccess issues\n- mod_security or similar\n\n### Test PHP is Working\n\nThe first thing you should do is ensure PHP is working properly on your server, and Grav is not the direct cause of the issue.  To test this simply create a temporary file (remove it afterwards for security!) in the root of your Grav folder called `info.php`.  This file should have the following PHP code:\n\n[prism classes=\"language-php line-numbers\"]\n<?php phpinfo();\n[\/prism]\n\nThen point your browser at this file: `http:\/\/yoursite.com\/your_grav_directory\/info.php`.  You should get a report page listing all the information related to the PHP configuration including version and extensions loaded.\n\n### Check permissions\n\nA 500 error can be triggered by having the wrong permissions. Check [the permissions guide](\/troubleshooting\/permissions)\n\n### Register Globals Issue\n\nSome people who have recently upgraded to PHP 5.5 from version 5.4 or 5.3, may still have some out of date settings in their `php.ini` file.  One item that can cause a **500 Internal Server Error** is the `register_globals` setting.  Simply remove or comment out the line:\n\n[prism classes=\"language-apacheconf line-numbers\"]\nregister_global = On\n[\/prism]\n\nThen restart your Apache server.\n\n### ThreadStackSize on Windows\n\nIf your server is running on Windows, you could be getting a 500 Internal Server Error due to the fact that the **ThreadStackSize** is much too small.  Simply append this code to the bottom of your `httpd.conf` file:\n\n[prism classes=\"language-apacheconf line-numbers\"]\n<IfModule mpm_winnt_module>\n  ThreadStackSize 8388608\n<\/IfModule>\n[\/prism]\n\nThen restart your Apache server.\n\n### Options -Indexes\n\nGrav uses a `-Indexes` option to force no directory listings of folders. Some hosts do not like Apache `.htaccess` manipulating the `Options` setting.\n\nWe have seen reports that simply commenting out this line in Grav's `.htaccess` file can fix the Internal Server error problems for users in this situation:\n\n[prism classes=\"language-apacheconf line-numbers\"]\n# Prevent file browsing\n#Options -Indexes\n[\/prism]\n\n### RewriteBase problems\n\nHave had some reports of 500 Internal Server Errors without setting the RewriteBase, on 1&1 hosting (but can apply to others too). Try changing\n\n[prism classes=\"language-apacheconf line-numbers\"]\n# RewriteBase \/\n[\/prism]\n\nto\n\n[prism classes=\"language-apacheconf line-numbers\"]\nRewriteBase \/\n[\/prism]\n\n(Credit: [http:\/\/ahcox.com\/webdev\/1and1-internal-server-error-grav\/](http:\/\/ahcox.com\/webdev\/1and1-internal-server-error-grav\/))\n\n### Admin Panel Navigation\n\nWhen navigating through Grav's admin panel, **Internal Server Error** message appears in the top left.  This is due to incorrect permissions on your \/cache folder.\n\n ![Internal Server Error](http:\/\/i.imgur.com\/vyPfoZ7.png)\n\nIf this error is popping up the chances are you haven't set the correct permission on the \/cache folder, rather than just making the folder writable you need to make it reclusively writable.  Running the below command from within your Grav directory should sort out the problem.\n\n[prism classes=\"language-bash command-line\"]\nsudo chmod 755 cache\/ -R\n[\/prism]\n\n"},{"title":"Grav Server Error","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/server-error","taxonomy":{"categories":["docs"],"tags":[]},"media":["grav-server-error.png"],"content":"![](grav-server-error.png)   {.center}\n\nServer errors are almost always caused by misconfiguration of Grav. Something unexpected happened and because of that Grav is unable to recover and serve the page.\n\nWhen you see this message it means your server is running in `Production` mode to hide potentially sensitive information from displaying to your users.  The error itself will be stored in the `logs\/grav.log` file.  Please examine this file to determine the exact nature of the error.\n\nPossible reasons include:\n\n* Server errors are caused by out-of-date configuration\n* Incorrect file permissions which prevents Grav from writing data\n* Changes in the file-system that Grav is not yet aware about\n* Errors in parsing configuration due to invalidly formatted configuration files\n\n\n!!! If you have the **Grav Administration** plugin installed, you can browse the Server Errors from there. By clicking the individual errors you can see the debug pages even if the debugger was turned off.\n\n## Out-of-date configuration\n\nThe first thing you should do is flush the cache to ensure that the configuration is up to date:\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav clear-cache\n[\/prism]\n\n!! Before moving on, make sure that you do not have other file permission issues like this.\n\n## Installation and configuration issues\n\n- system requirements\n- file permissions\n- installation issues\n- configuration issues\n"},{"title":"Invalid Security Token","date":"2018-07-15T08:58:44+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/invalid-security-token","taxonomy":{"categories":["docs"],"tags":[]},"content":"**Problem:** You get this error in the Admin panel when logging in on performing operations\n\nThere are a few possible causes of the problem, all linked to the Session:\n\n- Try **reloading** your browser to get a fresh token\n\n- Try clearing your browser session cookies, Try logging out and back in.\n\n- Ensure you are running under SSL and a HTTPS URL if you have `session.secure: true` set in Grav's `system.yaml`\n\n- Check that PHP has the correct tmp path set up. This can be set in PHP directly, or by setting Grav's `system.yaml` `session.path` setting (it can also be set via Admin, in the System Configuration) [Reported issue](https:\/\/github.com\/getgrav\/grav-plugin-admin\/issues\/958)\n\n- Make sure your web server config is right and includes the query string [Reported issue](https:\/\/github.com\/getgrav\/grav-plugin-admin\/issues\/893)\n"},{"title":"Proxy issues","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/troubleshooting\/proxy","taxonomy":{"categories":["docs"],"tags":[]},"content":"Running GPM commands behind a proxy might result in an error.\n\ncURL allows you to set the proxy as an environment variable (`http_proxy` and `https_proxy`), without changes needed in Grav.\n\nSee [http:\/\/stackoverflow.com\/questions\/7559103\/how-to-setup-curl-to-permanently-use-a-proxy](http:\/\/stackoverflow.com\/questions\/7559103\/how-to-setup-curl-to-permanently-use-a-proxy)\n\nBut first, if your environment has `fopen` enabled, you need to turn it off by disabling `allow_url_fopen` via php.ini.\n\nThis is because if `fopen` is available, Grav automatically uses that over `curl`."},{"title":"Troubleshooting","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/troubleshooting","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 11\n\n# Troubleshooting\n\nIn most cases **Grav** should work out of the box, but at times you may encouter **Server Errors** or some other issues.  In this chapter you can find the answers you may be looking for.\n"},{"title":"Plugin Recipes","date":"2019-07-05T10:03:26+00:00","url":"http:\/\/localhost\/docs\/cookbook\/plugin-recipes","taxonomy":{"categories":["docs"],"tags":[]},"content":"This page contains an assortment of problems and their respective solutions related to Grav plugins.\n\n## Output some PHP code result in a Twig template\n\n#### Goal:\n\nYou want to process some custom PHP code, and make the result available in a page.\n\n#### Solution:\n\nYou create a new plugin that creates a Twig extension, and makes some PHP content available in your Twig templates.\n\nCreate a new plugin folder in `user\/plugins\/example`, and add those files:\n\n`user\/plugins\/example\/example.php`\n`user\/plugins\/example\/example.yaml`\n`user\/plugins\/example\/twig\/ExampleTwigExtension.php`\n\nIn `twig\/ExampleTwigExtension.php` you'll do your custom processing, and return it as a string in `exampleFunction()`.\n\nThen in your Twig template file (or in a page Markdown file if you enabled Twig processing in Pages), render the output using: `{{ example() }}`.\n\nThe overview is over, let's see the actual code:\n\n`example.php`:\n\n[prism classes=\"language-php line-numbers\"]\n\n<?php\nnamespace Grav\\Plugin;\nuse \\Grav\\Common\\Plugin;\nclass ExamplePlugin extends Plugin\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onTwigExtensions' => ['onTwigExtensions', 0]\n        ];\n    }\n    public function onTwigExtensions()\n    {\n        require_once(__DIR__ . '\/twig\/ExampleTwigExtension.php');\n        $this->grav['twig']->twig->addExtension(new ExampleTwigExtension());\n    }\n}\n[\/prism]\n\n`ExampleTwigExtension.php`:\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Grav\\Plugin;\nclass ExampleTwigExtension extends \\Twig_Extension\n{\n    public function getName()\n    {\n        return 'ExampleTwigExtension';\n    }\n    public function getFunctions()\n    {\n        return [\n            new \\Twig_SimpleFunction('example', [$this, 'exampleFunction'])\n        ];\n    }\n    public function exampleFunction()\n    {\n        return 'something';\n    }\n}\n[\/prism]\n\n`example.yaml`:\n\n[prism classes=\"language-yaml\"]\nenabled: true\n[\/prism]\n\nThe plugin is now installed and enabled, and it should all just work.\n\n## Filter taxonomies using the taxonomylist plugin\n\n#### Goal:\n\nYou want to use the [taxonomy list Grav plugin](https:\/\/github.com\/getgrav\/grav-plugin-taxonomylist) to list the tags that are used in your blog posts, but instead of listing all of them, you only want to list the most used items in a given taxonomy (such as the top five tags, for example).\n\n#### Solution:\n\nThis is an example where the flexibility of Grav plugins really come in handy. The first step is to make sure that you have the [taxonomy list Grav plugin](https:\/\/github.com\/getgrav\/grav-plugin-taxonomylist) installed within your Grav package. After this has been installed, make sure that you copy `\/yoursite\/user\/plugins\/taxonomylist\/templates\/partials\/taxonomylist.html.twig` to `\/yoursite\/user\/themes\/yourtheme\/templates\/partials\/taxonomylist.html.twig` as we will be making modifications to this file.\n\nIn order to make this work, we are going to introduce three new variables: `filter`, `filterstart` and `filterend` where\n\n * **filter** is a Boolean, which will be set to `true` if we want to be able to list only the top several tags (or whatever other taxonomy you want to use).\n *  **filterstart** is an arbitrary integer, but should usually be set to zero. This is the index in the taxonomy array that you want to start at.\n * **filterend** is an arbitrary integer and is the index in the taxonomy array that you want to end at. Note that if you want to list the top five items in your taxonomy, you should set this to 5 as our loop will iterate until `filterend -1`.\n\nThe next step will be to make a call to `taxonomylist.html.twig` within the template in which we wish to list the top items in our taxonomy. As usual, we will do this using `{% include %}` as seen in the following snippet example:\n\n[prism classes=\"language-twig line-numbers\"]\n{% if config.plugins.taxonomylist.enabled %}\n<div class=\"sidebar-content\">\n    <h4>Popular Tags<\/h4>\n    {% include 'partials\/taxonomylist.html.twig' with {'taxonomy':'tag', filter: true, filterstart: 0, filterend: 5} %}\n<\/div>\n{% endif %}\n[\/prism]\nIn this example, we are going to list the top five tags.\n\nNow, let's turn our attention to `taxonomylist.html.twig`. For reference, here is the default code for this file when you initially install it:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set taxlist = taxonomylist.get() %}\n\n{% if taxlist %}\n\n<span class=\"tags\">\n    {% for tax,value in taxlist[taxonomy] %}\n\n        <a href=\"{{ base_url }}\/{{ taxonomy }}{{ config.system.param_sep }}{{ tax|e('url') }}\">{{ tax }}<\/a>\n\n    {% endfor %}\n<\/span>\n{% endif %}\n[\/prism]\nIn order to make this work with our new variables (i.e. `filter`, `filterstart` and `filterend`), we will need to include them within this file like so:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set taxlist = taxonomylist.get %}\n    {% if taxlist %}\n        <span class=\"tags\">\n            {% if filter %}\n                {% for tax,value in taxlist[taxonomy]|slice(filterstart,filterend) %}\n                    <a href=\"{{ base_url }}\/{{ taxonomy }}{{ config.system.param_sep }}{{ tax|e('url') }}\">{{ tax }}<\/a>\n                {% endfor %}\n            {% else %}\n                {% for tax,value in taxlist[taxonomy] %}\n                    <a href=\"{{ base_url }}\/{{ taxonomy }}{{ config.system.param_sep }}{{ tax|e('url') }}\">{{ tax }}<\/a>\n                {% endfor %}\n            {% endif %}\n        <\/span>\n[\/prism]\nHere, the file is first checking if `filter` has been set to `true`. If so, the for loop is run just as it was in the original `taxonomylist.html.twig`, but this time it is making use of the `slice` Twig filter. This filter will, in our case, extract a subset of an array from the beginning index (in our case, `filterstart`) to the ending index (in our case `filterend-1`).\n\nIf, on the other hand, the `filter` variable is set to `false` or is not found, all of the items in your taxonomy will be listed.\n\n## Adding a search button to the SimpleSearch plugin\n\n#### Goal:\n\nYou really like the [Grav SimpleSearch plugin](https:\/\/github.com\/getgrav\/grav-plugin-simplesearch), but you want to add a search button in addition to the text field. One reason to add this button is that it may not be readily apparent to the user that they need to hit their `Enter` key in order to initiate their search request.\n\n#### Solution:\n\nFirst, make sure that you have installed the [Grav SimpleSearch plugin](https:\/\/github.com\/getgrav\/grav-plugin-simplesearch). Next, make sure that you copy `\/yoursite\/user\/plugins\/simplesearch\/templates\/partials\/simplesearch-searchbox.html.twig` to `\/yoursite\/user\/themes\/yourtheme\/templates\/partials\/simplesearch-searchbox.html.twig` as we will need to make modifications to this file.\n\nBefore we go any further, let's review what this file does:\n[prism classes=\"language-twig line-numbers\"]\n<input type=\"text\" placeholder=\"Search...\" value=\"{{ query }}\" data-search-input=\"{{ base_url }}{{ config.plugins.simplesearch.route}}\/query\" \/>\n<script>\njQuery(document).ready(function($){\n    var input = $('[data-search-input]');\n    input.on('keypress', function(event) {\n        if (event.which == 13 && input.val().length > 3) {\n            event.preventDefault();\n            window.location.href = input.data('search-input') + '{{ config.system.param_sep }}' + input.val();\n        }\n    });\n});\n<\/script>\n[\/prism]\nThe first line simply embeds a text input field into your Twig template. The `data-search-input` attribute stores the base URL of the resulting query page. The default is `http:\/\/yoursite\/search\/query`.\n\nLet's now move onto the jQuery below that. Here, the tag containing the `data-search-input` attribute is assigned to a variable `input`. Next, the jQuery `.on()` method is applied to `input`. The `.on()` method applies event handlers to selected elements (in this case, the `<input>` text field). So, when the user presses (`keypress`) a key to initiate the search, the `if` statement checks that the following items are `true`:\n\n1. The `Enter` key has been pressed: `event.which == 13` where 13 is the numeric value of the `Enter` key on the keyboard.\n2. The number of characters entered into the searchbox in greater than three. You may want to adjust this to taste as your organization may have many acronyms that are three characters or less.\n\nIf they are true, then `event.preventDefault();` makes sure that the default browser action for the `Enter` key is ignored as this would prevent our search from occurring. Finally, the full URL of the search query is constructed. The default is `http:\/\/yoursite\/search\/query:yourquery`. From here, `\/yoursite\/user\/plugins\/simplesearch\/simplesearch.php` performs the actual search and the other Twig files in the plugin list the results.\n\nNo back to our solution! If we wish to add a search button, we must:\n\n1. Add the button\n2. Make sure to apply the `.on()` method to the button, but this time, using `click` instead of `keypress`\n\nThis is achieved with the following code using the [Turret CSS Framework](http:\/\/bigfishtv.github.io\/turret\/docs\/index.html). Code snippets for other frameworks will be listed at the end.\n[prism classes=\"language-html line-numbers\"]\n<div class=\"input-group input-group-search\">\n\t<input type=\"search\" placeholder=\"Search\" value=\"{{ query }}\" data-search-input=\"{{ base_url }}{{ config.plugins.simplesearch.route}}\/query\" >\n\t<span class=\"input-group-button\">\n\t\t<button class=\"button\" type=\"submit\">Search<\/button>\n\t<\/span>\n<\/div>\n\n<script>\njQuery(document).ready(function($){\n    var input = $('[data-search-input]');\n    var searchButton = $('.button.search');\n\n    input.on('keypress', function(event) {\n        if (event.which == 13 && input.val().length > 3) {\n            event.preventDefault();\n            window.location.href = input.data('search-input') + '{{ config.system.param_sep }}' + input.val();\n        }\n    });\n\n    searchButton.on('click', function(event) {\n        if (input.val().length > 3) {\n            event.preventDefault();\n            window.location.href = input.data('search-input') + '{{ config.system.param_sep }}' + input.val();\n        }\n    });\n});\n<\/script>\n[\/prism]\nThe HTML and class attributes are specific to Turret, but the end result will be [something like this](http:\/\/bigfishtv.github.io\/turret\/docs\/index.html#input-group). We can also see that the `.on()` method has also been assigned to the search button, but it only checks that the number of characters entered into the search box is greater than three before executing the code within the `if` statement.\n\nHere is the default HTML for the text field plus a search button for a few other frameworks:\n\n[**Bootstrap**](http:\/\/getbootstrap.com\/)\n[prism classes=\"language-html line-numbers\"]\n<div class=\"input-group\">\n    <input type=\"text\" class=\"form-control\" placeholder=\"Search for...\">\n    <span class=\"input-group-btn\">\n        <button class=\"btn btn-default\" type=\"button\">Go!<\/button>\n    <\/span>\n<\/div>\n[\/prism]\n\n[**Materialize**](http:\/\/materializecss.com\/)\n[prism classes=\"language-html line-numbers\"]\n<div class=\"input-field\">\n    <input id=\"search\" type=\"search\" required>\n    <label for=\"search\"><i class=\"material-icons\">search<\/i><\/label>\n<\/div>\n[\/prism]\n\n[**Pure CSS**](http:\/\/purecss.io)\n[prism classes=\"language-html line-numbers\"]\n<form class=\"pure-form\">\n    <input type=\"text\" class=\"pure-input-rounded\">\n    <button type=\"submit\" class=\"pure-button\">Search<\/button>\n<\/form>\n[\/prism]\n\n[**Semantic UI**](http:\/\/semantic-ui.com\/)\n[prism classes=\"language-html line-numbers\"]\n<div class=\"ui action input\">\n  <input type=\"text\" placeholder=\"Search...\">\n  <button class=\"ui button\">Search<\/button>\n<\/div>\n[\/prism]\n\n## Iterating through pages and media\n\n#### Goal:\n\nYou want to access all pages and each page's associated media through PHP and\/or Twig, so that they can be looped over or otherwise manipulated by the plugin.\n\n#### Solution:\n\nUse Grav's collection-capabilities to construct a recursive index of all pages, and when indexing also gather up media-files for each page. The [DirectoryListing](https:\/\/github.com\/OleVik\/grav-plugin-directorylisting\/blob\/v2.0.0-rc.2\/Utilities.php#L64-L105)-plugin does exactly this, and builds a HTML-list using the produced tree-structure. To do this, we'll create a recursive function - or method as may be the case within a plugin's class - that goes through each page and stores it in an array. The method is recursive, because it calls itself again for each page it finds that has children.\n\nFirst things first, though, the method takes three parameters: The first is the `$route` to the page, which tells Grav where to find it; the second is the `$mode`, which tells the method whether to iterate over the page itself or its children; the third is the `$depth`, which keeps track of what level the page is on. The method initially instantiates the Page-object, then deals with depth and mode, and constructs the collection. By default, we order the pages by Date, Descending, but you could make this configurable. Then we construct an array, `$paths`, to hold each page. Since routes are unique in Grav, they are used as keys in this array to identify each page.\n\nNow we iterate over the pages, adding depth, title, and route (also kept as a value for ease-of-access). Within the foreach-loop, we also try to retrieve child-pages, and add them if found. Also, we find all media associated with the page, and add them. Because the method is recursive, it will continue looking for pages and child-pages until no more can be found.\n\nThe returned data is a tree-structure, or multidimensional-array in PHP's parlance, containing all pages and their media. This can be passed into Twig, or used within the plugin itself. Note that with very large folder-structures PHP might time out or fail because of recursion-limits, eg. folders 100 or more levels deep.\n\n[prism classes=\"language-php line-numbers\"]\n\/**\n * Creates page-structure recursively\n * @param string $route Route to page\n * @param integer $depth Reserved placeholder for recursion depth\n * @return array Page-structure with children and media\n *\/\npublic function buildTree($route, $mode = false, $depth = 0)\n{\n    $page = Grav::instance()['page'];\n    $depth++;\n    $mode = '@page.self';\n    if ($depth > 1) {\n        $mode = '@page.children';\n    }\n    $pages = $page->evaluate([$mode => $route]);\n    $pages = $pages->published()->order('date', 'desc');\n    $paths = array();\n    foreach ($pages as $page) {\n        $route = $page->rawRoute();\n        $path = $page->path();\n        $title = $page->title();\n        $paths[$route]['depth'] = $depth;\n        $paths[$route]['title'] = $title;\n        $paths[$route]['route'] = $route;\n        if (!empty($paths[$route])) {\n            $children = $this->buildTree($route, $mode, $depth);\n            if (!empty($children)) {\n                $paths[$route]['children'] = $children;\n            }\n        }\n        $media = new Media($path);\n        foreach ($media->all() as $filename => $file) {\n            $paths[$route]['media'][$filename] = $file->items()['type'];\n        }\n    }\n    if (!empty($paths)) {\n        return $paths;\n    } else {\n        return null;\n    }\n}\n[\/prism]\n\n## Custom Twig templates plugin\n\n#### Goal:\n\nRather than using theme inheritance, it's possible to create a very simple plugin that allows you to use a custom location to provide customized Twig templates. \n\n#### Solution:\n\nThe only thing you need in this plugin is an event to provide a location for your templates.  The simplest way to create the plugin is to use the `devtools` plugin.  So install that with:\n\n[prism classes=\"language-bash command-line\"]\n$ bin\/gpm install devtools\n[\/prism]\n\nAfter that's installed, create a new plugin with the command:\n\n[prism classes=\"language-bash command-line\"]\n$ bin\/plugin devtools newplugin\n[\/prism]\n\nFill in the details for the name, author, etc.  Say we call it `Custom Templates`, and the plugin will be created in `\/user\/plugins\/custom-templates`.  All you need to do now is edit the `custom-templates.php` file and put this code:\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Grav\\Plugin;\n\nuse \\Grav\\Common\\Plugin;\n\nclass CustomTemplatesPlugin extends Plugin\n{\n    \/**\n     * Subscribe to required events\n     * \n     * @return array\n     *\/\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onTwigTemplatePaths' => ['onTwigTemplatePaths', 0]\n        ];\n    }\n\n    \/**\n     * Add current directory to twig lookup paths.\n     *\/\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '\/templates';\n    }\n}\n[\/prism]\n\nThis plugin simple subscribes to the `onTwigTemplatePaths()` event, and then in that event method, it adds the `user\/plugins\/custom-templates\/templates` folder to this of paths that Twig will check.\n\nThis allows you to drop in a Twig template called `foo.html.twig` and then any page called `foo.md` will be able to use this template.\n\n! NOTE: This will add the plugin's custom template path to the **end** of the Twig template path array. This means the theme (which is always first), will have precedence over the plugin's templates of the same name.  To resolve this, simply put the plugin's template path in the front of the array by modifying the event method:\n\n[prism classes=\"language-twig line-numbers\"]\n    \/**\n     * Add current directory to twig lookup paths.\n     *\/\n    public function onTwigTemplatePaths()\n    {\n        array_unshift($this->grav['twig']->twig_paths, __DIR__ . '\/templates');\n    }\n[\/prism]\n\n## Using Cache in your own plugins\n\n#### Goal:\n\nWhen developing your own plugins, it's often useful to use Grav's cache to cache data to improve performance.  Luckily it's a very simple process to use cache in your own code.\n\n#### Solution:\n\nThis is some basic code that shows you how caching works:\n\n[prism classes=\"language-php line-numbers\"]\n    $cache = Grav::instance()['cache'];\n    $id = 'myplugin-data'\n    $list = [];\n\n    if ($data = $cache->fetch($id)) {\n        return $data;\n    } else {\n        $data = $this->gatherData();\n        $cache->save($hash, $data);\n        return $data;\n    }\n[\/prism]\n\nFirst, we get Grav's cache object, and we then try to see if our data already exists in the cache (`$data = $cache->fetch($id)`).  If `$data` exists, simply return it with no extra work needed.\n\nHowever, if the cache fetch returns null, meaning it's not cached, do some _work_ and get the data (`$data = $this->gatherData()`), and then simply save the data for next time (`$cache->save($hash, $data)`).\n\n\n\n## Learning by Example\n\nWith the abundance of plugins currently available, chances are that you will find your answers somewhere in their source code. The problem is knowing which ones to look at. This page attempts to list common plugin issues and then lists specific plugins that demonstrate how to tackle them.\n\nBefore you proceed, be sure you've familiarized yourself with [the core documentation](https:\/\/learn.getgrav.org\/plugins), especially the [Grav Lifecycle](https:\/\/learn.getgrav.org\/plugins\/grav-lifecycle)!\n\n### How do I read from and write data to the file system?\n\nGrav might be flat file, but flat file &#8800; static! There are numerous ways read and write data to the file system.\n\n  * If you just need read access to YAML data, check out the [Import plugin](https:\/\/github.com\/Deester4x4jr\/grav-plugin-import).\n\n  * The preferred interface is via the built-in [RocketTheme\\Toolbox\\File](https:\/\/learn.getgrav.org\/api#class-RocketThemeToolboxFile) interface.\n\n  * There's nothing stopping you from using [SQLite](https:\/\/sqlite.org\/) either.\n\n  * The simplest example is probably the [Comments](https:\/\/github.com\/getgrav\/grav-plugin-comments) plugin.\n\n  * Others include\n\n    * [Table Importer](https:\/\/github.com\/Perlkonig\/grav-plugin-table-importer)\n\n    * [Thumb Ratings](https:\/\/github.com\/iusvar\/grav-plugin-thumb-ratings)\n\n    * [Webmention](https:\/\/github.com\/Perlkonig\/grav-plugin-webmention)\n\n### How do I make data from a plugin available to Twig?\n\nOne way is via the `config.plugins.X` namespace. Simply do a `$this->config->set()` as seen in the following examples:\n\n  * [ipLocate](https:\/\/github.com\/Perlkonig\/grav-plugin-iplocate\/blob\/master\/iplocate.php#L82)\n  * [Count Views](https:\/\/github.com\/Perlkonig\/grav-plugin-count-views\/blob\/master\/count-views.php#L88)\n\nYou can then access that in a Twig template via `{{ config.plugins.X.whatever.variable }}`.\n\nAlternatively, you can pass variables via `grav['twig']`:\n\n  * [Blogroll](https:\/\/github.com\/Perlkonig\/grav-plugin-blogroll\/blob\/master\/blogroll.php#L43), which you can then access directly [in your template](https:\/\/github.com\/Perlkonig\/grav-plugin-blogroll\/blob\/master\/templates\/partials\/blogroll.html.twig#L32).\n\nFinally, you can inject data directly into the page header, as seen in [the Import plugin](https:\/\/github.com\/Deester4x4jr\/grav-plugin-import).\n\n### How do I inject Markdown into a page?\n\nAccording to the [Grav Lifecycle](https:\/\/learn.getgrav.org\/plugins\/grav-lifecycle), the latest event hook where you can inject raw Markdown is `onPageContentRaw`. The earliest is probably `onPageInitialized`. You can just grab `$this->grav['page']->rawMarkdown()`, munge it, and then write it back out with `$this->grav['page']->setRawContent()`. The following plugins demonstrate this:\n\n  * [Page Inject](https:\/\/github.com\/getgrav\/grav-plugin-page-inject)\n\n  * [Table Importer](https:\/\/github.com\/Perlkonig\/grav-plugin-table-importer)\n\n### How do I inject HTML into the final output?\n\nThe latest you can inject HTML, and still have your output cached, is during the `onOutputGenerated` event. You can just grab and modify `$this->grav->output`.\n\n  * Many common tasks can be accomplished using the [Shortcode Core](https:\/\/github.com\/getgrav\/grav-plugin-shortcode-core) infrastructure.\n\n  * The [Pubmed](https:\/\/github.com\/Perlkonig\/grav-plugin-pubmed) and [Tablesorter](https:\/\/github.com\/Perlkonig\/grav-plugin-tablesorter) plugins take a more brute force approach.\n\n### How do I inject assets like JavaScript and CSS files?\n\nThis is done through the [Grav\\Common\\Assets](https:\/\/learn.getgrav.org\/api#class-gravcommonassets) interface.\n\n  * [Google Analytics](https:\/\/github.com\/escopecz\/grav-ganalytics)\n\n  * [Bootstrapper](https:\/\/github.com\/getgrav\/grav-plugin-bootstrapper)\n\n  * [Gravstrap](https:\/\/github.com\/giansi\/gravstrap)\n\n  * [Tablesorter](https:\/\/github.com\/Perlkonig\/grav-plugin-tablesorter)\n\n### How do I affect the response headers and response codes?\n\nYou can use PHP's `header()` command to set response headers. The latest you can do this is during the `onOutputGenerated` event, after which output is actually sent to the client. The response code itself can only be set in the YAML header of the page in question (`http_response_code`).\n\n  * The [Graveyard](https:\/\/github.com\/Perlkonig\/grav-plugin-graveyard) plugin replaces `404 NOT FOUND` with `410 GONE` responses via the YAML header.\n\n  * The [Webmention](https:\/\/github.com\/Perlkonig\/grav-plugin-webmention) sets the `Location` header on a `201 CREATED` response.\n\n### How do I incorporate third-party libraries into my plugin?\n\nUsually, you'd incorporate other complete libraries into a `vendor` subfolder and `require` its `autoload.php` where appropriate in your plugin. (If you're using Git, consider using [subtrees](https:\/\/help.github.com\/articles\/about-git-subtree-merges\/).)\n\n  * [Shortcode Core](https:\/\/github.com\/getgrav\/grav-plugin-shortcode-core)\n\n  * [Table Importer](https:\/\/github.com\/Perlkonig\/grav-plugin-table-importer)\n\n### How do I extend Twig?\n\nThe simplest way is to follow the [Custom Twig Filter\/Function](\/cookbook\/twig-recipes\/#custom-twig-filter-function) example in the **Twig Recipes** section.\n\nAlso, [read the Twig docs](http:\/\/twig.sensiolabs.org\/doc\/advanced.html) and develop your extension. Then look at the [TwigPCRE](https:\/\/github.com\/kesslernetworks\/grav-plugin-twigpcre) plugin to learn how to incorporate it into Grav.\n\n### How do I interact with external APIs?\n\nGrav provides the [Grav\\Common\\GPM\\Response](https:\/\/learn.getgrav.org\/api#class-grav-common-gpm-response) object, but there's nothing stopping you from doing it directly if you so wish.\n\n  * [ipLocate](https:\/\/github.com\/Perlkonig\/grav-plugin-iplocate)\n\n  * [Pubmed](https:\/\/github.com\/Perlkonig\/grav-plugin-pubmed)\n"},{"title":"Admin Recipes","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cookbook\/admin-recipes","taxonomy":{"categories":["docs"],"tags":[]},"media":["countrylist.png"],"content":"This page contains an assortment of problems and their respective solutions related to Grav Admin modifications.\n\n## Add a custom YAML file\n\n#### Problem:\n\nYou want to provide a site-wide group of user-editable company fields akin to `system.yaml` or `site.yaml`, but in its own dedicated file.\n\n#### Solution:\n\nAs outlined in the [Basics \/ Configuration](\/basics\/grav-configuration#other-configuration-settings-and-files) section, the first step is to provide your new YAML data file, for example: `user\/config\/details.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\nname: 'ABC Company Limited'\naddress: '8732 North Cumbria Street, Golden, CO, 80401'\nemail:\n  general: 'hello@abc-company.com'\n  support: 'support@abc-company.com'\n  sales: 'sales@abc-company.com'\nphone:\n  default: '555-123-1111'\n[\/prism]\n\nNow you need to provide the appropriate blueprint file to define the form.  The blueprint can be provided by a plugin, but the simplest approach is to simply put the blueprint in a file: `user\/blueprints\/config\/details.yaml`\n\nIf you wanted to provide the blueprint via a plugin, you would first need to add this code to your plugin right after the class definition:\n\n[prism classes=\"language-twig line-numbers\"]\nclass MyPlugin extends Plugin\n{\n    public $features = [\n        'blueprints' => 1000,\n    ];\n    protected $version;\n    ...\n[\/prism]\n\nThen add this code to your `onPluginsInitialized()` method:\n\n[prism classes=\"language-twig line-numbers\"]\nif ($this->isAdmin()) {\n    \/\/ Store this version and prefer newer method\n    if (method_exists($this, 'getBlueprint')) {\n        $this->version = $this->getBlueprint()->version;\n    } else {\n        $this->version = $this->grav['plugins']->get('admin')->blueprints()->version;\n    }\n}\n[\/prism]\n\nThen create a file called `user\/plugins\/myplugin\/blueprints\/config\/details.yaml`\n\nThe actual blueprint file should contain a form definition that matches the configuration data:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: Company Details\nform:\n    validation: loose\n    fields:\n\n        content:\n            type: section\n            title: 'Details'\n            underline: true\n        name:\n            type: text\n            label: 'Company Name'\n            size: medium\n            placeholder: 'ACME Corp'\n\n        address:\n            type: textarea\n            label: 'Address'\n            placeholder: '555 Somestreet,\\r\\nNewville, TX, 77777'\n            size: medium\n\n        email:\n            type: array\n            label: 'Email Addresses'\n            placeholder_key: Key\n            placeholder_value: Email Address\n\n        phone:\n            type: array\n            label: 'Phone Numbers'\n            placeholder_key: Key\n            placeholder_value: Phone Number\n[\/prism]\n\nThe use of the `array` field type will let you add arbitrary email and phone fields as you need them.\n\n## Add a custom page creation modal\n\n#### Problem:\n\nYou want to provide an easy way to create a new blog post or gallery image page. We will go with the blog post for this example. Assume you want to make a blog and easily create a blog post in the correct folder by clicking a button.\n\n#### Solution:\n\nFirst of all, create the form for our modal. Create a new file: `user\/blueprints\/admin\/pages\/new_post.yaml`.\n\n[prism classes=\"language-twig line-numbers\"]\nform:\n  validation: loose\n  fields:\n    section:\n        type: section\n        title: Add Post\n\n    title:\n      type: text\n      label: Post Title\n      validate:\n        required: true\n\n    folder:\n      type: hidden\n      default: '@slugify-title'\n\n    route:\n      type: hidden\n      default: \/posts\n\n    name:\n      type: hidden\n      default: 'post'\n\n    visible:\n      type: hidden\n      default: ''\n\n    blueprint:\n      type: blueprint\n[\/prism]\n\nThis form mimics the default `Add Page` modal's form. For the **folder** as you can see we have a special value: `@slugify-title`. This means that the **folder** will default to the slugified version of the **title** form input. **route** is `\/posts` so it will put it into the `\/posts` folder.\n\n**name** is `post` so it will use the `post` page blueprint.\n\nSecond step is to edit the configuration of the Admin plugin. To add custom code to the configuration file `admin.yaml` of the Admin Plugin, create the file `user\/config\/plugins\/admin.yaml`and add this snippet:\n\n[prism classes=\"language-twig line-numbers\"]\nadd_modals:\n  -\n    label: Add Post\n    blueprint: admin\/pages\/new_post\n    show_in: bar\n[\/prism]\n\nConfiguration keys\/values available for `add_modals`:\n\n- `label` - text to be shown in the button\n- `show_in` (default: bar) (values: bar|dropdown) - whether to show the button in the **bar** or **dropdown**\n- `blueprint` - blueprint used by the template\n- `template` - template used by the modal (default: partials\/blueprints-new.html.twig)\n- `with` - data which is passed to the template\n- `link_classes` - classes to add to the link element\n- `modal_classes` - classes to add to the modal element\n\n## Add a custom select field\n\n#### Problem:\n\nYou want to add a select field with a large list of values. In this example, we will assume you want to display a list of countries.\n\n#### Solution:\n\nYou can create a static function and call the array from within your blueprint. You can code this function either in your theme's php file, or in a custom plugin.\n\nIn this example, we will add the function to the Antimatter theme, we will thus edit the `antimatter.php` file which is in the `user\/themes\/antimatter` folder.\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Grav\\Theme;\n\nuse Grav\\Common\\Theme;\n\nclass Antimatter extends Theme\n{\n    public static function countryCodes()\n    {\n        return array (\n            'AF' => 'Afghanistan',\n            'AX' => '\u00c5land Islands',\n            'AL' => 'Albania',\n            'DZ' => 'Algeria',\n            'AS' => 'American Samoa',\n            'AD' => 'Andorra',\n            'AO' => 'Angola',\n            'AI' => 'Anguilla',\n            'AQ' => 'Antarctica',\n            'AG' => 'Antigua & Barbuda',\n            'AR' => 'Argentina',\n            'AM' => 'Armenia',\n            'AW' => 'Aruba',\n            'AC' => 'Ascension Island',\n            'AU' => 'Australia',\n            'AT' => 'Austria',\n            'AZ' => 'Azerbaijan',\n            'BS' => 'Bahamas',\n            'BH' => 'Bahrain',\n            'BD' => 'Bangladesh',\n            'BB' => 'Barbados',\n            'BY' => 'Belarus',\n            'BE' => 'Belgium',\n            'BZ' => 'Belize',\n            'BJ' => 'Benin',\n            'BM' => 'Bermuda',\n            'BT' => 'Bhutan',\n        );\n    }\n}\n[\/prism]\n\n\n\n! This is a trimmed-down list for easy viewing but you can copy\/paste the full country list from [<i class=\"fa fa-github\"><\/i>umpirsky\/count-list](https:\/\/github.com\/umpirsky\/country-list\/blob\/master\/data\/en_US\/country.php)\n\nThen, we call the function from a blueprint or a frontend form definition like this:\n\n[prism classes=\"language-yaml line-numbers\"]\ncountry:\n  type: select\n  label: Country\n  data-options@: '\\Grav\\Theme\\Antimatter::countryCodes'\n[\/prism]\n\nHere is how it will look in the admin\n\n![](countrylist.png)\n"},{"title":"Twig Recipes","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cookbook\/twig-recipes","taxonomy":{"categories":["docs"],"tags":[]},"content":"This page contains an assortment of problems and their respective solutions related to Twig templating.\n\n## List the last 5 recent blog posts\n\n##### Problem:\n\nYou want to display the last 5 blog posts in a sidebar of your site so a reader can see recent blog activity.\n\n##### Solution:\n\nSimply find the `\/blog` page, obtain it's children, order them by date in a descending order, and then get the first 5 to display in a list:\n\n[prism classes=\"language-twig line-numbers\"]\n<ul>\n{% for post in page.find('\/blog').children.order('date', 'desc').slice(0, 5) %}\n    <li class=\"recent-posts\">\n        <strong><a href=\"{{ post.url }}\">{{ post.title }}<\/a><\/strong>\n    <\/li>\n{% endfor %}\n<\/ul>\n[\/prism]\n\nwhen using within pages make sure you add following configuration to the page header:\n\n[prism classes=\"language-yaml line-numbers\"]\ntwig_first: true\nprocess:\n    twig: true\n[\/prism]\n\n\n## List the blog posts for the year\n\n##### Problem:\n\nYou want to display all the blog posts that have occurred in this calendar year.\n\n##### Solution:\n\nSimply find the `\/blog` page, obtain it's children, filter by appropriate `dateRange()`, and order them by date in a descending order:\n\n[prism classes=\"language-twig line-numbers\"]\n<ul>\n{% set this_year = \"now\"|date('Y') %}\n{% for post in page.find('\/blog').children.dateRange('01\/01\/' ~ this_year, '12\/31\/' ~ this_year).order('date', 'desc') %}\n    <li class=\"recent-posts\">\n        <strong><a href=\"{{ post.url }}\">{{ post.title }}<\/a><\/strong>\n    <\/li>\n{% endfor %}\n<\/ul>\n[\/prism]\n\n## Displaying a translated month\n\n##### Problem:\n\nIn some page templates, the Twig `date` filter is used, and it does not handle locales \/ multilanguage. So even if your page is in a language different than english, it could show the month in english, if the template chooses to show the month name.\n\n##### Solution:\n\nThere are two solutions to this problem. \n\n###### First approach\n\nThe first involves the use of the Twig intl extension.\n\nInstall https:\/\/github.com\/Perlkonig\/grav-plugin-twig-extensions. Make sure you have the PHP intl extension installed.\n\nIn your twig template, instead of for example (like in the Antimatter theme) `{{ page.date|date(\"M\") }}` to `{{ page.date|localizeddate('long', 'none', 'it', 'Europe\/Rome', 'MMM') }}` (add your language and timezone here)\n\n###### Second approach\n\nLet's assume you have some language translations setup in your `user\/languages\/` folder called `en.yaml` that contains the entry:\n[prism classes=\"language-yaml\"]\nMONTHS_OF_THE_YEAR: [January, February, March, April, May, June, July, August, September, October, November, December]\n[\/prism]\n\nAnd in `fr.yaml`:\n[prism classes=\"language-yaml\"]\nMONTHS_OF_THE_YEAR: [Janvier, F\u00e9vrier, Mars, Avril, Mai, Juin, Juillet, Ao\u00fbt, Septembre, Octobre, Novembre, D\u00e9cembre]\n[\/prism]\n\nThen you have your Twig:\n\n[prism classes=\"language-html line-numbers\"]\n<li>\n    <a href='{{ post.url }}'><aside class=\"dates\">{{ 'MONTHS_OF_THE_YEAR'|ta(post.date|date('n') - 1) }} {{ post.date|date('d') }}<\/aside><\/a>\n    <a href='{{ post.url }}'>{{ post.title }}<\/a>\n<\/li>\n[\/prism]\n\nThis makes use of the Grav custom Twig filter `|ta` that stands for **Translate Array**.  In the English version, the output might be something like:\n\n[prism classes=\"language-text\"]\nAn Example Post  July 2015\n[\/prism]\n\nAnd the French:\n\n[prism classes=\"language-text\"]\nUn exemple d\u2019article Juillet 2015\n[\/prism]\n\n## Displaying page content without summary\n\n##### Problem:\n\nYou want to display the content of a page without the summary at top.\n\n##### Solution:\n\nUse the  `slice` filter to remove the summary from the page content:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set content = page.content|slice(page.summary|length) %}\n{{ content }}\n[\/prism]\n\n\n## Hiding the email to spam bots\n\n##### Problem:\n\nYou want to hide the email from spam bots\n\n##### Solution:\n\nEnable Twig processing in the page header:\n\n[prism classes=\"language-yaml line-numbers\"]\nprocess:\n    twig: true\n[\/prism]\n\nThen use the `safe_email` Twig filter:\n\n[prism classes=\"language-html line-numbers\"]\n<a href=\"mailto:{{'your.email@server.com'|safe_email}}\">\n  Email me\n<\/a>\n[\/prism]\n\n## Picking a random item from a translated array\n\n##### Problem:\n\nYou want to pick a random item from an array translated in a particular language.  For this to work, it's assumed you have your [multi-language site setup and configured](..\/..\/content\/multi-language) as outlined in the documentation.\n\n##### Solution:\n\nLet's also assume you have some language translations setup in your `user\/languages\/` folder called `en.yaml` that contains the entry:\n\n[prism classes=\"language-text\"]\nFRUITS: [Banana, Cherry, Lemon, Lime, Strawberry, Raspberry]\n[\/prism]\n\nAnd in `fr.yaml`:\n\n[prism classes=\"language-text\"]\nFRUITS: [Banane, Cerise, Citron, Citron Vert, Fraise, Framboise]\n[\/prism]\n\nThen you have your Twig:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set langobj  = grav['language'] %}\n{% set curlang  = langobj.getLanguage() %}\n{% set fruits   = langobj.getTranslation(curlang,'FRUITS',true) %}\n<span data-ticker=\"{{ fruits|join(',') }}\">{{ random(fruits) }}<\/span>\n[\/prism]\n\n## Displaying an image uploaded in a file field\n\n##### Problem\n\nYou added a `file` field in your custom blueprint, and you want to display an image added in this field.\n\n##### Solution\n\nAs the `file` field allows for multiple images to be uploaded, it generates two nested objects in your frontmatter, the first object is the list of the uploaded images, the nested object within is a group of property\/value for the given image.\n\n_Note that in the case where you would want your user to only select a single image, it could be easier to use the `filepicker` field, that store a single object with the selected images properties._\n\nIf you have a single image, you can display it in your template by using:\n\n[prism classes=\"language-twig\"]\n{{ page.media[header.yourfilefield|first.name] }}\n[\/prism]\n\nIf you allowed your user to upload multiple images, your twig could look like this:\n\n[prism classes=\"language-twig line-numbers\"]\n{% for imagesuploaded in page.header.yourfilefield %}\n{{ page.media[imagesuploaded.name] }}\n{% endfor %}\n[\/prism]\n\n## Displaying an image picked in a mediapicker field\n\n##### Problem\n\nYou added a `mediapicker` field in your custom blueprint, and you want to display the image selected.\n\n##### Solution\n\nA `mediapicker` field can be added to your blueprint like below:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.myimage:\n  type: mediapicker\n  folder: 'self@'\n  label: Select a file\n  preview_images: true\n[\/prism]    \n\nThe `mediapicker` field store the path to the image as a string such as `\/home\/background.jpg`\nIn order to access this image with the page media functionality, you have to split this string and get:\n - the path to the page where this image is stored\n - the name of the image.\n\nYou can do this via twig by using the snippet below:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set image_parts = pathinfo(header.myimage) %}\n{% set image_basename = image_parts.basename %}\n{% set image_page = image_parts.dirname == '.' ? page : page.find(image_parts.dirname) %}\n\n{{ image_page.media[image_basename].html() }}\n[\/prism]\n\n## Custom Twig Filter\/Function\n\n##### Problem\n\nSometimes you need some logic in Twig that can only be done in PHP, so the best solution is to create a custom Twig Filter or Function.  A filter is usually appended to a string in the format: `\"some string\"|custom_filter` and a function can take a string, or any other variable type: `custom_function(\"some string\")`, but essentially they are very similar.\n\nYou can also pass extra parameters like: `\"some string\"|custom_filter('foo', 'bar')`, where the extra parameters can be used inside the filter. And the function variation would be: `custom_function(\"some string\", 'foo', 'bar')`.\n\nFor this example we'll create a simple Twig filter to count the takes a string and splits it into chunks separated by a delimiter. This is particular useful for things like credit card numbers, license keys etc.\n\n##### Solution\n\nThe best way to add this extra functionality is to add the logic in your custom plugin, although adding it in your theme's php file is also an option.  We'll use a plugin in this example for simplicity.  First you need to install the devtools plugin to make creating a plugin a simple wizard-based process:\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm install devtools\n[\/prism]\n\nNext you need to create your new custom plugin, then fill in your details when prompted.\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-12\"]\nbin\/plugin devtools new-plugin\n\nEnter Plugin Name: ACME Twig Filters\nEnter Plugin Description: Plugin for custom Twig filters\nEnter Developer Name: ACME, Inc.\nEnter GitHub ID (can be blank):\nEnter Developer Email: hello@acme.com\n\nSUCCESS plugin ACME Twig Filters -> Created Successfully\n\nPath: \/Users\/joe\/grav\/user\/plugins\/acme-twig-filters\n[\/prism]\n\nBy default this skeleton framework for a new plugin will add some dummy test to your page via the `onPageContentRaw()` event.  You will first need to replace this functionality with code that listens to the `onTwigInitialized()` event:\n\n[prism classes=\"language-php line-numbers\"]\n    public function onPluginsInitialized()\n    {\n        \/\/ Don't proceed if we are in the admin plugin\n        if ($this->isAdmin()) {\n            return;\n        }\n\n        \/\/ Enable the main event we are interested in\n        $this->enable([\n            'onTwigInitialized' => ['onTwigInitialized', 0]\n        ]);\n    }\n\n    \/**\n     * @param Event $e\n     *\/\n    public function onTwigInitialized(Event $e)\n    {\n\n    }\n[\/prism]\n\nFirst we need to register the filter in the `onTwigInitialized()` method:\n\n[prism classes=\"language-php line-numbers\"]\n    \/**\n     * @param Event $e\n     *\/\n    public function onTwigInitialized(Event $e)\n    {\n        $this->grav['twig']->twig()->addFilter(\n            new \\Twig_SimpleFilter('chunker', [$this, 'chunkString'])\n        );\n    }\n[\/prism]\n\nThe first parameter to the method registers the `chunker` as the filter name, and the `chunkString` as the PHP method where the logic occurs.  So we need to create this next:\n\n[prism classes=\"language-php line-numbers\"]\n    \/**\n     * Break a string up into chunks\n     *\/\n    public function chunkString($string, $chunksize = 4, $delimiter = '-')\n    {\n        return (trim(chunk_split($string, $chunksize, $delimiter), $delimiter));\n    }\n[\/prism]\n\nNow you can try it out in your Twig templates like this:\n\n[prism classes=\"language-twig\"]\n{{ \"ER27XV3OCCDPRJK5IVSDME6D6OT6QHK5\"|chunker }}\n[\/prism]\n\nWhich would produce:\n\n[prism classes=\"language-text\"]\nER27-XV3O-CCDP-RJK5-IVSD-ME6D-6OT6-QHK5\n[\/prism]\n\nor you can pass extra params:\n\n[prism classes=\"language-twig\"]\n{{ \"ER27XV3OCCDPRJK5IVSDME6D6OT6QHK5\"|chunker(8, '|') }}\n[\/prism]\n\nwhich would produce:\n\n[prism classes=\"language-text\"]\nER27XV3O|CCDPRJK5|IVSDME6D|6OT6QHK5\n[\/prism]\n\nLastly if you want this to be available via a function and not just a filter, you can simply register a Twig function with the same name in the `onTwigInitialized()` method:\n\n[prism classes=\"language-php line-numbers\"]\n    \/**\n     * @param Event $e\n     *\/\n    public function onTwigInitialized(Event $e)\n    {\n        $this->grav['twig']->twig()->addFilter(\n            new \\Twig_SimpleFilter('chunker', [$this, 'chunkString'])\n        );\n        $this->grav['twig']->twig()->addFunction(\n            new \\Twig_SimpleFunction('chunker', [$this, 'chunkString'])\n        );\n    }\n[\/prism]\n\nAnd then you can use the function syntax:\n\n[prism classes=\"language-twig line-numbers\"]\n{{ chunker(\"ER27XV3OCCDPRJK5IVSDME6D6OT6QHK5\", 8, '|') }}\n[\/prism]\n\n\n\n"},{"title":"General Recipes","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cookbook\/general-recipes","taxonomy":{"categories":["docs"],"tags":[]},"media":["vertical_menu.png"],"content":"This page contains an assortment of problems and their respective solutions related to Grav in general.\n\n## Change the PHP CLI version\n\nSometimes on the terminal, the PHP version is different than the PHP version used by the web server.\n\nYou can check the PHP version running in the CLI by running the command `php -v`.\nIf the PHP version is less than 5.5.9, Grav won't run as it requires at least PHP 5.5.9.\n\nHow to fix?\n\nYou need to enter some configuration to `.bashrc`, or to `.bash_profile` in your user home folder. Create those files if you don't already have them in the user folder. They are hidden files, so you might have to do `ls -al` to show them. Once the configuration is added, you'll need to start a new terminal session for those settings to apply.\n\nAn example configuration could be:\n\n[prism classes=\"language-bash command-line\"]\nalias php=\"\/usr\/local\/bin\/php53\"\nexport PHP_PATH = \"\/usr\/local\/bin\/php53\"\n[\/prism]\n\nAn alternative way is to add:\n\n[prism classes=\"language-bash line-numbers\"]\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~\/.bashrc ]; then\n        . ~\/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=\/usr\/local\/lib\/php-5.5\/bin:$PATH:$HOME\/bin\n\nexport PATH\n[\/prism]\n\nThe exact path of course depends on how your system is set up, where it stores the more recent PHP version binaries. That might be something you find in the Hosting documentation, or you can ask your hosting setup if you do not find it anywhere.\n\nYou could also try looking in the `php-something` files or folders under the `\/usr\/local\/bin` or `\/usr\/local\/lib` folders, with `ls -la \/usr\/local\/lib\/ |grep -i php`.\n\n## Creating a simple gallery\n\n##### Problem:\n\nA common web design requirement is to have a gallery of some kind rendered on a page.  This could be to display photographs of your new family pet, a portfolio of previous design work, or even a basic catalog of some products you wish to display and sell to your users.  In this example, we'll assume you want to just display a bunch of photographs with a caption below.  This can of course be adapted to other uses also.\n\n##### Solution:\n\nThe simplest way to provide a solution for this problem is to make use of Grav's [media functionality](..\/..\/content\/media) which allows a page to be aware of the images available in its folder.\n\nLet's assume you have a page you've called `gallery.md` and also you have a variety of images in the same directory. The filenames themselves are not important as we will just iterate over each of the images.  Because we want to have extra data associated with each image, we will include a `meta.yaml` file for each image.  For example, we have a few images:\n\n[prism classes=\"language-yaml line-numbers\"]\n- fido-playing.jpg\n- fido-playing.jpg.meta.yaml\n- fido-sleeping.jpg\n- fido-sleeping.jpg.meta.yaml\n- fido-eating.jpg\n- fido-eating.jpg.meta.yaml\n- fido-growling.jpg\n- fido-growling.jpg.meta.yaml\n[\/prism]\n\nEach of the `.jpg` files are a relatively good size that is appropriate for a full-size version, 1280px x 720px in size. Each of the `meta.yaml` files contain a few key entries, let's look at `fido-playing.jpg.meta.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: Fido Playing with his Bone\ndescription: The other day, Fido got a new bone, and he became really captivated by it.\n[\/prism]\n\nYou have **complete control** over what you put in these meta files, they can be absolutely anything you need.\n\nNow we need to display these images in reverse chronological order so the newest images are shown first and display them.  Because our page is called `gallery.md` we should create an appropriate `templates\/gallery.html.twig` to contain the rendering logic we need:\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n    {{ page.content }}\n\n    <ul>\n    {% for image in page.media.images %}\n    <li>\n        <div class=\"image-surround\">\n            {{ image.cropResize(300,200).html }}\n        <\/div>\n        <div class=\"image-info\">\n            <h2>{{ image.meta.title }}<\/h2>\n            <p>{{ image.meta.description }}<\/p>\n        <\/div>\n    <\/li>\n    {% endfor %}\n    <\/ul>\n\n{% endblock %}\n[\/prism]\n\nFor a modular gallery to be displayed inside another page, remove the following code from the Twig file in order to make it work:\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n    {{ page.content }}\n[\/prism]\n\nand\n\n[prism classes=\"language-twig\"]\n{% endblock %}\n[\/prism]\n\nBasically, this extends the standard `partials\/base.html.twig` (assuming your theme has this file), it then defines the `content` block and provides the content for it.  The first thing we do is echo out any `page.content`.  This would be the content of the `gallery.md` file, so it could contain a title, and a description of this page.\n\nThe next section simply loops over all the media of the page that are **images**.  We are outputting these in an unordered list to make the output semantic, and easy to style with CSS.  we are assigning each image the variable name `image` and then we are able to perform a simple `cropResize()` method to resize the image to something suitable, and then below it, we provide an information section with the `title` and `description`.\n\nYou could make a more advanced gallery-implementation by using creating filters for camera-data, with the [EXIF](\/themes\/twig-filters-functions#exif)-function.\n\n## Render content in columns\n\n##### Problem:\n\nA question that has come up several times is how to quickly render a single page in multiple columns.\n\n##### Solution:\n\nThere are many potential solutions, but one simple solution is to divide up your content into logical sections using a delimiter such as the HTML `<hr \/>` or *thematic break* tag.  In markdown, this is represented by 3 or more dashes or `---`.  We simply create our content and separate our sections of content with these dashes:\n\n**columns.md**\n[prism classes=\"language-md line-numbers\"]\n---\ntitle: 'Columns Page Test'\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas arcu leo, hendrerit ut rhoncus eu, dictum vitae ligula. Suspendisse interdum at purus eget congue. Aliquam erat volutpat. Proin ultrices ligula vitae nisi congue sagittis. Nulla mollis, libero id maximus elementum, ante dolor auctor sem, sed volutpat mauris nisl non quam.\n\n---\nPhasellus id eleifend risus. In dui tellus, dignissim id viverra non, convallis sed ante. Suspendisse dignissim, felis vitae faucibus dictum, dui mi tempor lectus, non porta elit libero quis orci. Morbi porta neque quis magna imperdiet hendrerit.\n\n---\nPraesent eleifend commodo purus, sit amet viverra nunc dictum nec. Mauris vehicula, purus sed convallis blandit, massa sem egestas ex, a congue odio lacus non quam. Donec vitae metus vitae enim imperdiet tempus vitae sit amet quam. Nam sed aliquam justo, in semper eros. Suspendisse magna turpis, mollis quis dictum sit amet, luctus id tellus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aenean eu rutrum mi.\n[\/prism]\n!! Note: the extra line after the column and before the `---`.  This is because if you put a triple dash right underneath text, it's actually interpreted as a header.\n\nThen we simply need to render this content with a `columns.html.twig` template (as the page file was named `columns.md`):\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n    <table>\n        <tr>\n            {% for column in page.content|split('<hr \/>') %}\n            <td>{{ column }}<\/td>\n            {% endfor %}\n        <\/tr>\n    <\/table>\n{% endblock %}\n[\/prism]\n\nYou can see how the content is being **split** by the `<hr \/>` tag and converted into an array of 3 columns which we loop over and render.  In this example we are using a simple HTML table tag, but you could use anything you wish.\n\n## Really simple css image slider\n\n##### Problem:\n\nYou need an image slider without any overhead.\n\n##### Solution:\n\nThis recipe is for 4 images and a page called `slider.md`! Simply put the images where the .md file is. Next, create a new Twig template and extend `base.html.twig`.\n\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n\n    <div id=\"slider\">\n        <figure>\n        {% for image in page.media.images %}\n            {{ image.html }}\n        {% endfor %}\n        <\/figure>\n    <\/div>\n\n    {{ page.content }}\n{% endblock %}\n[\/prism]\n\nFor modular slider, please remove the\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n[\/prism]\n\nand\n\n[prism classes=\"language-twig\"]\n{% endblock %}\n[\/prism]\n\nfrom the previous Twig file.\n\nTime for css stuff. Add this to your _custom.scss\n\n[prism classes=\"language-scss line-numbers\"]\n@keyframes slidy {\n    0% { left: 0%; }\n    20% { left: 0%; }\n    25% { left: -100%; }\n    45% { left: -100%; }\n    50% { left: -200%; }\n    70% { left: -200%; }\n    75% { left: -300%; }\n    95% { left: -300%; }\n    100% { left: -400%; }\n}\nbody { margin: 0; }\ndiv#slider {\n    overflow: hidden;\n    margin-top: -3rem;\n    max-height: 30rem;\n}\ndiv#slider figure img { width: 20%; float: left; }\ndiv#slider figure {\n    position: relative;\n    width: 500%;\n    margin: 0;\n    left: 0;\n    animation: 30s slidy infinite;\n}\n[\/prism]\n\nThat's all.\n\n## Wrapping markdown into html\n\nOn some pages you might want to wrap parts of the markdown content into some custom html code instead of creating a new Twig template.\n\nTo achieve this you follow these steps:\n\nin your system configuration file `user\/config\/system.yaml` make sure to activate the markdown extra option:\n\n[prism classes=\"language-yaml line-numbers\"]\npages:\n  markdown:\n    extra: true\n[\/prism]\n\nin your wrapper tag make sure to add the parameter `markdown=\"1\"` to activate processing of markdown content:\n\n[prism classes=\"language-md line-numbers\"]\n<div class=\"myWrapper\" markdown=\"1\">\n# my markdown content\n\nthis content is wrapped into a div with class \"myWrapper\"\n<\/div>\n[\/prism]\n\ndone.\n\n## Add a recent post widget to your sidebar\n\n#### Problem:\n\nYou want to create a recent post widget on the sidebar\n\n#### Solution:\n\nIt's always possible to create a partial template extending `partials\/base.html.twig` (see other solutions on this page), but here you're going to create a full template instead. The final code for your Twig template is shown below: \n\n[prism classes=\"language-twig line-numbers\"]\n<div class=\"sidebar-content recent-posts\">\n    <h3>Recent Posts<\/h3>\n    {% for p in page.find('\/blog').children.order('date', 'desc').slice(0, 5) %}\n        {% set bannerimage = p.media['banner.jpg'] %}\n        <div class=\"recent-post\">\n            {% if bannerimage %}\n                <div class=\"recent-post-image\">{{ bannerimage.cropZoom(60,60).quality(60) }}<\/div>\n            {% else %}\n                <div class=\"recent-post-image\"><img src=\"{{ url('theme:\/\/images\/logo.png') }}\" width=\"60\" height=\"60\"><\/div>\n            {% endif %}\n            <div class=\"recent-post-text\">\n                <h4><a href=\"{{p.url}}\">{{ p.title }}<\/a><\/h4>\n                <p>{{ p.date|date(\"M j, Y\")}}<\/p>\n            <\/div>\n        <\/div>\n    {% endfor %}\n<\/div>\n[\/prism]\n\nAll this code does is sort the children (blog posts) of the `\/blog` page by decending date order. It then takes the first five blog posts using the `slice` Twig filter. By the way, `slice(n,m)` takes elements from `n` to `m-1`. In this example, any blog posts that have a banner image have been named `banner.jpg`. This is set in a variable `bannerimage`. If `bannerimage` exists, it is shrunk down to a `60px x 60px` box and will appear to the left of the post title text and date. If it does not exist, the website logo is resized to `60px x 60px` and placed to the left of the title and date text instead.\n\nThe CSS for this widget is listed below:\n\n[prism classes=\"language-css line-numbers\"]\n.sidebar-content .recent-post {\n    margin-bottom: 25px;\n    padding-bottom: 25px;\n    border-bottom: 1px solid #F0F0F0;\n    float: left;\n    clear: both;\n    width: 100%;\n}\n\n.sidebar-content [class~='recent-post']:last-of-type {\n    border-bottom: none;\n}\n\n.sidebar-content .recent-post .recent-post-image,\n.sidebar-content .recent-post .recent-post-text {\n    float: left;\n}\n\n.sidebar-content .recent-post .recent-post-image {\n    margin-right: 10px;\n}\n\n.sidebar-content .recent-post .recent-post-text h4 {\n    font-family: serif;\n    margin-bottom: 10px;\n}\n\n.sidebar-content .recent-post .recent-post-text h4 a {\n    color: #193441;\n}\n\n.sidebar-content .recent-post .recent-post-text p {\n    font-family: Arial, sans-serif;\n    font-size: 1.5rem;\n    color: #737373;\n    margin: 0;\n}\n[\/prism]\nAdjust the spacing between recent post items, font-family, font-size and font-weight to taste.\n\n## Create a private area\n\nGrav makes it very easy to create a private area on a website.\nIt all works thanks to the Login Plugin.\n\n## Require users to login prior to access a part of the site\n\nIf you don\u2019t have it already, install it through the Admin Panel or using the GPM command line utility.\n\nNext, open a page in Admin, switch to expert mode and in the FrontMatter section add\n\n[prism classes=\"language-yaml line-numbers\"]\naccess:\n    site.login: true\n[\/prism]\n\nUsers accessing the page will need to login prior to see the page content.\n\nNotice that the permission does not extend by default to subpages. To do so, from the Login plugin configuration enable \"Use parent access rules\".\n\nThis option allows you to create extended private areas without worrying further about access level. Just put all under a page which has a restriction on access.\n\n## Require special permissions to view one or more pages\n\nSimilarly to the above process, you can assign any permission you want to a page. You can even come up with your own permission names.\n\nFor example:\n\n[prism classes=\"language-yaml line-numbers\"]\naccess:\n    site.onlybob: true\n[\/prism]\n\nNext, add the `site.onlybob` permission to Bob, in its `bob.yaml` user file under the `user\/accounts` folder:\n\n[prism classes=\"language-yaml line-numbers\"]\naccess:\n    site.onlybob: true\n[\/prism]\n\n## Use group-based permissions\n\nYou can also assign users to a group, and assign permissions to the group instead of to individual users. Users will inherit the group permissions.\n\nAdd a `user\/config\/groups.yaml` file, for example with this content:\n\n[prism classes=\"language-yaml line-numbers\"]\nregistered:\n  readableName: 'Registered Users'\n  description: 'The group of registered users'\n  access:\n    site:\n      login: true\npremium:\n  readableName: 'Premium Members'\n  description: 'The group of premium members'\n  access:\n    site:\n      login: true\n      paid: true\n[\/prism]\n\nNow assign users to a group by adding\n\n[prism classes=\"language-yaml line-numbers\"]\ngroups:\n      - premium\n[\/prism]\n\nto their yaml user file, under `user\/accounts`\n\nNow users belonging to the `premium` group will be allowed to access pages with a `site.paid` permission.\n\n## Add JavaScript to the footer\n\nIn many cases you'd want \"some\" javascript to be added to the footer instead of the page header, to be loaded after the content has been rendered.\n\nA good example of doing this is to check the Antimatter theme.\n\nAntimatter's `templates\/partials\/base.html.twig` defines a bottom block for js by calling `{{ assets.js('bottom') }}`\n\n[prism classes=\"language-twig line-numbers\"]\n{% block bottom %}\n    {{ assets.js('bottom') }}\n{% endblock %}\n[\/prism]\n\nYou can add assets in that block in Twig for example by calling\n\n`{% do assets.addJs('theme:\/\/js\/slidebars.min.js', {group: 'bottom'}) %}`\n\nor in PHP by calling\n\n`$this->grav['assets']->addJs($this->grav['base_url'] . '\/user\/plugins\/yourplugin\/js\/somefile.js', ['group' => 'bottom']);`\n\n## Override the default logs folder location\n\nThe default location for the logs output of Grav is simply called `logs\/`.  Unfortunately, there are instances where that `logs\/` folder is already used or is off-limits.  Grav's flexible stream system allows the ability to customize the locations of these folders.\n\nFirst, you need to create your new folder.  In this example, we'll create a new folder in the root of your Grav install called `grav-logs\/`.  Then create a new root-level file called `setup.php` and paste the following code:\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nuse Grav\\Common\\Utils;\n\n\nreturn [\n    'streams' => [\n        'schemes' => [\n            'log' => [\n               'type' => 'ReadOnlyStream',\n               'prefixes' => [\n                   '' => [\"grav-logs\"],\n               ]\n            ]\n        ]\n    ]\n];\n[\/prism]\n\nThis basically overrides the `log` stream with the `grav-logs\/` folder rather than the default `logs\/` folder as defined in `system\/src\/Grav\/Common\/Config\/Setup.php`.\n\n## Split vertical menu system\n\nTo create a vertical, collapsible, hierarchical menu of pages you need a Twig-loop, a bit of CSS, and a bit of JavaScript. The final result will, when using the Antimatter-theme, look like this:\n\n![Vertical Menu](vertical_menu.png)\n\nLet's start with Twig:\n\n[prism classes=\"language-twig line-numbers\"]\n<ol class=\"tree\">\n    {% for page in pages.children.visible %}\n        {% if page.children.visible is empty %}\n            <li class=\"item\">\n            <a href=\"{{ page.url }}\">{{ page.title }}<\/a>\n        {% else %}\n            <li class=\"parent\">\n            <a href=\"javascript:void(0);\">{{ page.title }}<\/a>\n            <ol>\n                {% for child in page.children.visible %}\n                    {% if child.children.visible is empty %}\n                        <li class=\"item\">\n                        <a href=\"{{ child.url }}\">{{ child.title }}<\/a>\n                    {% else %}\n                        <li class=\"parent\">\n                        <a href=\"javascript:void(0);\">{{ child.title }}<\/a>\n                        <ol>\n                            {% for subchild in child.children.visible %}\n                                <li><a href=\"{{ subchild.url }}\">{{ subchild.title }}<\/a><\/li>\n                            {% endfor %}\n                        <\/ol>\n                    {% endif %}\n                    <\/li>\n                {% endfor %}\n            <\/ol>\n        {% endif %}\n        <\/li>\n    {% endfor %}\n<\/ol>\n[\/prism]\n\nThis creates an ordered list which iterates over all visible pages within Grav, going three levels deep to create a structure for each level. The list wrapped around the entire structure has the class *tree*, and each list-item has the class *parent* if it contains children or *item* if it does not.\n\nClicking on a parent opens the list, whilst regular items link to the page itself. You could add this to virtually any Twig-template in a Grav theme, provided that Grav can access the visible pages.\n\nTo add some style, we add some CSS:\n\n[prism classes=\"language-css line-numbers\"]\n<style>\nol.tree li {\n    position: relative;\n}\nol.tree li ol {\n    display: none;\n}\nol.tree li.open > ol {\n    display: block;\n}\nol.tree li.parent:after {\n    content: '[+]';\n}\nol.tree li.parent.open:after {\n    content: '';\n}\n<\/style>\n[\/prism]\n\nThis should generally be placed before the Twig-structure, or ideally be streamed into the [Asset Manager](\/themes\/asset-manager) in your theme. The effect is to add **[+]** after each parent-item, indicating that it can be opened, which disappears when opened.\n\nFinally, let's add a bit of JavaScript to [handle toggling](http:\/\/stackoverflow.com\/a\/36297446\/603387) the *open*-class:\n\n[prism classes=\"language-js line-numbers\"]\n<script type=\"text\/javascript\">\nvar tree = document.querySelectorAll('ol.tree a:not(:last-child)');\nfor(var i = 0; i < tree.length; i++){\n    tree[i].addEventListener('click', function(e) {\n        var parent = e.target.parentElement;\n        var classList = parent.classList;\n        if(classList.contains(\"open\")) {\n            classList.remove('open');\n            var opensubs = parent.querySelectorAll(':scope .open');\n            for(var i = 0; i < opensubs.length; i++){\n                opensubs[i].classList.remove('open');\n            }\n        } else {\n            classList.add('open');\n        }\n    });\n}\n<\/script>\n[\/prism]\n\nThis should always be placed **after** the Twig-structure, also ideally in the [Asset Manager](\/themes\/asset-manager).\n\n## Dynamically style one or more pages\nYou can dynamically style different pages\/posts in your Grav site (independent of template file assignment) by customizing a Theme's Twig file to apply a CSS class passed as a variable in a page's FrontMatter.\n\nYou can style different posts\/pages in your Grav site by two methods:\n\n1. If you are using the Antimatter theme, you can use the existing `body_classes` header property to set your custom CSS class for that page\n2. If you are using a theme not based on Antimatter (or not implementing `body_classes` as it does), you can customize a Theme's Twig file to apply a CSS class passed as a variable in a page's header property\n\nFor example, in your theme's `base.html.twig` file or a more specific template such as `page.html.twig` file you could add a class to the display of page content, such as:\n\n[prism classes=\"language-html line-numbers\"]\n<div class=\"{{ page.header.body_classes }}\">\n...\n<\/div>\n[\/prism]\n\nThen, for each page you wish to have a unique style, you would add the following header property (assuming you have defined a CSS class for `featurepost`):\n\n[prism classes=\"language-yaml line-numbers\"]\nbody_classes: featurepost\n[\/prism]\n\nNote: This is how the Antimatter theme applies page-specific classes, and so it's a good standard to follow.\n\n## Migrate an HTML theme to Grav\n\nMigrating an HTML theme to Grav is a common task. Here is a hands-on step-by-step process that can be used to achieve this goal.\n\nYou probably have downloaded the theme, and it's composed of several HTML files. Let's start with simply making Grav load the home page. No custom content, just replicate the HTML theme, but within a Grav structure.\n\nFirst, [use the Grav Devtools plugin](\/themes\/theme-tutorial) to create a blank theme, and set Grav to use it in the System settings.\n\nCreate a `templates\/home.html.twig` Twig template inside the theme\u2019s templates folder. This will represent a template specific for the home page. Usually, the home is a unique page on the site, so it probably deserves a dedicated Twig file.\n\nCopy the HTML code from the template's home page, starting at `<html>` and ending at `<\/html>` to your new `home.html.twig` file.\n\nNow, move all the HTML theme assets (images, CSS, JS) into your theme folder. You can keep the existing theme folder structure, or change it.\n\nCreate a `pages\/01.home\/home.md` empty file. Now point your browser to yoursite.com\/home: it should show up the content, but the CSS, JS and images will not be loaded, probably because the theme has them hardcoded as `\/img\/*` or `\/css\/*` links. \n\n#### Adding the correct asset links\n\nIn Grav the links are broken because they point to the home route, so instead of pointing to `\/user\/themes\/mytheme\/img`, they point to `\/img` in the Grav root. Since it's best to keep all theme-related assets inside the theme, we need to point Grav to the correct location.\n\nSearch within the page for assets and change the images references from `img\/*.*` to `<img src=\"{{ url('theme:\/\/img\/*.*', true) }}\" \/>`.\n\nStylesheets require a bit more thought as there\u2019s an asset pipeline we\u2019ll want to enable at some point, so we move them to a stylesheets block within the `<head>` tag.\n\nExample:\n[prism classes=\"language-twig line-numbers\"]\n    {% block stylesheets %}\n        {% do assets.addCss('theme:\/\/css\/styles.min.css', 100) %}\n    {% endblock %}\n    {{ assets.css() }}\n[\/prism]\n\nThe same applies to JavaScript files, with the additional requirement that some JS is loaded in the footer.\n\nExample:\n[prism classes=\"language-twig line-numbers\"]\n    {% block javascripts %}\n        {% do assets.addJs('theme:\/\/js\/custom.js') %}\n        {% do assets.addJs('jquery', 101) %}\n    {% endblock %}\n    {{ assets.js() }}\n[\/prism]\n\nThe page changes should now be shown in your Browser. If not, make sure that the pages cache and the twig cache are disabled in the Grav system configuration settings.\n\nThis is just the start. Now you might need to add more pages, and come up with better ways to present the content of your pages using the header FrontMatter, and custom Twig that processes usual building blocks need: the home page testimonials, reviews, the product features and so on.\n\n#### Adding another page\n\nTo add another page, the process is similar. For example, let's say you want to next create the blog page. \nRepeat the process to add a `templates\/blog.html.twig` file, paste the HTML source, and create a `pages\/02.blog\/blog.md` page. \n\nNow, while images links inside the pages still need to be migrated to Grav's assets syntax (or simply change the path), you don't want to repeat the same work you did above for CSS and JS assets. This should be reused across the site.\n\n#### Shared Elements\n\nIdentify the common parts of the pages (header and footer), and move them to the `templates\/partials\/base.html.twig` file.\n\nEach page template then needs to extend `partials\/base.html.twig` (https:\/\/github.com\/getgrav\/grav-theme-antimatter\/blob\/develop\/templates\/default.html.twig#L1) and just add their unique content. \n\n## Add an asset to a specific page\n\n#### Problem\n\nYou need to add an asset to a specific template on your theme.\n\n#### Solution\n\nMost of the time, your assets will be added inside a twig block in your base template like below. \n\n[prism classes=\"language-twig line-numbers\"]\n{% block javascripts %}\n{% do assets.addJs('theme:\/\/js\/jquery.js', 91) %}\n{% endblock %}\n{{ assets.js() }}\n[\/prism]\n\nIn order to add your asset, you have to extend this block in your template and call `{{ parent() }}` which will get the assets already added in your base template.\nLet's say you want to add a \"gallery.js\" file on your \"Portfolio Gallery\" page. \nEdit your template and add your asset with the `{{ parent() }}`.\n\n[prism classes=\"language-twig line-numbers\"]\n{% block javascripts %}\n     {% do assets.addJs('theme:\/\/js\/gallery.js', 100) %}\n     {{ parent() }}\n{% endblock %}\n[\/prism]\n\n## Reuse page or modular content on another page\n\n#### Problem:\nYou have many pages or modules and would like to share the same content block on more than one page without having to maintain multiple separate instances of the same text.\n\n#### Solution:\n\nThis is a very simple straightforward method which does not require a plugin and can be used within the admin panel.\n\n**Note:** There is also plugin [Grav Page Inject Plugin](https:\/\/github.com\/getgrav\/grav-plugin-page-inject) for this functionality which may be suitable for more advanced scenarios.\n\nFirst, create a new template file to act as a placeholder for the content - it can have any name, this one is named \"modular_reuse\" and will be in the stored in your theme's templates\/modular_ folder for this example but can be stored anywhere in the templates folder.\n \n\n`modular_reuse.html.twig` contains only one line:\n[prism classes=\"language-twig line-numbers\"]\n{{ page.content }}\n[\/prism]\nNext, create a new modular page in the admin panel where this content should be displayed using this new \"modular reuse\" template. The new page name can be anything you like as it will not be displayed - the original page title will be output.\n\nThe content of the page is just one line: \nPage:\n[prism classes=\"language-twig line-numbers\"]\n{% include 'modular_reuse.html.twig' with {'page': page.find('\/test-page\/amazing-offers')} %}\n[\/prism]\nModular:\n[prism classes=\"language-twig line-numbers\"]\n{% include 'modular\/modular_reuse.html.twig' with {'page': page.find('\/test-page\/_amazing-offers')} %}\n[\/prism]\n\nWhat comes after \"include\" is where the template from step one is stored, probably in the `templates` folder for pages in the `templates\/modular` folder for modulars.\n\nAfter page.find should come the actual link to the original content that you want to reuse. Modular content starts with an _ but pages do not. The easiest way to find the correct link is to open the page in the admin panel and copy the url after the word admin.\n\nThe final page should look like this:\n[prism classes=\"language-twig line-numbers\"]\n---\ntitle: 'Modular Reuse Example'\n---\n\n{% include 'modular\/modular_reuse.html.twig' with {'page': page.find('\/test-page\/_amazing-offers')} %}\n[\/prism]\n\nNow \"amazing offers\" can be displayed in multiple places but only needs to be updated once.\n\n## Make a custom anti-spam field for your contact form\n\n#### Problem:\n\nNormal methods of spam-prevention, like the honeypot-field, is bypassed by certain spam-bots.\n\n#### Solution:\n\nMake it harder for the bot to guess what it can and can't fill it in, when filling out the contact form. Put simply, ask a question the user won't fail to answer, but whose answers are hard for a bot to understand the significance of. In your Markdown-file with [Form-data](https:\/\/learn.getgrav.org\/forms\/forms\/example-form), add this field:\n\n[prism classes=\"language-yaml line-numbers\"]\n    - name: personality\n      type: radio\n      label: What is five times eight?\n      options:\n        alaska: 32\n        oklahoma: 40\n        california: 48\n      validate:\n        required: true\n        pattern: \"^oklahoma$\"\n        message: Not quite, try that math again.\n[\/prism]\n\nThe question should be something simple, but with multiple simple wrong answers accompanying it. What matters is the order of the answers. The right answer should never be the first one; aim for somewhere in the middle. It's important to randomize the values behind the answers (labels) yourself, so a database of associated values and answers won't help in answering.\n\nBots get smarter all the time, but they tend to forego trying to answer the same question several times if the first attempt fails. Also, even the smartest of them rely on dictionaries of known data to guess at an answer. We ask a simple question, \"What is five times eight?\", and give three options, \"32\", \"40\", and \"48\". The right answer is obviously \"40\", but instead of checking the bot's math-skills, we're assigning the values \"alaska\", \"oklahoma\", and \"california\" to these numbers, respectively. Because bots look at the possible values, rather than their label, the answers bears no relation to the question. You could even add an answer \"Pineapple\" with the value \"mississippi\" and validate against that, and just tell your users to choose that as their answer. The point is to personalize the randomization of data.\n\n\n## Display different robots.txt contents for different environments\n\n#### Problem:\n\nYou've setup a subdomain, `dev.yourdomain.com`, as a development site to preview what you're working on before publishing changes to `yourdomain.com`, and want to disallow search indexers from crawling it while keeping the production site visible in search results.\n\n#### Solution:\n\nWhile you should password-protect your development site to really keep it private, sometimes it's sufficient, and just more practical, to simply disallow search engine indexers from crawling your site. Luckily, Grav can handle pages in txt format just as it does html, so we can use [environment configurations](\/advanced\/environment-config) and twig templates to complete the job.\n\nFirst, let's create a configuration file `site.yaml` that will tell our template that `dev.yourdomain.com` is a development environment.\n\n`\/user\/[dev.yourdomain.com]\/config\/site.yaml`:\n\n    environment: dev\n\n\nThen, create a `robots.txt.twig` page template that checks if Grav is currently running on our development site, and displays different contents if it is.\n\n`\/user\/themes\/[yourtheme]\/templates\/robots.txt.twig`:\n\n[prism classes=\"language-twig line-numbers\"]\n{% if config.site.environment == 'dev' %}\n{% for rule in page.header.dev %}\n{{ rule }}\n{% endfor %}\n\n{% else %}\n{{ page.content }}\n\n{% endif %}\n[\/prism]\n\nFinally, create a page routed at `\/robots.txt` with the default `robots.txt` rules in the page content, and our alternative development version rules in the page frontmatter. To render the page contents as raw text instead of html, we'll also disable markdown rendering.\n\n`\/user\/pages\/robots\/robots.md`:\n\n[prism classes=\"language-md line-numbers\"]\n---\nroutes:\n  default: \/robots.txt\nprocess:\n  markdown: false\n\ndev:\n  - 'User-agent: *'\n  - 'Disallow: \/'\n---\n\nUser-agent: *\nDisallow: \/backup\/\nDisallow: \/bin\/\nDisallow: \/cache\/\nDisallow: \/grav\/\nDisallow: \/logs\/\nDisallow: \/system\/\nDisallow: \/vendor\/\nDisallow: \/user\/\nAllow: \/user\/pages\/\nAllow: \/user\/themes\/\nAllow: \/user\/images\/\nAllow: \/user\/plugins\/*.css$\nAllow: \/user\/plugins\/*.js$\n[\/prism]\n\nNow you should have a `robots.txt` file placed at your site's root with dynamic contents, also editable with the Admin plugin. \n\nNote: make sure your production site won't display `Disallow: \/`, as that will completely obliterate your search engine visibility.\n"},{"title":"Build a Blog","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cookbook\/tutorials\/create-a-blog","taxonomy":{"categories":["docs"],"tags":[]},"content":"!! Download and install locally the Blog Site skeleton from [https:\/\/getgrav.org\/downloads\/skeletons](https:\/\/getgrav.org\/downloads\/skeletons), or at least have ready the [https:\/\/github.com\/getgrav\/grav-skeleton-blog-site](https:\/\/github.com\/getgrav\/grav-skeleton-blog-site) repository to check. This is a sample site that uses the Antimatter theme. Having an up and running Grav site that already works with a Blog structure will surely give a hand if you\u2019re stuck or you don\u2019t understand what to do next.\n\n## Check your theme provides the Blog and Item page templates\n\nLet\u2019s start simple: choose a theme that already provides a blog page template. For example Antimatter, TwentyFifteen, Deliver, Lingonberry, Afterburner2, and many others.\nHow do you check if your theme already provides a blog page template? Go in the `\/user\/themes\/[yourtheme]\/templates` folder, and check the existence of the `blog.html.twig` and `item.html.twig` files.\n\nIf you\u2019ve already chosen a theme, and your theme does not come with those files, then copy them from Antimatter: [https:\/\/github.com\/getgrav\/grav-theme-antimatter\/tree\/develop\/templates](https:\/\/github.com\/getgrav\/grav-theme-antimatter\/tree\/develop\/templates)\n\nYou might need to tweak the markup to suit your theme. The best option if you\u2019re just starting out if to use a theme that already comes with them.\n\n## Create the blog pages structure\nThere are different ways to structure the pages. The default and simpler one is to have a parent page, of type Blog, and have child pages for the blog posts.\n\n### With the Admin Plugin\nCreate a page of type Blog. That page is the blog \"Homepage\", with the blog posts list.\n\nCreate one or more child pages of type `Item`. Those are the blog posts.\n\n### Manually\nGo in your pages\/ folder, create a `01.blog` page (change the number to reflect your menu structure), add a `blog.md` file in it.\nIn this file, add this content:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ncontent:\n    items: '@self.children'\n---\n[\/prism]\n\nThis tells Grav to iterate over the subpages (the blog posts).\n\nCreate a subfolder for each post you want to add, and add in each folder an `item.md` file, with the content of the blog post.\n\n## URLs\n\nThe structure explained above will create blog posts with `\/blog\/` in the URL. This might not be what you need. For example: If a blog is all you have on your site, and the blog posts listing is the home page. In these cases, you would just want your root domain to access this content rather than referring visitors to a child directory.\n\nIn this case, in system.yaml (System configuration in Admin) set `home.hide_in_urls` option (Hide Home in URLs in Admin) to true.\n\n## The inner workings\n\nYou might want to know how this works. The Blog template, the content of the `blog.html.twig` file provided in the theme `templates\/` folder, simply iterates over its child pages.\n\nIn its simplest way:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set collection = page.collection() %}`\n\n{% for child in collection %}\n        {% include 'partials\/blog_item.html.twig' with {'blog':page, 'page':child, 'truncate':true} %}\n{% endfor %}\n[\/prism]\n\npage.collection() by default picks the `content.items` property of the page YAML frontmatter, and returns an array containing the elements that match that definition.\n\nIf the page contains:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ncontent:\n    items: '@self.children'\n---\n[\/prism]\n\nthen `collection` will be the array of the subpages of the current page.\n\nIn this case the theme includes the partial `partials\/blog_item.html.twig`, responsible for rendering the single blog post, and passes it the `child` object containing the actual blog post to render.\n\n### To learn more\n\n- Collections: [https:\/\/learn.getgrav.org\/content\/collections](https:\/\/learn.getgrav.org\/content\/collections)\n- Listing Page: [https:\/\/learn.getgrav.org\/content\/content-pages#listing-page](https:\/\/learn.getgrav.org\/content\/content-pages#listing-page)\n- Folders: [https:\/\/learn.getgrav.org\/content\/content-pages#folders](https:\/\/learn.getgrav.org\/content\/content-pages#folders)\n- Taxonomy: [https:\/\/learn.getgrav.org\/content\/taxonomy#taxonomy-example](https:\/\/learn.getgrav.org\/content\/taxonomy#taxonomy-example)\n"},{"title":"Tutorials","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/cookbook\/tutorials","taxonomy":{"categories":["docs"],"tags":[]},"content":"# Tutorials\n\nThis subsection is dedicated to providing **tutorials** you can follow to achieve some common scenarios. Please feel free to edit these pages and add your own.\n"},{"title":"Cookbook","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/cookbook","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 10\n\n# Solutions Cookbook\n\nThis section is dedicated to providing **recipes** and **solutions** to common problems. Please feel free to edit these pages and add your own.\n"},{"title":"Change the site URL","date":"2019-07-11T10:26:04+00:00","url":"http:\/\/localhost\/docs\/advanced\/change-site-url","taxonomy":{"categories":["docs"],"tags":[]},"content":"By setting `custom_base_url` in system.yaml (or Custom Base URL in the System Settings, in Admin), we can have Grav in a folder but have it run in the domain root.\n\n## Scenario 1, run in the domain root folder\n\nGrav is installed in `http:\/\/localhost:8080\/grav-develop` but you want it to respond on `http:\/\/localhost:8080`\n\nIn system.yaml, set\n\n[prism classes=\"language-yaml\"]\ncustom_base_url: 'http:\/\/localhost:8080'\n[\/prism]\n\nand set the session path to the new Grav site path,\n\n[prism classes=\"language-yaml line-numbers\"]\nsession:\npath: \/\n[\/prism]\n\nAnd in the domain root, set the redirect, e.g. with .htaccess:\n\n[prism classes=\"language-text line-numbers\"]\nRewriteEngine On\nRewriteCond %{REQUEST_URI} !^\/grav-develop\/\nRewriteRule ^(.\\*)$ \/grav-develop\/$1\n[\/prism]\n\nwhere `grav-develop` is the subfolder where Grav is.\n\n## Scenario 2, run in a different subfolder\n\nGrav is installed in `http:\/\/localhost:8080\/grav-develop` but you want it to respond on `http:\/\/localhost:8080\/xxxxx`\n\nIn system.yaml, set\n\n[prism classes=\"language-yaml\"]\ncustom_base_url: 'http:\/\/localhost:8080\/xxxxx'\n[\/prism]\n\nand set the session path to the new Grav site path,\n\n[prism classes=\"language-yaml line-numbers\"]\nsession:\npath: \/xxxxx\n[\/prism]\n\nAnd in the new root folder, \/xxxxx, set the redirect, e.g. with .htaccess:\n\n[prism classes=\"language-text line-numbers\"]\nRewriteEngine On\nRewriteCond %{REQUEST_URI} !^\/grav-develop\/\nRewriteRule ^(.\\*)$ \/grav-develop\/$1\n[\/prism]\n\nwhere `grav-develop` is the sister subfolder where Grav is.\n"},{"title":"Debugging & Logging","date":"2019-07-05T13:21:30+00:00","url":"http:\/\/localhost\/docs\/advanced\/debugging","taxonomy":{"categories":["docs"],"tags":[]},"media":["config.png","dump.png","error.png","error2.png","timeline.png","twig-dump.png","twig.png"],"content":"When developing themes and plugins, there is often a need to display **debugging** information. Grav has powerful debugging capabilities via a variety of features:\n\n## Debug Bar\n\nGrav comes with a great tool to make this effort easier called via a **Debug Bar**. This feature is **disabled** by default, but can be turned on either globally or for your [development environment](..\/environment-config) only via the `system.yaml` configuration file:\n\n[prism classes=\"language-yaml line-numbers\"]\ndebugger:\nenabled: true # Enable Grav debugger and following settings\nshutdown:\nclose_connection: true # Close the connection before calling onShutdown(). false for debugging\n[\/prism]\n\n![](config.png)\n\n!! The first time you enable it, the debug bar might appear as a little Grav icon in the bottom left of the page. Clicking that will show the full debug bar.\n\nThe PHP Debug Bar still provides an overall **processing time** as well as **memory usage**, but it now has several tabs that provide more detailed information.\n\nThe first tab is for **Messages** and you can use this to help debug your Grav development process by posting information to this tab from your code.\n\nAlong with **Request**, **Exceptions**, and **Configuration** information, you can also see a detailed breakdown of Grav timing in the **Timeline** panel:\n\n![](timeline.png)\n\n### Dump Command for PHP\n\nIf you are trying to debug some PHP, for example a custom plugin you are developing, and wish to quickly examine some object or variable, you can use the powerful `dump()` command. This accepts basically any valid PHP variable and will output the results in a nicely formatted and colorized display in your browser.\n\nFor example, you can easily dump a PHP variable or object:\n\n[prism classes=\"language-php\"]\ndump(\\$this);\n[\/prism]\n\nand see the results in your browser:\n\n![](dump.png)\n\nYou can also dump variables into the **Messages** tab of the Debug Bar by using the syntax:\n\n[prism classes=\"language-php\"]\n$grav['debugger']->addMessage($this)\n[\/prism]\n\n### Dump command for Twig\n\nYou can also display Twig variables from your Twig templates. This is done in a similar fashion, but the results are displayed in the **Messages** panel of the Debug Bar. This feature is **disabled** by default, but can be turned on either globally or for your [development environment](..\/environment-config) only via the `system.yaml` configuration file:\n\n[prism classes=\"language-yaml line-numbers\"]\ntwig:\ndebug: true # Enable Twig debugger\n[\/prism]\n\nFor example, you can easily dump a Twig variable or object:\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{{ dump(page.header) }}\n[\/prism]\n{% endverbatim %}\n\nand see the results in the Debugbar:\n\n![](twig-dump.png)\n\n## Error Display\n\nOur new error display page provides detailed information, backtraces, and even relevant code blocks. This helps to more quickly isolate, identify and resolve critical errors. By default in Grav 1.0+, these are turned off by default, so you will need to enable them to take advantage of this helpful error handling for development:\n\n[prism classes=\"language-yaml line-numbers\"]\nerrors:\ndisplay: true\n[\/prism]\n\n![](error.png)\n\nFor production environments you can disable the detailed error page with something more subtle by configuring the errors options in your `user\/config\/system.yaml` file and rely on errors being logged to file:\n\n[prism classes=\"language-yaml line-numbers\"]\nerrors:\ndisplay: false\nlog: true\n[\/prism]\n\n![](error2.png)\n\n## Logging\n\nThe ability to log information is often useful, and once again, Grav provides us with a simple put powerful logging feature. Use one of the following syntaxes:\n\n[prism classes=\"language-twig line-numbers\"]\n$grav['log']->info('My informational message');\n$grav['log']->notice('My notice message');\n$grav['log']->debug('My debug message');\n$grav['log']->warning('My warning message');\n$grav['log']->error('My error message');\n$grav['log']->critical('My critical message');\n$grav['log']->alert('My alert message');\n$grav['log']->emergency('Emergency, emergency, there is an emergency here!');\n\n[\/prism]\n\nAll your message will be appended to the `\/logs\/grav.log` file.\n"},{"title":"Groups and Permissions","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/groups-and-permissions","taxonomy":{"categories":["docs"],"tags":[]},"content":"!! See the [Grav Admin FAQ](https:\/\/learn.getgrav.org\/admin-panel\/faq#adding-and-managing-users), to learn how to manage users\n\n## Defining groups\n\nBy default, Grav does not provide any group. You need to define them.\n\nGroups are defined in the user\/config\/groups.yaml file. If that file does not exist yet, create it.\n\nHere\u2019s an example of a user groups definition:\n\n[prism classes=\"language-yaml line-numbers\"]\nregistered:\n  icon: users\n  readableName: 'Registered Users'\n  description: 'The group of registered users'\n  access:\n    site:\n      login: true\npaid:\n  readableName: 'Paid Members'\n  description: 'The group of paid members'\n  icon: money\n  access:\n    site:\n      login: true\n      paid: true\nadministrators:\n  groupname: administrators\n  readableName: Administrators\n  description: 'The group of administrators'\n  icon: child\n  access:\n    admin:\n      login: true\n    site:\n      login: true\n[\/prism]\n\nHere we define 3 groups.\n\n## Assigning a user to a group\n\nEvery user can be assigned to a group.\n\nSimply add\n\n[prism classes=\"language-yaml line-numbers\"]\ngroups: \n  - paid\n[\/prism]\n\nto a user\u2019s yaml file under `user\/accounts`.\n\nYou can add multiple groups:\n\n[prism classes=\"language-yaml line-numbers\"]\ngroups:\n  - administrators\n  - another-group\n[\/prism]\n\nYou can also edit a user\u2019s group information through the Admin Plugin.\n\n## Permissions\n\nUsers assigned to a group inherit the group permissions. You can for example define a group that has permission `site.paid` by adding:\n\n[prism classes=\"language-yaml line-numbers\"]\n  access:\n    site:\n      paid: true\n[\/prism]\n\nto the group definition in `user\/config\/groups.yaml`.\n\nWhen a user is assigned to that group, it will inherit the site.paid: true permission.\n\nWhen a user belongs to multiple groups, it's enough that a group provides a permission, and it will be added to the user's permissions.\n\n### Fine-tuning permissions on a user level\n\nYou can fine-tune the permissions on a user level too, as usual. With groups, you can define a global permission and deny it on a user level, by adding\n\n[prism classes=\"language-yaml line-numbers\"]\n  access:\n    site:\n      paid: false\n[\/prism]\n\nto a user\u2019s yaml file.\n"},{"title":"YAML Syntax","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/yaml","taxonomy":{"categories":["docs"],"tags":[]},"content":"Introduction\n-----\n\nYAML stands for _\"YAML Ain't Markup Language\"_ and it is used extensively in Grav for its configuration files, blueprints, and also in page settings. \n\nYAML is to configuration what markdown is to markup. It\u2019s basically a human-readable structured data format. It is less complex and ungainly than XML or JSON, but provides similar capabilities. It essentially allows you to provide powerful configuration settings, without having to learn a more complex code type like CSS, JavaScript, and PHP.\n\nYAML is built from the ground up to be simple to use. At its core, a YAML file is used to describe data. One of the benefits of using YAML is that the information in a single YAML file can be easily translated to multiple language types.\n\nBasically, the data you enter in a YAML file is used in conjunction with a library to create the pages you see within Grav.\n\nYAML Basic Rules\n-----\n\nThere are some rules that YAML has in place to avoid issues related to ambiguity in relation to various languages and editing programs. These rules make it possible for a single YAML file to be interpreted consistently, regardless of which application and\/or library is being used to interpret it.\n\n* YAML files should end in `.yaml` whenever possible in Grav.\n* YAML is case sensitive.\n* YAML does not allow the use of tabs. Spaces are used instead as tabs are not universally supported.\n\nBasic Data Types\n-----\n\nYAML excels at working with **mappings** (hashes \/ dictionaries), **sequences** (arrays \/ lists), and **scalars** (strings \/ numbers). While it can be used with most programming languages, it works best with languages that are built around these data structure types. This includes: PHP, Python, Perl, JavaScript, and Ruby.\n\n## Scalars\n\nScalars are a pretty basic concept. They are the strings and numbers that make up the data on the page. A scalar could be a boolean property, like `Yes`, integer (number) such as `5`, or a string of text, like a sentence or the title of your website.\n\nScalars are often called variables in programming. If you were making a list of types of animals, they would be the names given to those animals.\n\nMost scalars are unquoted, but if you are typing a string that uses punctuation and other elements that can be confused with YAML syntax (dashes, colons, etc.) you may want to quote this data using single `'` or double `\"` quotation marks. Double quotation marks allow you to use escapings to represent ASCII and Unicode characters.\n\n[prism classes=\"language-yaml line-numbers\"]\ninteger: 25\nstring: \"25\"\nfloat: 25.0\nboolean: Yes\n[\/prism]\n\n## Sequences\n\nHere is a simple sequence you might find in Grav. It is a basic list with each item in the list placed in its own line with an opening dash.\n\n[prism classes=\"language-yaml line-numbers\"]\n- Cat\n- Dog\n- Goldfish\n[\/prism]\n\nThis sequence places each item in the list at the same level. If you want to create a nested sequence with items and sub-items, you can do so by placing a single space before each dash in the sub-items. YAML uses spaces, **NOT** tabs, for indentation. You can see an example of this below.\n\n[prism classes=\"language-yaml line-numbers\"]\n-\n - Cat\n - Dog\n - Goldfish\n-\n - Python\n - Lion\n - Tiger\n[\/prism]\n\nIf you wish to nest your sequences even deeper, you just need to add more levels.\n\n[prism classes=\"language-yaml line-numbers\"]\n-\n -\n  - Cat\n  - Dog\n  - Goldfish\n[\/prism]\n\nSequences can be added to other data structure types, such as mappings or scalars.\n\n## Mappings\n\nMapping gives you the ability to list keys with values. This is useful in cases where you are assigning a name or a property to a specific element.\n\n[prism classes=\"language-yaml line-numbers\"]\nanimal: pets\n[\/prism]\n\nThis example maps the value of `pets` to the `animal` key. When used in conjunction with a sequence, you can see that you are starting to build a list of `pets`. In the following example, the dash used to label each item counts as indentation, making the line items the child and the mapping line `pets` the parent.\n\n[prism classes=\"language-yaml line-numbers\"]\npets:\n - Cat\n - Dog\n - Goldfish\n[\/prism]\n\nResources and Further Documentation\n-----\n\nFor more information about YAML, including detailed documentation about how it works, check out the resources linked below.\n\n* [Dave's YAML Primer](https:\/\/github.com\/darvid\/trine\/wiki\/YAML-Primer)\n* [Official YAML 1.2 Documentation](http:\/\/www.yaml.org\/spec\/1.2\/spec.html)\n* [YAML Reference Card](http:\/\/www.yaml.org\/refcard.html)\n* [Xavier Shay's YAML Tutorial](http:\/\/rhnh.net\/2011\/01\/31\/yaml-tutorial)\n* [YAMLLint](http:\/\/www.yamllint.com\/)\n"},{"title":"Grav 1.6 Upgrade Guide","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/grav-development\/grav-16-upgrade-guide","taxonomy":{"categories":["docs"],"tags":[]},"media":["deprecated-tab.png"],"content":"Grav 1.6 is the largest update since the initial release of Grav. It introduces a few new features, improvements, bug fixes and provides many architectural changes which pave the road towards Grav 2.0. \n\n!!!! **IMPORTANT:** For most people, Grav 1.6 should be a simple upgrade without any issues, but like any upgrade, it is recommended to **take a backup** of your site and **test the upgrade in a testing environment** before upgrading your live site.\n\nWhether you are a developer or administrator of your site, your test site should have [Debug Bar](\/advanced\/debugging#debug-bar) enabled. This is because of Debug Bar has some useful tools which help you to ensure your site will be better prepared to run on later versions of Grav.\n\n!!! **TIP:** For more information how to enable the feature, please see [Debugging & Logging](https:\/\/learn.getgrav.org\/16\/advanced\/debugging) section in the documentation.\n\n## Deprecated Debug Bar Tab\n\nFor our purposes, we are looking **Deprecated** tab in the Debug Bar, which allows you to identify deprecated issues and fix or report them before upgrading to later Grav versions. Fixing the issues found in the **Deprecated** tab will help you to make your site faster and save you time when it is time to during future upgrades.\n\n![Deprecated Tab](deprecated-tab.png?classes=shadow)\n\n! **NOTE:** that **Deprecated** tab shows up only if deprecated calls are detected in the page\n\nTo make sure that you catch all the issues, you should either clear the cache and run Grav with caching disabled to maximize the chance you will catch all the errors. Even by following these steps, you may notice that some of the YAML\/Twig errors appear only after clearing the cache.\n\nThe **Deprecated** tab contains a list of deprecated features which were found. Every issue is clickable and opens up deprecation message, which has a short explanation from the issue as well as trace back, which allows you to locate and fix the code. In the right side you can see type of the deprecated error and in lower right corner you can filter the displayed types by clicking on the badges.\n\nWhen you open up the deprecation message, the content may first feel overwhelming. But in most cases you can ignore most of the content and just read the first few lines: message, file and line (if available).\n\nThere are a few types of deprecation issues:\n\n* `yaml`: YAML or Markdown file uses deprecated YAML syntax. \n* `twig`: Twig file contains deprecated Twig syntax or there was another Twig related issue.\n* `grav`: Something is calling deprecated Grav method or using deprecated property.\n* `vendor`: Something is using deprecated 3rd party library code.\n* `unknown`: Unknown deprecated message.\n\n## YAML Parsing\n\n! **NOTE:** In Grav 1.6 YAML has stricter parsing with a fallback for backwards compatibility\n\nGrav 1.6 uses a **Symfony 4.2 YAML parser**, which follows the [YAML standard specification](https:\/\/yaml.org\/spec?target=_blank) much more closely than the previously parser from Symfony **3.4**. This means that YAML files which previously worked just fine, may cause errors resulting from being invalid YAML. However, if the file fails to load with the new **4.2** version of the parser, Grav will by default still fall back to the older **3.4** version of the parser to keep your site up and running. However this will decrease the performance of the site and you should catch and fix the issues to ensure optimal performance. \n\n! **NOTE:** This backwards compatibility fallback mechanism will be removed in Grav 2.0\n\nThe Debug Bar can be used to spot any deprecated YAML. Just open the Debug Bar and look at the **Deprecated** tab. If the tab cannot be found, no issues were detected.\n\n!!! **TIP:** You can filter any **YAML** issues by looking at the **badges in the bottom-right corner** of the Debug Bar. Simply filter to only show **YAML** issues by clicking the other buttons to disable them.\n\n! **NOTE:** YAML errors require you to clear cache the errors will only be picked up when the YAML files are decoded.\n\n##### Look for these YAML errors:\n\n- Do not use `@`, `\\``, `|`, `%` and `>` at the beginning of an unquoted string: do not use `@data-options: []`, use `data-options@: []` instead.\n- Always add whitespace after a colon `:` for the keys: do not use `key:value`, use `key: value` instead.\n- Always quote `null`, `true`, `false`, `2.0` (floats) in keys; keys can only be either integers or strings.\n- Also quote `null`, `true`, `false`, `2` and `2.0` in values if they are meant to be strings.\n- When surrounding strings with double-quotes, you must now escape `\\` characters.\n\n### YAML Compatibility Mode\n\nBy default, YAML Compatibility Mode has been turned on in Grav 1.6. This will allow older sites to keep on working after upgrade, but it is not ideal to be used in new sites or if you have already fixed and tested your site against all YAML parsing errors.\n\nYou can change this setting in `user\/config\/system.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\nstrict_mode:\n  yaml_compat: false\n[\/prism]\n\nOur recommendation is not to touch this setting on existing sites just yet, rather you should create test sites with compatibility mode **false**. Also any new site made with Grav 1.6 or later should have compatibility mode turned off during development as it allows you to save a lot of time when it is time to upgrade to Grav 2.0.\n\n## Twig\n\n### Deferred Blocks\n\nYou should update your theme to version that add support for deferred asset blocks to provide full Grav 1.6 support. Alternatively, if you have a custom modified theme or developed your own, you should update it yourself in order to ensure that it keeps working with the new features and later versions of Grav and its plugins by following the guide in the [Important Theme Updates](https:\/\/getgrav.org\/blog\/important-theme-updates) blog post.\n\n### Deprecated Twig\n\nGrav 2.0 will be using **Twig 2** instead of Twig 1 that is currently used in the Grav 1.x releases. There are a few deprecated features which have been removed in Twig 2, which is why you should make sure that you catch and fix all of those issues before upgrading to Grav 2.0 down the road. \n\nThe Debug Bar can be used to spot any deprecated Twig issues. Just open the Debug Bar and click on the **Deprecated** tab.\n\n##### Look for these Twig issues:\n\n- Macros imported in a file will not be available in child templates anymore (via an include call for instance). You need to import macros explicitly in each file where you are using them.\n- Filter `|replace()` will only work with associated array as the parameter: `{ \"I like this and that.\"|replace({'this': 'foo', 'that': 'bar'}) }}`.\n- Test `sameas()` should now be written as `same as()`.\n\nMore information of what has been deprecated [can be found here](https:\/\/twig.symfony.com\/doc\/1.x\/deprecated.html?target=_blank).\n\n### Auto-Escaping\n\nGrav has been rather safe from vulnerabilities, except from XSS attacks, which can be triggered without much effort on any code which does not properly escape untrusted input from a user. Twig is an easy way to write template files, but at the same time it is too easy to forget that most of the variables which are used in the template files are not sanitized before being used. Even if they are filtered and safe, they may contain special characters which should be escaped to make the HTML code valid.\n\nFor example you may have a Twig template like this:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set my_string = '<script>echo(\"hello there!\");<script>' %}\n<p>\n    {{ my_string }}\n<\/p>\n[\/prism]\n\nBy default Grav has **Twig auto-escaping turned off** for simplicity and clarity of templates, but unfortunately this was a poor decision because nobody, including us, remembers to always escape variables which either may contain special characters or are coming from an untrusted source. To make the things worse, it is usually not known if the variable is HTML-safe or not. To make sure that a site is protected from most XSS vulnerabilities, you should enable auto-escaping in your configuration. Unfortunately themes and plugins that utilize Twig templates tend to not work with the setting turned on -- and templates written without explicit escaping are most likely vulnerable to malicious content.\n\nWith the example above, as auto-escaping is disabled, the output will render as pure HTML, and an alert box with `\"hello there!\"` will popup.  However, this should be escaped using the `|e` Twig escape filter (or `|e('html')`:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set my_string = '<script>echo(\"hello there!\");<script>' %}\n<p>\n    {{ my_string|e }}\n<\/p>\n[\/prism]\n\nBecause of most people tend to forget to escape the variables in Twig and because using `|e` everywhere can make the template files harder to read, there is a new setting in `user\/config\/system.yaml`:\n\n\n[prism classes=\"language-yaml line-numbers\"]\nstrict_mode:\n  twig_compat: false\n[\/prism]\n\nThis setting forces `auto-escaping` to be turned on in all Twig template files and disables the old setting to turn it on and off. The side effect of the setting is that your site will likely contain a few escaped pieces of content, which you will need to fix by using `|raw` filter for all the content which needs to contain HTML and HTML only. Many templates and plugins have not yet been updated to work with escaping forced on, so please report of any bugs in those to allow them to be fixed in a timely manner.\n\nThe transition to use auto-escaping will not be easy. During the transition all the template files should either contain both `|e` and `|raw` filters on every variable to make sure that the template file is safe to be used in both modes, or you can surround all the template code with `{% autoescape %}` Twig tags.\n\nSee https:\/\/twig.symfony.com\/doc\/1.x\/tags\/autoescape.html for more information.\n"},{"title":"Grav Development","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/grav-development","taxonomy":{"categories":["docs"],"tags":[]},"content":"If you want to develop with Grav, you will benefit from a more sophisticated setup than the one required for a regular Grav user. This includes just about any type of development, such as: **Grav Core**, **Grav Plugins**, **Grav Skeletons**, or even **Grav Themes**.\n\nFirst, let us break down the various types of development:\n\n## Grav Core\n\nWhen we talk about the **Grav Core**, we are effectively talking about things in the `system` folder.  This folder controls everything about Grav and is really the very essence of the [Grav workflow and lifecycle](..\/grav-lifecycle).\n\nGrav is intentionally focused on working with pages in an efficient manner.  Manipulation of pages and extensive functionality are often best served by creating a plugin.  We strongly encourage our community to contribute bug fixes, and even propose development of appropriate functionality within the core of Grav.\n\n## Running Tests\n\nFirst, install the development dependencies by running composer install from the Grav root.\n\n[prism classes=\"language-bash command-line\"]\ncomposer install\n[\/prism]\n\nThen you can run the tests:\n\n[prism classes=\"language-bash command-line\"]\ncomposer test\n[\/prism]\n\nThis will run the full suite of existing tests which should always be executed successfully on any site.\n\nYou can also run a single unit test file, e.g.\n\n[prism classes=\"language-bash command-line\"]\ncomposer test tests\/unit\/Grav\/Common\/Markdown\/ParsedownTest::testAttributeLinks\n[\/prism]\n\nAn alternative method to calling these tests is:\n\n[prism classes=\"language-bash command-line\"]\n.\/vendor\/bin\/codecept run\n.\/vendor\/bin\/codecept run tests\/unit\/Grav\/Common\/Markdown\/ParsedownTest::testAttributeLinks\n[\/prism]\n\n\n## Grav Plugins\n\nMost development effort will probably take the form of a **Grav Plugin**.  Because Grav has plenty of [Event Hooks](..\/..\/plugins\/event-hooks), it's very easy to provide enhanced and specific functionality via the creation of a plugin.  We have already developed many plugins that work in a variety of ways using many different events to show off the power of this functionality.\n\nThere are many benefits of providing functionality in plugins, but a couple of the key benefits are:\n\n1. The Grav Core Remains Lean - You only need to add the plugins you need for a particular site. For example, a blog may need many more plugins than a simple landing page.\n2. Third-Party Development of New Functionality - You don't have to wait until Grav gets a bit of functionality you want. You can simply create a plugin to extend Grav to do what you want it to do.\n\n#### Plugin Requirements\n\nA proper Grav plugin requires certain files in order to function properly, be listed in the Grav repository, and be visible in the Grav admin plugin.  Please ensure your plugin contains all these files:\n\n* **yourplugin.php** - plugin PHP file that should be named the same as the folder\n* **yourplugin.yaml** - plugin configuration file that contains any options and stream inheritance information\n* **blueprints.yaml** - plugin definition file and form definition file\n* **CHANGELOG.md** - a changelog file that should be in the proper Grav format for consistent rendering\n* **README.md** - required file to explain and preview the plugin\n* **LICENSE** - license file, probably MIT if in line with Grav core\n* **languages.yaml** (optional) - a language definition file\n\n## Grav Skeletons\n\nA **Grav Skeleton** is effectively an **all-in-one sample site**.  They include the **Grav Core**, required **plugins**, as well as appropriate **pages** for content and a **theme** for pulling it all together.\n\nGrav was designed to make the process of creating a site as easy as possible. For that reason, everything you need for a site can be contained in the `user` folder.  Each of the skeletons we currently have available are simply a `user` folder on GitHub that we package up with various dependencies (required plugins, and theme) into a package that can be simply unzipped to provide a working example.\n\nThese skeletons are a base on which you can grow your site, quickly and efficiently. You aren't locked into a specific set of features. It is every bit as flexible as any other Grav install.\n\n#### Skeleton Requirements\n\nA proper Grav skeleton requires certain files in order to function properly, be listed in the Grav repository, and be visible in the Grav admin plugin.  Please ensure your skeleton contains all these files:\n\n* **.dependencies** - A file to define theme and plugin dependencies for this skeleton\n* **blueprints.yaml** - skeleton definition file and form definition file\n* **CHANGELOG.md** - a changelog file that should be in the proper Grav format for consistent rendering\n* **README.md** - required file to explain and preview the plugin\n* **LICENSE** - license file, probably MIT if in line with Grav core\n* **screenshot.jpg** - a 1:1 aspect ratio preview of the theme.  Should be at least 800px x 800px\n\n## Grav Themes\n\nBecause of the tight coupling with Grav pages and themes, a **Grav Theme** is an integral and very important part of a Grav site.  By this we mean that each Grav page references a template in the theme, so your theme needs to provide the appropriate **Twig templates** that your pages are using.\n\nThe Twig templating engine is a very powerful system, and because there really are no restrictions by Grav itself, you are free to create any kind of design you wish.  This is one of the great things that sets Grav apart from a traditional CMS that has a loose coupling between content and design.\n\n#### Theme Requirements\n\nA proper Grav theme requires certain files in order to function properly, be listed in the Grav repository, and be visible in the Grav admin plugin.  Please ensure your theme contains all these files:\n\n* **yourtheme.php** - theme PHP file that should be named the same as the folder\n* **yourtheme.yaml** - theme configuration file that contains any options and stream inheritance information\n* **blueprints.yaml** - theme definition file and form definition file\n* **CHANGELOG.md** - a changelog file that should be in the proper Grav format for consistent rendering\n* **README.md** - required file to explain and preview the theme\n* **LICENSE** - license file, probably MIT if in line with Grav core\n* **screenshot.jpg** - a 1:1 aspect ratio preview of the theme.  Should be at least 800px x 800px\n* **thumbnail.jpg** - a smaller thumbnail image used by the admin plug. 1:1 aspect ratio and should be at 300px x 300px\n* **languages.yaml** (optional) - a language definition file\n\n## Demo Content\n\nWith the release of Grav 0.9.18, you are now able to provide demo content as part of a plugin or theme package. This means that anything found in a folder called `_demo\/` will be copied over to the `user\/` folder as part of the installation procedure.  This means you can provide **pages**, or **configuration** or anything else that sits in the `user\/` folder.  The user is prompted to do this, and it's purely optional.\n\n_Please note that demo content is not copied when your plugin or theme is installed via the `Admin` plugin._\n\n## Theme\/Plugin Release Process\n\nWhen you have created your new theme or plugin and would like to see it added to the [Grav Repository](https:\/\/getgrav.org\/downloads) there are a few standard things that you need to ensure:\n\n1. It is open source with a `LICENSE` file that provides an [MIT](http:\/\/en.wikipedia.org\/wiki\/MIT_License) compatible license [Example Here](https:\/\/github.com\/getgrav\/grav-theme-antimatter\/blob\/develop\/LICENSE)\n2. Contains a `README.md` file with a summary of functionality and instructions on how to install and configure it. [Example Here](https:\/\/github.com\/getgrav\/grav-theme-antimatter\/blob\/develop\/README.md)\n3. Contains a `blueprints.yaml` file with [all required fields](..\/blueprints). [Example Here](https:\/\/github.com\/getgrav\/grav-theme-antimatter\/blob\/develop\/blueprints.yaml)\n4. Provide a `CHANGELOG.md` in the [correct format](#changelog-format) an [Example Here](https:\/\/github.com\/getgrav\/grav-theme-antimatter\/blob\/develop\/CHANGELOG.md)\n5. Provides appropriate attribution if you use any other libraries, scripts, code.\n6. [Create a release](https:\/\/help.github.com\/articles\/creating-releases) for your finished plugin\/theme. The Grav repository system requires a release and will not find your plugin\/theme unless there is a release that contains all of the above.\n7. [Add an issue to the Grav issues tracker](https:\/\/github.com\/getgrav\/grav\/issues\/new?title=[add-resource]%20New%20Plugin\/Theme&body=I%20would%20like%20to%20add%20my%20new%20plugin\/theme%20to%20the%20Grav%20Repository.%0AHere%20are%20the%20project%20details:%20**user\/repository**) with details about your plugin, and we will give it a quick test to ensure it functions, and then add it.\n\n! Ensure your **naming for each tag is consistent**. GPM uses this information to determine if your plugin\/theme is newer than the last.  We recommend using [Semantic Version Numbers](http:\/\/semver.org\/) for tags.  E.g. `1.2.4`. Consistency for all tags is paramount!\n\n## ChangeLog Format\n\nThe GetGrav.org site uses a custom ChangeLog format that is written in standard markdown but can be manipulated with some simple CSS and [displayed in an attractive format](https:\/\/getgrav.org\/downloads#changelog).  In order to ensure your ChangeLogs can be parsed and formatted properly, please use this syntax:\n\n[prism classes=\"language-markdown line-numbers\"]\n# vX.Y.Z\n## 01\/01\/2015\n\n1. [](#new)\n    * New features added\n    * Another new feature\n2. [](#improved)\n    * Improvement made\n    * Another improvement\n3. [](#bugfix)\n     * Bugfix implemented\n     * Another bugfix\n\n...repeat...\n[\/prism]\n\nEach section `#new, #improved, #bugfix` are optional, just include the sections you need.\n\n! Dates can use either the **American** `m\/d\/y` [date format](\/content\/headers#date), or the **European** `d-m-y` format. Also make sure there is an empty newline between the headers (version and date) and lists (new, improved, bugfix).\n\n## GitHub Setup\n\nAs is the way of things these days, GitHub is going to be your best friend when it comes to developing for Grav.  We have created some tools to make this as easy as possible, but there are some development patterns that you should follow to make the process simpler.\n\nClone all the repositories you plan to work with into a single `Projects` or `Development` folder on your computer. This will allow our provided tools to find the repositories they need.\n\n!! We use the [GitFlow](http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/) branching model for all our Grav development.  The core concept of the GitFlow methodology is that development happens in the `develop` branch, but new features and functionality are created in separate `feature` branches that are merged into `develop` when complete.  Releases merge `develop` into `master`, and you can apply `hotfix` branches as needed during the release process. Most modern git clients support this. However, we recommend [Atlassian SourceTree](https:\/\/www.atlassian.com\/software\/sourcetree\/overview) as it's free, cross-platform, and easy to use.\n\nGrav also has some dependencies (dictated by the `.dependencies` file) which include the **Error** and **Problems** plugins, as well as the **Antimatter** theme.  You can follow these instructions to clone these bits on your own computer.\n\n!!!! If you wish to make additions or changes to any of the `getgrav` repositories, you will need to **fork** the appropriate repository and then clone **your fork's url** rather than the `getgrav` repository directly. The example below is using the direct `getgrav` repositories for example only.\n\n[prism classes=\"language-bash command-line\"]\ncd\nmkdir Projects\ncd Projects\nmkdir Grav\ncd Grav\ngit clone https:\/\/github.com\/getgrav\/grav.git\ngit clone https:\/\/github.com\/getgrav\/grav-plugin-error.git\ngit clone https:\/\/github.com\/getgrav\/grav-plugin-problems.git\ngit clone https:\/\/github.com\/getgrav\/grav-theme-antimatter.git\n[\/prism]\n\nThis will clone **all 4 repositories** into your `~\/Projects\/Grav` folder.\n\nUsually, the normal procedure for setting up a test site for Grav is to use the `bin\/grav new-project` command.  This is true for development, except for one important difference.  Because we want to to be able to develop from your web root, but have any changes show up in your cloned code, we need to **symbolically link** the relevant parts.  We do this by passing a `-s` flag to the `bin\/grav new-project` command.\n\nThere is one extra step required. You must tell the command where it can find your repositories. So, follow these steps to create a configuration file in a new `.grav\/` folder which you will need to create in the **root of your home directory**:\n\n[prism classes=\"language-bash command-line\"]\ncd\nmkdir .grav\nvi .grav\/config\n[\/prism]\n\nIn this file: provide a simple mapping of where the relevant files are located:\n\n```\ngithub_repos: \/Users\/your_user\/Projects\/Grav\/\n```\n\nMake sure you **save** this file and that it's readable. You can now set up your **symbolically linked** site where `~\/www` is your webroot and `~\/www\/grav` is the location where your new grav test site will be created:\n\n[prism classes=\"language-bash command-line\"]\ncd ~\/Projects\/Grav\/grav\nbin\/grav new-project -s ~\/www\/grav\n[\/prism]\n\nYou should see quite a bit of output like this:\n\n[prism classes=\"language-text\"]\nrhukster@gibblets:~\/Projects\/Grav\/grav(develop\u25cb) \u00bb bin\/grav new-project -s ~\/www\/grav\n\nCreating Directories\n    \/cache\n    \/logs\n    \/images\n    \/assets\n    \/user\/accounts\n    \/user\/config\n    \/user\/pages\n    \/user\/data\n    \/user\/plugins\n    \/user\/themes\n\nResetting Symbolic Links\n    \/index.php -> \/Users\/rhuk\/www\/grav\/index.php\n    \/composer.json -> \/Users\/rhuk\/www\/grav\/composer.json\n    \/bin -> \/Users\/rhuk\/www\/grav\/bin\n    \/system -> \/Users\/rhuk\/www\/grav\/system\n\nPages Initializing\n    \/Users\/rhuk\/Projects\/Grav\/grav\/user\/pages -> Created\n\nFile Initializing\n    \/.dependencies -> Created\n    \/.htaccess -> Created\n    \/user\/config\/site.yaml -> Created\n    \/user\/config\/system.yaml -> Created\n\nPermissions Initializing\n    bin\/grav permissions reset to 755\n\nread local config from \/Users\/rhuk\/.grav\/config\n\nSymlinking Bits\n===============\n\nSUCCESS symlinked grav-plugin-problems -> user\/plugins\/problems\n\nSUCCESS symlinked grav-plugin-error -> user\/plugins\/error\n\nSUCCESS symlinked grav-theme-antimatter -> user\/themes\/antimatter\n[\/prism]\n\nAs you can see, a number of default directories were created, and an initial `pages` folder was also created. After the base has been set up, the other dependencies are symbolically linked in.\n\nYou should be able to point your browser to `http:\/\/localhost\/grav` and see the test site you just set up. Now, any changes you make in your `~\/www\/grav` folder will show up ready to commit and push in your cloned repositories.\n\n## Abandoned Resource Protocol\n\nPeople move on, and user-generated content like plugins and themes may become abandoned. If you wish to take over the maintenance of an existing theme or plugin, you must follow this protocol:\n\n1. Submit a well-formed, tested pull request to the original repository.\n\n2. If the maintainer does not respond *at all* after 30 days, or if the maintainer states that they are abandoning the resource and are not willing to grant someone else write access, then proceed to the next step.\n\n3. [Submit a new issue to Grav's GitHub repository](https:\/\/github.com\/getgrav\/grav\/issues\/new?title=%5Bchange-resource%5D%20Take%20over%20Plugin%2FTheme&body=I%20would%20like%20to%20take%20over%20an%20existing%20plugin%2Ftheme.%0AHere%20are%20the%20project%20details%3A%20%2A%2Auser%2Frepository%2A%2A) with the following details:\n\n  * Title: `[change-resource] Take over plugin\/theme`\n\n  * Provide the name of the plugin and link to the original repository.\n\n  * Link to your pull request that went unanswered or a link to the conversation in which the maintainer has abandoned the resource.\n\n4. The Grav maintainers will review the case and let you know if the takeover is approved. If approval is granted, proceed to the next step.\n\n5. Prepare your forked repository with a new release.\n\n6. Add a note to the README that this repository is the new master and link back to the old repository.\n\n7. Reply to the issue, giving the maintainers the new URL for the plugin.\n\n8. The maintainers will update GPM and new and updated installs will now come from your forked repository.\n"},{"title":"Backups","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/backups","taxonomy":{"categories":[],"tags":[]}},{"title":"Scheduler","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/scheduler","taxonomy":{"categories":[],"tags":[]}},{"title":"Multisite Setup","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/multisite-setup","taxonomy":{"categories":["docs"],"tags":[]},"content":"!! Preliminary multisite support is now available in Grav 1.0.  However, CLI commands as well as the Admin plugin still need to be updated to fully support multisite configurations.  We will continue to work on this in subsequent releases of Grav.\n\n### What is a Multisite Setup?\n\n> A multisite setup allows you to create and manage a network of multiple websites, all running on a single installation.\n\nGrav has built-in multisite support. Unlike the [automatic environment configuration](..\/environment-config), which lets you define custom environments to support different configurations and scenarios, a multisite setup gives you the power to change the way how and from where Grav loads all its files.\n\n### Requirements for a Grav Multisite Setup\n\nThe most important thing you will need to run a Grav multisite network is good website hosting. If you are not planning to create many sites and do not expect many visitors, then you can get away with shared hosting. However, due to the nature of multisites, you\u2019d probably need a VPS or dedicated server as your sites grow.\n\n### Setup and installation\n\nBefore you begin, you\u2019ll want to be sure your web server is capable of running multiple websites i.e., you have access to your Grav root directory.\n\nThis is essential since serving multiple websites from the same installation is based on a `setup.php` file located in your Grav root.\n\n#### Quickstart (for Beginners)\n\nOnce created, the `setup.php` is called every time a user requests a page. In order to serve multiple websites from one single installation, this script (roughly speaking) has to tell Grav where the files (for the configurations, themes, plugins, pages etc.) for a specific subsite are located.\n\nThe provided snippets below setup your Grav installation in such a way that a request like\n\n[prism classes=\"language-text\"]\nhttp:\/\/<subsite>.example.com   -->   user\/sites\/<subsite>.example.com\n[\/prism]\nor\n[prism classes=\"language-text\"]\nhttp:\/\/example.com\/<subsite>   -->   user\/sites\/<subsite>\n[\/prism]\n\nwill use the `user\/sites` directory as the base \"user\" path instead of the `user` directory.\n\nIf you choose sub-directories or path based URLs for subsites, then the only thing you need is to create a directory for each subsite in the `user\/sites` directory containing at least the required folders `config`, `pages`, `plugins`, and `themes`.\n\nIf you choose sub-domains for structuring your website network, then you will have to configure (wildcard) sub-domains on your server in addition to the setup of your subsites in your `user\/sites` directory.\n\nEither way, decide which setup suits you best.\n\n##### Snippets\n\nFor subsites accessible via sub-domains copy the `setup_subdomain.php` file, otherwise for subsites accessible via sub-directories the `setup_subdirectory.php` file into your `setup.php`.\n\n!!! The `setup.php` file must be put in the Grav root folder, the same folder where you can find `index.php`, `README.md` and the other Grav files.\n\n**setup_subdomain.php**:\n[prism classes=\"language-php line-numbers\"]\n<?php\n\/**\n * Multisite setup for subsites accessible via sub-domains.\n *\n * DO NOT EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!\n *\/\n\nuse Grav\\Common\\Utils;\n\n\/\/ Get subsite name from sub-domain\n$environment = isset($_SERVER['HTTP_HOST'])\n    ? $_SERVER['HTTP_HOST']\n    : (isset($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : 'localhost');\n\/\/ Remove port from HTTP_HOST generated $environment\n$environment = strtolower(Utils::substrToString($environment, ':'));\n$folder = \"sites\/{$environment}\";\n\nif ($environment === 'localhost' || !is_dir(ROOT_DIR . \"user\/{$folder}\")) {\n    return [];\n}\n\nreturn [\n    'environment' => $environment,\n    'streams' => [\n        'schemes' => [\n            'user' => [\n               'type' => 'ReadOnlyStream',\n               'prefixes' => [\n                   '' => [\"user\/{$folder}\"],\n               ]\n            ]\n        ]\n    ]\n];\n[\/prism]\n\n**setup_subdirectory.php**:\n[prism classes=\"language-php line-numbers\"]\n<?php\n\/**\n * Multisite setup for sub-directories or path based\n * URLs for subsites.\n *\n * DO NOT EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!\n *\/\n\nuse Grav\\Common\\Filesystem\\Folder;\n\n\/\/ Get relative path from Grav root.\n$path = isset($_SERVER['PATH_INFO'])\n   ? $_SERVER['PATH_INFO']\n   : Folder::getRelativePath($_SERVER['REQUEST_URI'], ROOT_DIR);\n\n\/\/ Extract name of subsite from path\n$name = Folder::shift($path);\n$folder = \"sites\/{$name}\";\n$prefix = \"\/{$name}\";\n\nif (!$name || !is_dir(ROOT_DIR . \"user\/{$folder}\")) {\n    return [];\n}\n\n\/\/ Prefix all pages with the name of the subsite\n$container['pages']->base($prefix);\n\nreturn [\n    'environment' => $name,\n    'streams' => [\n        'schemes' => [\n            'user' => [\n               'type' => 'ReadOnlyStream',\n               'prefixes' => [\n                   '' => [\"user\/{$folder}\"],\n               ]\n            ]\n        ]\n    ]\n];\n[\/prism]\n\n#### Advanced configuration (for Experts)\n\nOnce created a `setup.php` have access to two important variables: (i) `$container`, which is the yet not properly initialized [Grav instance](https:\/\/github.com\/getgrav\/grav\/blob\/develop\/system\/src\/Grav\/Common\/Grav.php) and (ii) `$self`, which is an instance of the [ConfigServiceProvider class](https:\/\/github.com\/getgrav\/grav\/blob\/develop\/system\/src\/Grav\/Common\/Service\/ConfigServiceProvider.php).\n\nInside this script, you can do anything, but please be aware that the `setup.php` is called every time a user requests a page. This means that memory critical or time-consuming initializations operations lead to a slow-down of your whole system and should therefore be avoided.\n\nIn the end, the `setup.php` has to return an associative array with the optional environment name **environment** and a stream collection **streams**\n(for more informations and in order to set them up correctly, see the section [Streams](#streams)):\n\n[prism classes=\"language-php line-numbers\"]\nreturn [\n  'environment' => '<name>',            \/\/ A name for the environment\n  'streams' => [\n    'schemes' => [\n      '<stream_name>' => [              \/\/ The name of the stream\n        'type' => 'ReadOnlyStream',     \/\/ Stream object e.g. 'ReadOnlyStream' or 'Stream'\n        'prefixes' => [\n          '<prefix>' => [\n            '<path1>',\n            '<path2>',\n            '<etc>'\n          ]\n        ],\n        'paths' => [                    \/\/ Paths (optional)\n          '<paths1>',\n          '<paths2>',\n          '<etc>'\n        ]\n      ]\n    ]\n  ]\n]\n\n[\/prism]\n\n!!!! Please be aware that a this very early stage you neither have access to the configuration nor to the URI instance and thus any call to a non-initialized class might end in a freeze of the system, in unexpected errors or in (complete) data loss.\n\n#### Streams\n\nIn Grav streams are objects, mapping a set of physical directories of the system to a logical device. They are classified via their `type` attribute. For read-only streams that's the `ReadOnlyStream` type and for read-writeable streams that's the `Stream` type. You can register any custom stream type and pointing to it as long as it is an instance of the [StreamInterface](https:\/\/github.com\/rockettheme\/toolbox\/blob\/develop\/StreamWrapper\/src\/StreamInterface.php) interface class.\n\nMapping physical directories to a logical device can be done in two ways, either by setting up `paths` or `prefixes`. The former can be understood as a 1-to-1 mapping, whereas the latter (as the name suggests) allows you to combine several physical paths into one logical stream. Let's say you want to register a stream with the name \"image\". You can then with the stream `images:\/\/` list with\n\n[prism classes=\"language-php line-numbers\"]\n'image' => [\n    'type' => 'ReadOnlyStream',\n    'paths' => [\n        'user\/images',\n        'system\/images'\n    ]\n];\n[\/prism]\n\nall images located in the folders `user\/images` and `system\/images`. For **prefixes** consider the example\n\n[prism classes=\"language-php line-numbers\"]\n'cache' => [\n    'type' => 'Stream',\n    'prefixes' => [\n        '' => ['cache'],\n        'images' => ['images']\n    ]\n];\n[\/prism]\n\nIn this case `cache:\/\/` resolves to `cache`, but `cache:\/\/images` resolves to `images`.\n\nLast but not least, streams can be used in other streams. For example, provided a stream `user` and a stream `system` exists, the above \"image\" stream can also be written as\n\n[prism classes=\"language-php line-numbers\"]\n'image' => [\n    'type' => 'ReadOnlyStream',\n    'paths' => [\n        'user:\/\/images',\n        'system:\/\/images'\n    ]\n];\n\n[\/prism]\n"},{"title":"Environment Configuration","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/environment-config","taxonomy":{"categories":["docs"],"tags":[]},"media":["debugger-bar.png","debugger-dump.png","debugger-exception.png"],"content":"Grav now has the ability to extend the [powerful configuration capabilities](..\/..\/basics\/grav-configuration) for different environments to support different configuration for **development**, **staging**, and **production** scenarios.\n\n### Automatic Environment Configuration\n\nWhat this means is that you can provide as little or as much configuration changes per environment as needed.  A good example of this is the [Debug Bar](..\/debugging).  By default, the new Debug Bar is disabled in the core `system\/config\/system.yaml` file, and also in the user override file:\n\n[prism classes=\"language-bash command-line\"]\nuser\/config\/system.yaml\n[\/prism]\n\nIf you wanted to turn it on, you can easily enable it in your `user\/config\/system.yaml` file, however a better solution might be to have it _enabled_ for your development environment when accessing via **localhost**, but _disabled_ on your **production** server.\n\nThis can be easily accomplished by providing an override of that setting in the file: \n\n[prism classes=\"language-bash command-line\"]\nuser\/localhost\/config\/system.yaml\n[\/prism]\n\nwhere `localhost` is the hostname of the environment (this is what the host you enter in your browser, e.g. http:\/\/localhost\/your-site) and your configuration file contains:\n\n[prism classes=\"language-yaml line-numbers\"]\ndebugger:\n  enabled: true\n[\/prism]\n\nSimilarly, you may want to enable CSS and Js Asset Pipelining (combining + minification) for your production site only (`user\/www.mysite.com\/config\/system.yaml`):\n\n[prism classes=\"language-yaml line-numbers\"]\nassets:\n  css_pipeline: true\n  js_pipeline: true\n[\/prism]\n\nIf your production server was reachable via `http:\/\/www.mysite.com` then you could also provide configuration specific for that production site with a file located at `user\/www.mysite.com\/config\/system.yaml`.\n\nOf course, you are not limited to changes to `system.yaml`, you can actually provide overrides for **any** Grav setting in the `site.yaml` or even in any [plugin configuration](..\/..\/plugins\/plugin-basics)!\n\n#### Plugin Overrides\n\nTo override a plugin configuration YAML file is simply the same process as overriding a regular file.   If the standard configuration file is located in:\n\n[prism classes=\"language-bash command-line\"]\nuser\/config\/plugins\/email.yaml\n[\/prism]\n\nThen you can override this with a setting that only overrides specific options that you want to use for local testing:\n\n[prism classes=\"language-bash command-line\"]\nuser\/localhost\/config\/plugins\/email.yaml\n[\/prism]\n\nWith the configuration: \n\n[prism classes=\"language-yaml line-numbers\"]\nmailer:\n  engine: smtp\n  smtp:\n    server: smtp.mailtrap.io\n    port: 2525\n    encryption: none\n    user: '9a320798e65135'\n    password: 'a13e6e27bc7205'\n[\/prism]\n\n#### Theme Overrides\n\nYou can override themes in much the same way:\n\n[prism classes=\"language-bash command-line\"]\nuser\/config\/themes\/antimatter.yaml\n[\/prism]\n\nCan be overridden for any environment, say some production site (`http:\/\/www.mysite.com`):\n\n[prism classes=\"language-bash command-line\"]\nwww.mysite.com\/config\/themes\/antimatter.yaml\n[\/prism]\n"},{"title":"Performance & Caching","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/advanced\/performance-and-caching","taxonomy":{"categories":["docs"],"tags":[]},"content":" One of the core features that make Grav so compelling is just how fast it is.  This has always been a key consideration in the inherent design of Grav and is primarily due to caching, but does include several other components.\n\n## Performance\n\n1. **PHP caching is critical**.  You should run a PHP **opcache** and **usercache** in order to get the best performance out of Grav. With PHP 5.5 and 5.6, **Zend opcache** with **APCu user cache** is slightly faster.\n\n2. **SSD drives** can make a big difference. Most things can get cached in PHP user cache, but some are stored as files, so SSD drives can make a big impact on performance.\n\n3. **Native hosting** will always be faster than a Virtual Machine.  VMs are a great way hosting providers can offer flexible \u201ccloud\u201d type environments. These add a layer of processing that will always affect performance. Grav can still be fast on a VM (much faster than wordpress, joomla, etc), but still, for optimal performance, you can't beat a native hosting option.\n\n4. **Faster memory** is better. Because Grav is so fast, and because many of its caching solutions use memory heavily, the speed of the memory on your server can have a big impact on performance. Grav does not use extensive amounts of memory compared to some platforms so the amount of memory is not as important, nor does it impact performance as much, as memory type and speed.\n\n5. **Shared hosting** is cheap and readily available, but sharing resources will always slow things down a bit. Again, Grav can run very well on a shared server (better than other CMSes), but for ultimate speed, a dedicated server is the way to go.\n\n6. **Multi-core processors** are better. Faster and more advanced processors will always help, but not as much as the other points.\n\n7. **PECL Yaml Parser**.  Installing the native PHP PECL Yaml parser can increase YAML parsing by as much as 400%!  This is well worth looking at if you are looking for some extra speed.\n\n!! The getgrav.org runs on a single dedicated server with quad core processors, 16GB of memory and 6G SSD drives. We also run PHP 5.6 with Zend opcache and APCu user cache. The web servers do run a few other websites but not as many as you would find in a shared-hosting environment.\n\n## Caching Options\n\nCaching is an integral feature of Grav that has been baked in from the start.  The caching mechanism that Grav employs is the primary reason Grav is as fast as it is.  That said, there are some factors to take into account.\n\nGrav uses the established and well-respected [Doctrine Cache](https:\/\/www.doctrine-project.org\/projects\/doctrine-cache\/en\/latest\/index.html) library. This means that Grav supports any caching mechanism that Doctrine Cache supports.  This means that Grav supports:\n\n* **Auto** _(Default)_ - Finds the best option automatically\n* **File** - Stores in cache files in the `cache\/` folder\n* **APC** - [http:\/\/php.net\/manual\/en\/book.apc.php](http:\/\/php.net\/manual\/en\/book.apc.php)\n* **XCache** - [http:\/\/xcache.lighttpd.net\/](http:\/\/xcache.lighttpd.net\/)\n* **Memcache** - [http:\/\/php.net\/manual\/en\/book.memcache.php](http:\/\/php.net\/manual\/en\/book.memcache.php)\n* **Redis** - [http:\/\/redis.io](http:\/\/redis.io)\n* **WinCache** - [http:\/\/www.iis.net\/downloads\/microsoft\/wincache-extension](http:\/\/www.iis.net\/downloads\/microsoft\/wincache-extension)\n\nBy default, Grav comes preconfigured to use the `auto` setting.  This will try **APC**, then **WinCache**, then **XCache**, and lastly **File**.  You can, of course, explicitly configure the cache in your `user\/config\/system.yaml` file, which could make things ever so slightly faster.\n\n## Caching Types\n\nThere are actually **5 types** of caching happening in Grav.  They are:\n\n1. YAML configuration caching into PHP.\n2. Core Grav caching for page objects.\n3. Twig caching of template files as PHP classes.\n4. Image caching for media resources.\n5. Asset caching of CSS and JQuery with pipelining.\n\nThe YAML configuration caching is not configurable, and will always compile and cache the configuration into the `\/cache` folder. Image caching is also always on, and stores its processed images in the `\/images` folder.\n\n### Grav Core Caching\n\nCore Grav caching has the following configuration options as configured in your `user\/config\/system.yaml` file:\n\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  enabled: true                        # Set to true to enable caching\n  check:\n    method: file                       # Method to check for updates in pages: file|folder|hash|none\n  driver: auto                         # One of: auto|file|apc|xcache|memcache|wincache\n  prefix: 'g'                          # Cache prefix string (prevents cache conflicts)\n[\/prism]\n\nAs you can see, the options are documented in the configuration file itself.  During development sometimes it is useful to disable caching to ensure you always have the latest page edits.\n\nBy default, Grav uses the `file` check method for its caching.  What this means is that every time you request a Grav URL, Grav uses a highly optimized routing to run through all the **files** in the `user\/pages`  folder to determine if anything has changed.\n\n`folder` cache check is going to be slightly faster than `file` but will not work reliably in all environments.  You will need to check if Grav picks up modifications to pages on your server when using the `folder` option.\n\n`hash` checking uses a fast hash algorithm on all of the files in each page folder.  This may be faster than file checking in some situations and does take into account every file in the folder.\n\nIf automatic re-caching of changed pages is not critical to you (or if your site is rather large), then setting this value to `none` will speed up a production environment even more. You will just need to manually [clear the cache](..\/grav-cli#clearing-grav-cache) after changes are made.\n\n#### Memcache Specific Options\n\nThere are some extra configuration options that are required if you are connecting to a **memcache** server via the `memcache` driver option.  These options should go under the `cache:` group in your `user\/config\/system.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  ...\n  memcache:\n    server: localhost\n    port: 11211\n[\/prism]\n\n#### Memcached Specific Options\n\nSimilar to memcache, memcached has some extra configuration options that are required if you are connecting to a **memcached** server via the `memcached` driver option.  These options should go under the `cache:` group in your `user\/config\/system.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  ...\n  memcached:\n    server: localhost\n    port: 11211\n[\/prism]\n\n\n#### Redis Specific Options\n\nThere are some extra configuration options that are required if you are connecting to a **redis** server via the `redis` driver option.  These options should go under the `cache:` group in your `user\/config\/system.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  ...\n  redis:\n    server: localhost\n    port: 6379\n[\/prism]\n\nAlternatively, you can use a socket connection:\n\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  ...\n  redis:\n    socket: '\/tmp\/redis.sock'\n[\/prism]\n\nIf your redis server has a password or secret set you can also set that in this configuration:\n\n[prism classes=\"language-yaml line-numbers\"]\ncache:\n  ...\n  redis:\n    password: your-secret\n[\/prism]\n\n!!!! Deleting a page does not clear the cache as cache clears are based on folder-modified timestamps.\n\n<!-- -->\n\n!!! You can easily force the cache to clear by just touching\/saving a configuration file.\n\nThe `cache: check: pages:` option can provide some slight performance improvements, but this will cause Grav to not check for any page edits.  This is intended as a **Production-only** setting.\n\nThe Twig templating engine uses its own file based cache system, and there are a few options associated with it.\n\n[prism classes=\"language-yaml line-numbers\"]\ntwig:\n  cache: false                          # Set to true to enable twig caching\n  debug: true                           # Enable Twig debug\n  auto_reload: true                     # Refresh cache on changes\n  autoescape: false                     # Autoescape Twig vars\n[\/prism]\n\nFor slight performance gains, you can disable the `debug` extension, and also disable `auto_reload` which performs a similar function to `cache: check: pages` as it will not look for changes in `.html.twig` files to trigger cache refreshes.\n\n## Caching and Events\n\nFor the most part, [events are still fired](..\/..\/plugins\/event-hooks) even when caching is enabled.  This holds true for all the events except for `onPageContentRaw`, `onPageProcessed`, `onPageContentProcessed`, `onTwigPageVariables`, and `onFolderProcessed`.  These events are run as all pages and folders are recursed and they fire on each page or folder found.  As their name implies they are only run during the **processing**, and not after the page has been cached.\n"},{"title":"Advanced","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/advanced","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 8\n\n# Advanced\n\nIn this chapter we will cover some advanced features and capabilities of **Grav**.\n"},{"title":"Scripted Upgrades","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cli-console\/scripted-upgrades","taxonomy":{"categories":["docs"],"tags":[]},"content":"Or: Upgrading multiple Grav-installations at once.\n\nThis is a guide to make upgrading multiple Grav-installations easier, using [Deployer](https:\/\/deployer.org\/). By multiple I mean separate installations, not a [multisite-installation](\/advanced\/multisite-setup). We'll use the path to each installation to run [Grav's CLI](\/cli-console\/grav-cli) commands, but without having to type each of them manually.\n\nA benefit of a task-runner like Deployer is that as it runs through its tasks, it will let you know exactly what it is doing along the way. It will also show you any output from the server from the commands being run. For example, this is an output from Deployer:\n\n[prism classes=\"language-text\"]\nExecuting task packages\n\nGPM Releases Configuration: Stable\n\nFound 8 packages installed of which 1 need updating\n\n01. Email           [v2.5.2 -> v2.5.3]\n\nGPM Releases Configuration: Stable\n\nPreparing to install Email [v2.5.3]\n  |- Downloading package...   100%\n  |- Checking destination...  ok\n  |- Installing package...    ok\n  '- Success!\n\nClearing cache\n\nCleared:  \/home\/username\/public_html\/deployer\/grav\/cache\/twig\/*\nCleared:  \/home\/username\/public_html\/deployer\/grav\/cache\/doctrine\/*\nCleared:  \/home\/username\/public_html\/deployer\/grav\/cache\/compiled\/*\n\nTouched: \/home\/username\/public_html\/deployer\/grav\/user\/config\/system.yaml\n[\/prism]\n\nAnd as simple as that, Deployer told Grav to upgrade all packages, which upgraded the Email-plugin to its newest version.\n\n## Prerequisites\n\n[version=15]\nLike with Grav, you need PHP **v5.6.4** or above. This also applies for the command line (CLI), so if you have multiple versions installed use the one which refers to the right version. Use the command `php -v` to check your default version, mine is **PHP 5.4.45**.\n\nOn shared environments, check with your host which command to use for CLI. In my case, this is `php56` which with `-v` returns **PHP 5.6.28**. This also means prepending every path like this: `php56 vendor\/bin\/dep list`.\n[\/version]\n[version=16]\nLike with Grav, you need PHP **v7.1.3** or above. This also applies for the command line (CLI), so if you have multiple versions installed use the one which refers to the right version. Use the command `php -v` to check your default version, mine is **PHP 5.4.45**.\n\nOn shared environments, check with your host which command to use for CLI. In my case, this is `php71` which with `-v` returns **PHP 7.1.26**. This also means prepending every path like this: `php71 vendor\/bin\/dep list`.\n[\/version]\n\nSome hosts also allow you to select your default PHP version to use for CLI, check with your host how to do this.\n\n## Setup\n\nIn your servers public root (like **public_html** or **www**), create a folder named `deployer` and enter it. We'll use this as a basis for the project. You'll want to password-protect this directory (see [DigitalOcean Guide](https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-set-up-password-authentication-with-apache-on-ubuntu-14-04) for a manual approach, or use [CPanel](https:\/\/www.siteground.com\/tutorials\/cpanel\/pass_protected_directories.htm) if available).\n\nYou need to have a working installation of Grav, as well as [Composer](https:\/\/getcomposer.org\/). Some hosts have Composer installed already, which you can check by running `composer -v`. If it is not installed you can install it through SSH -- from the root directory -- with the following:\n\n[prism classes=\"language-bash command-line\"]\nexport COMPOSERDIR=~\/bin;mkdir bin\ncurl -sS https:\/\/getcomposer.org\/installer | php -- --install-dir=$COMPOSERDIR --filename=composer\n[\/prism]\n\nOr, if you prefer a [local installation](https:\/\/getcomposer.org\/download\/), run the following in the `public_html\/deployer\/`-folder:\n\n[prism classes=\"language-bash command-line\"]\nphp -r \"copy('https:\/\/getcomposer.org\/installer', 'composer-setup.php');\"\nphp composer-setup.php\nphp -r \"unlink('composer-setup.php');\"\n[\/prism]\n\nWith a local installation, composer is ran through `composer.phar` rather than just `composer`. Now, while still in the `public_html\/deployer\/`-folder, run the following to install [Deployer](https:\/\/deployer.org\/docs\/installation):\n\n[prism classes=\"language-bash command-line\"]\ncomposer require deployer\/deployer\n[\/prism]\n\nNow, still in the same folder, create a file named `deploy.php`. We'll use this to run each task with Deployer. Copy and paste the following into the file:\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Deployer;\nrequire 'vendor\/autoload.php';\n\n\/\/ Configuration\nset('default_stage', 'production');\nset(php, 'php56');\n\n\/\/ Servers\nlocalServer('site1')\n\t->stage('production')\n\t->set('deploy_path', '\/home\/username\/public_html\/deployer\/grav');\n\ndesc('Backup Grav installations');\ntask('backup', function () {\n\t$backup = run('{{php}} bin\/grav backup');\n\twriteln($backup);\n});\ndesc('Upgrade Grav Core');\ntask('core', function () {\n\t$self_upgrade = run('{{php}} bin\/gpm self-upgrade -y');\n\twriteln($self_upgrade);\n});\ndesc('Upgrade Grav Packages');\ntask('packages', function () {\n\t$upgrade = run('{{php}} bin\/gpm update -y');\n\twriteln($upgrade);\n});\n?>\n[\/prism]\n\n## Configuration\n\nBecause Deployer needs an explicit staging-environment, we set it to `production`. Further, to allow for specific php version we set a default executable to be used. This can be a named executable or the path to a specific version of PHP. Our configuration now looks like this:\n\n[prism classes=\"language-php line-numbers\"]\n\/\/ Configuration\nset('default_stage', 'production');\nset(php, 'php56');\n[\/prism]\n\nIf your default PHP CLI version is **5.6\\*** or higher, you change this to `set(php, 'php');`.\n\n### Servers\n\nWe can set up as many servers\/sites as needed, the script will be ran for each of them in order. They can be local installations or on external servers, but since this is a local setup we use `localServer` (see [Deployer\/servers](https:\/\/deployer.org\/docs\/servers) for more configurations). Here's an example with multiple sites:\n\n[prism classes=\"language-php line-numbers\"]\n\/\/ Servers\nlocalServer('site1')\n\t->stage('production')\n\t->set('deploy_path', '\/home\/username\/public_html\/deployer\/grav1');\nlocalServer('site2')\n\t->stage('production')\n\t->set('deploy_path', '\/home\/username\/public_html\/deployer\/grav2');\nlocalServer('site3')\n\t->stage('production')\n\t->set('deploy_path', 'C:\\caddy\\grav1');\nlocalServer('site4')\n\t->stage('production')\n\t->set('deploy_path', 'C:\\caddy\\grav2');\n[\/prism]\n\nNote that we use absolute paths to the installations, but they are relative to how the path is interpreted by SSH. This means that on the server, we want the full path because Deployer interprets this correctly, but we could also use the tilde-key if a HOMEDIR is set, like this: `~\/public_html\/deployer\/grav1`.\n\n### Tasks\n\nThree tasks are currently set up: `backup`, `core`, and `packages`. Running `php vendor\/bin\/dep backup` creates a backup of each installation, available in **deploy_path\/backup\/BACKUP.zip**, where `deploy_path` is the paths you configured for the servers.\n\nRunning `php vendor\/bin\/dep core` upgrades Grav itself, and does this with the `--all-yes` option to skip all Yes\/No questions asked. The same applies when running `php vendor\/bin\/dep packages`, which upgrades all plugins and themes.\n\n## Conclusion\n\nWe can now upgrade all your defined sites easily by running the tasks in order. First we enter the `public_html\/deployer\/`-folder, and then we run each command as needed:\n\n[prism classes=\"language-bash command-line\"]\nphp vendor\/bin\/dep backup\nphp vendor\/bin\/dep core\nphp vendor\/bin\/dep packages\n[\/prism]\n\nWe will now have made a backup of each site, upgraded Grav itself, as well as upgraded all plugins and themes.\n"},{"title":"GPM Command","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cli-console\/grav-cli-gpm","taxonomy":{"categories":["docs"],"tags":[]},"media":["index-outdated.jpg","index.jpg","info.jpg","update-limit.jpg","update.jpg","upgrade.jpg"],"content":"Since the release of version **0.9.3**, Grav includes a _GPM_ (Grav Package Manager) which allows you to install, update, uninstall and list all the themes and plugins available on the Grav repository, as well as upgrade Grav itself to the latest version.\n\nLike the [Grav CLI](..\/grav-cli), the _GPM_ is a command-line tool which requires the user to run commands via a command-line interface, such as **Terminal** in MacOS. UNIX style commands are not natively available in Windows cmd. Installing the [msysgit](https:\/\/msysgit.github.io\/) package on a Windows machine adds [Git](https:\/\/git-scm.com\/) and Git BASH, which is an alternative command prompt that makes UNIX commands available.\n\nTo get started with _GPM_, you can run the following command to receive a list of all presently available commands:\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm list\n[\/prism]\n\nTo receive help for a specific command, you can add help to the line before the command:\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm help install\n[\/prism]\n\n!! To be able to perform **install**, **upgrade**, and **selfupgrade**, PHP must have the `php_openssl` extension enabled.  If you get a fatal error while downloading, this is probably the cause.\n\n#### PHP CGI-FCGI Information\n\nTo determine if your server is running `cgi-fcgi` on the command line, type the following:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-5\"]\nphp -v\nPHP 5.5.17 (cgi-fcgi) (built: Sep 19 2014 09:49:55)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\n    with the ionCube PHP Loader v4.6.1, Copyright (c) 2002-2014, by ionCube Ltd.\n[\/prism]\n\nIf you see a reference to `(cgi-fcgi)` you will need to prefix all `bin\/gpm` commands with `php-cli`. Alternatively, you can set up an alias in your shell with something like: `alias php=\"php-cli\"` which will ensure the **CLI** version of PHP runs from the command line.\n\n## How Does it Work?\n\n_GPM_ downloads the repository metadata from **GetGrav.org**. The repository contains all the details about the packages available and _GPM_ is also capable of determining whether any of these packages are already installed and if they need updating.\n\nThe repository itself gets cached locally, on the Grav instance machine running the command, for 24 hours. Any further request after the cache has been generated will not contact the **GetGrav.org** server, but rather serve from the locally-stored repository. This approach guarantees a much quicker response.\n\nMost of the commands (listed below) come with the option `--force (-f)` which allows the forcing a re-fetch of the repository. This could be extremely useful in the event an update is known to be out there and the user doesn't want to wait a full 24-hour cycle before the cache gets cleared.\n\n## Commands\n\nBelow, we have broken down all of the commands available for _GPM_. To run a command, launch your favorite terminal app and from within the root of your Grav instance, you can type `bin\/gpm <command>`.\n\n## Index\n\nThe `index` command shows a list of all the available resources in the Grav repository, organized by _themes_ and _plugins_.\n\n![](index.jpg)\n\nEach row displays the **name**, **slug**, **version** and whether it's installed already or not.\n\nIn this view, you can also quickly determine if there is a new version of any of the resources you have already installed.\n\nFor instance, if we had a very old version of Antimatter (v1.1.1), but the latest version was v1.1.3, it will appear in the index as seen below.\n\n![](index-outdated.jpg)\n\n!! You can use --installed-only` option to show the state of **only your installed** plugins and themes.\n\n## Info\n\nThe `info` command displays the details of the desired package, such as description, author, homepage, etc.\n\n![](info.jpg)\n\n!! You will also be prompted to view the plugin\/theme **Changelog** via this option.\n\n## Install\n\nThe `install` command does exactly what it states. It installs a resource from the repository to your current Grav instance with a simple command.\n\nThe command will also detect if a resource is already installed, or if it is symbolically linked, and prompts you on what to do.\n\nYou can also install multiple resources at once by separating the slugs with a space.\n\n[plugin:youtube](https:\/\/www.youtube.com\/watch?v=SUUtcYl2xrE)\n\n!! You can use the option `--all-yes (-y)` to skip any prompts. Existing resources will be overridden and if they are symbolic links will automatically be skipped.\n\n## Update\n\nThe `update` command shows a list of updatable resources and works similarly to `install`.\n\n![](update.jpg)\n\n[plugin:youtube](https:\/\/www.youtube.com\/watch?v=jkxk2xBr5TM)\n\nAlternatively, you can limit the updates to specific resources only.\n\n![](update-limit.jpg)\n\n[plugin:youtube](https:\/\/www.youtube.com\/watch?v=rSWdmdx9TDA)\n\n## Uninstall\n\nThe `uninstall` command removes an installed theme or plugin and clears the cache. Because Grav is purely filesystem, uninstalling a theme or a plugin means deleting the folder physically.\n\nThe command will also detect if a resource is symbolically linked, and prompts you on what to do.\n\nYou can also uninstall multiple resources at once by separating the slugs with a space.\n\n!! You can use the option `--all-yes (-y)` to skip any prompts. If a resource is detected as symbolic link, it will automatically be skipped.\n\n## Self-upgrade\n\nThe `self-upgrade` (or selfupgrade) allows you to update Grav to the latest available version. If no upgrade is needed, a message will tell you so, noting also which version you are currently running and when the release was published.\n\nIt is strongly advised to always do a backup before performing a self-upgrade (see _Creating a Backup_ in the [CLI section](..\/grav-cli)).\n\n!! The self-upgrade only upgrades portions of your Grav instance, like `system\/` folder, `vendor\/` folder, `index.php`, and others. Your **`user`** and **`images`** folders will never be touched.\n\n![](upgrade.jpg)\n\n[plugin:youtube](https:\/\/www.youtube.com\/watch?v=15-E8l5aaUo)\n\n## Important Developer Information\n\n#### Blueprints\n\nWith the introduction of _GPM_, we now have strict rules about valid `blueprints`. Whether it's a _theme_ or a _plugin_ you are developing, you should always ensure `blueprints` are formatted properly.\n\nA blueprint can serve several different purposes, including defining your resource identity. Please refer to the [Blueprints](..\/blueprints) for more detailed documentation about what blueprints are and how they should be compiled.\n\n#### Releases\n\nGrav repository refreshes every hour and automatically detects when there are new releases, this implies that as a developer you followed our [Contributing](https:\/\/github.com\/getgrav\/grav#contributing) requirements.\n\nOn your end all you have to do is ensure you have updated the blueprints with the new version, and that you tagged and released the new version. The Grav repository will do the rest for you and as soon as your release is picked up, it will be available to everyone via Grav website or through _GPM_.\n\n#### Add your resource to the repository\n\nadvanced\/grav-development#themeplugin-release-process\nFollow the instructions in the [Theme\/Plugin Release Process](..\/..\/advanced\/grav-development#themeplugin-release-process) section.\n\nTo add your new plugin\/theme to the Grav repository, please open a Grav Issue on GitHub. You can also [use this precompiled link](https:\/\/github.com\/getgrav\/grav\/issues\/new?title=[add-resource]%20New%20Plugin\/Theme&body=I%20would%20like%20to%20add%20my%20new%20plugin\/theme%20to%20the%20Grav%20Repository.%0AHere%20are%20the%20project%20details:%20**user\/repository**). Make sure you update the body to the proper `user\/repository`.\n\nMore details about what the plugin\/theme does are welcome and can be placed in the Issue.\n\nAlso please be aware that before adding a repository, the Grav team will inspect your plugin\/theme ensuring that it fits the Grav standards. The team may also respond with requests for additional information, suggest minor improvements, etc. prior to closing the issue and adding the plugin\/theme.\n"},{"title":"Plugin Command","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cli-console\/grav-cli-plugin","taxonomy":{"categories":["docs"],"tags":[]},"media":["bin-plugin-login.png","bin-plugin-newuser.png","bin-plugin.png","grav-plugin-hello.png"],"content":"Plugins can integrate to Grav's CLI `bin\/plugin` and enhance the plugin functionalities via Terminal by executing specific tasks.\n\nAs explained in the [Grav CLI](..\/grav-cli) section, you need to use a **terminal** in order to be able to execute commands.\n\nWhen running the command `bin\/plugin`, all the plugins who provide CLI integration will be listed.\n\n![](bin-plugin.png)\n\nThe first option passed in to `bin\/plugin` is always the plugin slug (ie, _error_, _login_, etc). The second option is the actual _command_ that the plugin provides.\n\nBased on the plugin implementation there could be other following options and you can learn more about each of them by running the `bin\/plugin [slug] list` command.\n\n## Reserved Commands and Options\n\nThere are some reserved _commands_ and _options_ that are always available from any plugin. These are also particularly important to keep in mind if you are a developer and want to implement your own tasks, because you won't be able to use any of the reserved commands and options.\n\n[div class=\"table table-keycol\"]\n| **Commands** |                             |\n|--------------|-----------------------------|\n| `help`       | Displays help for a command |\n| `list`       | Lists commands              |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| **Options**                |                                                                                                    |\n|----------------------------|----------------------------------------------------------------------------------------------------|\n| `-h`, `--help`             | Display help message                                                                               |\n| `-q`, `--quiet`            | Do not output any message                                                                          |\n| `-v`, `--version`          | Display application version                                                                        |\n| `--ansi`                   | Force ANSI output                                                                                  |\n| `--no-ansi`                | Disable ANSI output                                                                                |\n| `-n`, `--no-interaction`   | Do not ask any interactive question                                                                |\n| `-v|vv|vvv`, `--verbose`   | Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug |\n[\/div]\n\n## How to Use the CLI for Plugins\n\nThe **list** and **help** commands are very useful when you don't know yet how to use a certain plugin CLI.\n\nWith **list** you can access all the available commands and view a quick description of what each of them do.\n\nHere is an example with the **login** plugin when we run the command `bin\/plugin login list`.\n\n! Not specifying any command after the plugin slug defaults automatically to `list`. This means that both `bin\/plugin [slug] list` and `bin\/plugin [slug]` are equivalents.\n\n![](bin-plugin-login.png)\n\nAs you can see, most of the options and commands correspond to the [reserved list](#reserved-commands-and-options). The actual commands offered by the login plugin are `add-user`, `new-user` and `newuser`.\n\nAs you can notice the help description of all 3 commands is identical. This is because, by choice, the 3 commands are exactly the same. **add-user** and **newuser** are in fact aliases for **new-user**, which allows to easily guess the command without knowing or remembering it.\n\nNow that we know the login plugin comes with a `new-user` command, we only need to learn how to use it. This is where the reserved **help** command comes in place. Let's run `bin\/plugin login help new-user`.\n\n![](bin-plugin-newuser.png)\n\nNow we have a complete understanding of the `new-user` command and we know how to use it.\nLet's try creating a new user. Because all the options are optional by definition, we will omit the password on purpose (we will be asked about it in a prompt later).\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-7\"]\nbin\/plugin login newuser -u joeuser -e joeuser@grav.org -P b -N \"Joe User\" -t \"Site Administrator\"\nCreating new user\n\nEnter a password: *********\nRepeat the password: *********\n\nSuccess! User joeuser created.\n[\/prism]\n\n## Developers: Integrate the CLI in Plugin\n\nAs a Developer, you might want to create CLI commands for admins or users to run. It is extremely easy to add such functionality in a Plugin.\n\nThe first thing you want to do is to create a subfolder `cli\/` at the root of your plugin. This folder will be processed by `bin\/plugin` and scanned for commands classes.\n\nGrav's CLI is based on the great [Symfony Console Component](http:\/\/symfony.com\/doc\/current\/components\/console\/introduction.html) and you can pretty much follow their documentation for a complete reference, there are just a few important things you should consider.\n\n1. The name of the class file is standard. It should start with a capital letter and end with **Command.php**.\n    * `Hello.php`: WRONG\n    * `helloworldCommand.php`: WRONG\n    * `HelloworldCommand.php`: CORRECT\n    * `HelloWorldCommand.php`: CORRECT\n2. You should always extend `ConsoleCommand`, this will offer you some Grav extras such as formatted colors, direct access to the Grav instance and other utilities ([more details](https:\/\/github.com\/getgrav\/grav\/blob\/develop\/system\/src\/Grav\/Console\/ConsoleTrait.php)).\n3. Symfony Console requires an `execute` method. When extending **ConsoleCommand** this becomes `serve`.\n\nBelow is a simple example to get you started. You can test it, as is, by saving it as `HelloCommand.php` and by placing it under your plugin's root `cli\/` folder (**user\/plugins\/my_plugin\/cli\/HelloCommand.php**).\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Grav\\Plugin\\Console;\n\nuse Grav\\Console\\ConsoleCommand;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n\/**\n * Class HelloCommand\n *\n * @package Grav\\Plugin\\Console\n *\/\nclass HelloCommand extends ConsoleCommand\n{\n    \/**\n     * @var array\n     *\/\n    protected $options = [];\n\n    \/**\n     * Greets a person with or without yelling\n     *\/\n    protected function configure()\n    {\n        $this\n            ->setName(\"hello\")\n            ->setDescription(\"Greets a person.\")\n            ->addArgument(\n                'name',\n                InputArgument::REQUIRED,\n                'The name of the person that should be greeted'\n            )\n            ->addOption(\n                'yell',\n                'y',\n                InputOption::VALUE_NONE,\n                'Wheter the greetings should be yelled or quieter'\n            )\n            ->setHelp('The <info>hello<\/info> greets someone.')\n        ;\n    }\n\n    \/**\n     * @return int|null|void\n     *\/\n    protected function serve()\n    {\n        \/\/ Collects the arguments and options as defined\n        $this->options = [\n            'name' => $this->input->getArgument('name'),\n            'yell' => $this->input->getOption('yell')\n        ];\n\n        \/\/ Prepare the strings we want to output and wraps the name into a cyan color\n        \/\/ More colors available at:\n        \/\/ https:\/\/github.com\/getgrav\/grav\/blob\/develop\/system\/src\/Grav\/Console\/ConsoleTrait.php\n        $greetings = 'Greetings, dear <cyan>' . $this->options['name'] . '<\/cyan>!';\n\n        \/\/ If the optional `--yell` or `-y` parameter are passed in, let's convert everything to uppercase\n        if ($this->options['yell']) {\n            $greetings = strtoupper($greetings);\n        }\n\n        \/\/ finally we write to the output the greetings\n        $this->output->writeln($greetings);\n    }\n}\n[\/prism]\n\n![](grav-plugin-hello.png)\n\n! Another good simple example can be found in the [Error Plugin (LogCommand.php)](https:\/\/github.com\/getgrav\/grav-plugin-error\/blob\/develop\/cli\/LogCommand.php), If you are looking for a more complex example, you should have a look at the [Login Plugin (NewUserCommand.php)](https:\/\/github.com\/getgrav\/grav-plugin-login\/blob\/develop\/cli\/NewUserCommand.php)\n"},{"title":"Grav command","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cli-console\/grav-cli","taxonomy":{"categories":["docs"],"tags":[]},"content":"Grav comes with a built-in command-line interface (CLI) which can be found at `bin\/grav`. The CLI is extremely useful for running recurring tasks such as **clearing the cache**, making **backups**, and more.\n\nAccessing the CLI is a simple process but you need to use a **terminal**.  On a mac this is called `Terminal`, on windows, it's called `cmd` and on Linux, it's just a shell. UNIX style commands are not natively available in Windows cmd. Installing the [msysgit](http:\/\/msysgit.github.io\/) package on a Windows machine adds [Git](https:\/\/git-scm.com\/) and Git BASH, which is an alternative command prompt that makes UNIX commands available.  If you are accessing your server remotely, you most likely will use **SSH** to remotely log in to your server.  Check out this [great tutorial for more information on SSH](http:\/\/code.tutsplus.com\/tutorials\/ssh-what-and-how--net-25138).\n\nAlthough some operations can be performed manually, by _relying_ on the CLI, these tasks could be automated via _cronjobs_ that run daily.\n\nTo get a list of all the commands available in Grav, you can run the command:\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav list\n[\/prism]\n\nThis should display something like:\n\n[version=15]\n[prism classes=\"language-text\"]\nAvailable commands:\n  backup       Creates a backup of the Grav instance\n  clean        Handles cleaning chores for Grav distribution\n  clear-cache  [clearcache] Clears Grav cache\n  composer     Updates the composer vendor dependencies needed by Grav.\n  help         Displays help for a command\n  install      Installs the dependencies needed by Grav. Optionally can create symbolic links\n  list         Lists commands\n  new-project  [newproject] Creates a new Grav project with all the dependencies installed\n  sandbox      Setup of a base Grav system in your webroot, good for development, playing around or starting fresh\n  security     Capable of running various Security checks\n[\/prism]\n[\/version]\n\n[version=16]\n[prism classes=\"language-text\"]\nAvailable commands:\n  backup       Creates a backup of the Grav instance\n  cache        [clearcache|cache-clear] Clears Grav cache\n  clean        Handles cleaning chores for Grav distribution\n  composer     Updates the composer vendor dependencies needed by Grav.\n  help         Displays help for a command\n  install      Installs the dependencies needed by Grav. Optionally can create symbolic links\n  list         Lists commands\n  logviewer    Display the last few entries of Grav log\n  new-project  [newproject] Creates a new Grav project with all the dependencies installed\n  sandbox      Setup of a base Grav system in your webroot, good for development, playing around or starting fresh\n  scheduler    Run the Grav Scheduler.  Best when integrated with system cron\n  security     Capable of running various Security checks\n[\/prism]\n[\/version]\n\nTo get help for a specific command, you can prepend help to the command:\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav help install\n[\/prism]\n\n## Backup\n\n[version=15]\nBacking up your project is nothing more than creating an archive of the _ROOT_ of Grav. No Database, no complications.\n\nOf course, you can simplify this even more by just using the Grav CLI. Supposing we have our `~\/workspace\/portfolio` project and that we want to create a backup of it, here's what we will do:\n\n[prism classes=\"language-bash command-line\"]\ncd ~\/workspace\/portfolio\nbin\/grav backup\n[\/prism]\n\nA new backup `portfolio-20140812174352.zip` file has been created at the `backup\/` folder of the project. The long number after the name is just the date in the format of _year month day hour minute second_.\n\n[\/version]\n[version=16]\nThe Grav backup system has been completely revamped in Grav 1.6 to support multiple backup profiles.  These profiles are configures in the `user\/config\/backups.yaml`.  If you don't have a custom configuration file, Grav will use the default one provided in `system\/config\/backups.yaml`.\n\nIf Grav detects multiple backup profiles, the CLI command will prompt you to choose the one you wish to backup with the CLI command.\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-10\"]\ncd ~\/workspace\/portfolio\nbin\/grav backup\n\nGrav Backup\n===========\n\nChoose a backup?\n  [0] Default Site Backup\n  [1] Pages Backup\n[\/prism]\n\nAlternatively you can pass an index of the profile directly:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-10\"]\n$ cd ~\/workspace\/portfolio\nbin\/grav backup 1\n\nArchiving 36 files [===================================================] 100% < 1 sec Done...\n\n [OK] Backup Successfully Created: \/users\/joe\/workspace\/portfolio\/backup\/pages_backup--20190227120510.zip\n[\/prism]\n\nMore information on the backup functionality can be found in the [Advanced -> Backups](\/advanced\/backups) section.\n[\/version]\n\n## Clean\n\nThis CLI command is primarily used during the package building process, as it removes extraneous files and folders from Grav.  It is strongly recommended you **do not use this** yourself unless you are using it build your own Grav packages.\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav clean\n[\/prism]\n\n## Clear-Cache\n\nYou can clear the cache by deleting all the files and folders under `cache\/`.\n\nThe equivalent CLI command is:\n\n[version=15]\n[prism classes=\"language-bash command-line\"]\n$ cd ~\/webroot\/my-grav-project\nbin\/grav clear-cache\n[\/prism]\n\nThere are several aliases for compatibility (`clear-cache`, `clearcache`, `clear`).\n\nThe default option is the standard cache clearing process however, you can control this further with these options:\n\n[prism classes=\"language-text\"]\n--all             If set will remove all including compiled, twig, doctrine caches\n--assets-only     If set will remove only assets\/*\n--images-only     If set will remove only images\/*\n--cache-only      If set will remove only cache\/*\n--tmp-only        If set will remove only tmp\/*\n[\/prism]\n[\/version]\n\n[version=16]\n[prism classes=\"language-bash command-line\"]\n$ cd ~\/webroot\/my-grav-project\nbin\/grav cache\n[\/prism]\n\nThere are several aliases for compatibility (`cache`, `cache-clear`, `clearcache`, `clear`).\n\nThe default option is the standard cache clearing process however, you can control this further with these options:\n\n[prism classes=\"language-text\"]\n--purge           If set purge old caches\n--all             If set will remove all including compiled, twig, doctrine caches\n--assets-only     If set will remove only assets\/*\n--images-only     If set will remove only images\/*\n--cache-only      If set will remove only cache\/*\n--tmp-only        If set will remove only tmp\/*\n[\/prism]\n[\/version]\n\n## Composer\n\nIf you installed Grav via GitHub and have manually installed composer-based vendor packages, you can easily update with:\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav composer\n[\/prism]\n\nYou can also pass composer options such as `install`:\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav composer --install\n[\/prism]\n\nor\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav composer --update\n[\/prism]\n\n!! These all use the `--no-dev` composer option, so to be able to perform testing you should use composer directly: `bin\/composer.phar`\n\n## Install\n\nTo install the dependencies Grav relies on (**error** plugin, **problems** plugin, **antimatter** theme), launch a **terminal** or **console** and navigate to the grav folder where you want to install the dependencies and run the CLI command.\n\n[prism classes=\"language-bash command-line\"]\n$ cd ~\/webroot\/my-grav-project\nbin\/grav install\n[\/prism]\n\nYou should now have the dependencies installed under:\n* `~\/webroot\/my-grav-project\/user\/plugins\/error`\n* `~\/webroot\/my-grav-project\/user\/plugins\/problems`\n* `~\/webroot\/my-grav-project\/user\/themes\/antimatter`\n\n[version=16]\n## Log Viewer\n\nAs part of Grav 1.6, a new logviewer CLI command was created to allow for quick viewing of Grav logs.\n\nThe simplest way to use this command is to simply type:\n\n[prism classes=\"language-bash command-line\"]\ncd ~\/webroot\/my-grav-project\nbin\/grav logviewer\n[\/prism]\n\nThis will output the last 20 log entries of the `logs\/grav.log` file.  There are a few options:\n\n[prism classes=\"language-text line-numbers\"]\n-f, --file[=FILE]     custom log file location (default = grav.log)\n-l, --lines[=LINES]   number of lines (default = 10)\n-v, --verbose         verbose output including a stack trace if available\n[\/prism]\n\ne.g.\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-11\"]\nbin\/grav logviewer --lines=4                                                                           [12:27:20]\n\nLog Viewer\n==========\n\nviewing last 4 entries in grav.log\n\n2019-02-27 12:00:30 [WARNING] Plugin 'foo-plugin' enabled but not found! Try clearing cache with `bin\/grav cache`\n2019-02-27 12:04:57 [NOTICE] Backup Created: \/Users\/joe\/my-grav-project\/backup\/default_site_backup--20190227120450.zip\n2019-02-27 12:05:10 [NOTICE] Backup Created: \/Users\/joe\/my-grav-project\/backup\/pages_backup--20190227120510.zip\n2019-02-27 12:26:00 [NOTICE] Backup Created: \/Users\/joe\/my-grav-project\/backup\/pages_backup--20190227122600.zip\n[\/prism]\n[\/version]\n\nAnd verbose output with stack traces:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-22\"]\nbin\/grav logviewer -v                                                                                                       [16:12:12]\n\nLog Viewer\n==========\n\nviewing last 20 entries in grav.log\n\n2019-03-14 05:52:44 [WARNING] Plugin 'simplesearch.bak' enabled but not found! Try clearing cache with `bin\/grav clear-cache`\n2019-03-14 05:52:44 [CRITICAL] A function must be an instance of \\Twig_FunctionInterface or \\Twig_SimpleFunction.\n0 \/Users\/joe\/my-grav-project\/plugins\/acme-twig-filters\/acme-twig-filters.php(52): Twig\\Environment->addFunction(Object(Twig\\TwigFilter))\n1 \/Users\/joe\/my-grav-project\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(212): Grav\\Plugin\\ACMETwigFiltersPlugin->onTwigInitialized(Object(RocketTheme\\Toolbox\\Event\\Event), 'onTwigInitializ...', Object(RocketTheme\\Toolbox\\Event\\EventDispatcher))\n2 \/Users\/joe\/my-grav-project\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(44): Symfony\\Component\\EventDispatcher\\EventDispatcher->doDispatch(Array, 'onTwigInitializ...', Object(RocketTheme\\Toolbox\\Event\\Event))\n3 \/Users\/joe\/my-grav-project\/vendor\/rockettheme\/toolbox\/Event\/src\/EventDispatcher.php(23): Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch('onTwigInitializ...', Object(RocketTheme\\Toolbox\\Event\\Event))\n4 \/Users\/joe\/my-grav-project\/system\/src\/Grav\/Common\/Grav.php(365): RocketTheme\\Toolbox\\Event\\EventDispatcher->dispatch('onTwigInitializ...', Object(RocketTheme\\Toolbox\\Event\\Event))\n5 \/Users\/joe\/my-grav-project\/system\/src\/Grav\/Common\/Twig\/Twig.php(175): Grav\\Common\\Grav->fireEvent('onTwigInitializ...')\n6 \/Users\/joe\/my-grav-project\/system\/src\/Grav\/Common\/Processors\/TwigProcessor.php(24): Grav\\Common\\Twig\\Twig->init()\n7 \/Users\/joe\/my-grav-project\/system\/src\/Grav\/Framework\/RequestHandler\/Traits\/RequestHandlerTrait.php(45): Grav\\Common\\Processors\\TwigProcessor->process(Object(Nyholm\\Psr7\\ServerRequest), Object(Grav\\Framework\\RequestHandler\\RequestHandler))\n8 \/Users\/joe\/my-grav-project\/system\/src\/Grav\/Framework\/RequestHandler\/Traits\/RequestHandlerTrait.php(57): Grav\\Framework\\RequestHandler\\RequestHandler->handle(Object(Nyholm\\Psr7\\ServerRequest))\n9 \/Users\/joe\/my-grav-project\/system\/src\/Grav\/Common\/Processors\/AssetsProcessor.php(28): Grav\\Framework\\RequestHandler\\RequestHandler->handle(Object(Nyholm\\Psr7\\ServerRequest))\n\n2019-03-14 05:52:46 [WARNING] Plugin 'simplesearch.bak' enabled but not found! Try clearing cache with `bin\/grav clear-cache`\n...\n[\/prism]\n\n## New Project\n\nEvery time you want to start a new project with Grav, you need to start with a clean Grav instance. Through the CLI, this process is super easy and takes only a few seconds.\n\n1. Launch a **terminal** or **console** and navigate to the _grav_ folder (for the sake of this document we will assume it resides under  `~\/Projects\/grav`)\n\n[prism classes=\"language-bash command-line\"]\ncd ~\/Projects\/grav\n[\/prism]\n\n2. Run the Grav CLI to create a new project, with the destination being the location where your project will reside in (usually the [webroot](http:\/\/en.wikipedia.org\/wiki\/Webroot) of your Web server). Let us assume we are creating a **portfolio** and we want it at `~\/Webroot\/portfolio`.\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav new-project ~\/webroot\/portfolio\n[\/prism]\n\nThis will create a new Grav instance and download all the dependencies required.\n\n## Sandbox\n\nGrav has a nifty utility called `sandbox`, which can quickly create a [symlinked](\/cli-console\/command-line-intro#symbolic-links) copy of the Grav-installation. Simply put, running `bin\/grav sandbox -s DESTINATION` - where \"DESTINATION\" is the path to the folder where you want the copied installation - recreates the Grav-installation in another folder.\n\nFor example, running:\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav sandbox -s ..\/copy\n[\/prism]\n\nFrom your current Grav-folder creates a sibling-folder named `copy`, where the following folders are virtual copies: `\/bin, \/system, \/vendor, \/webserver-configs`, as well as standard files that typically reside in Grav's root-folder. All content in \/user will be carbon copies, not virtual, so you can easily get started with customizing the new installation without having created overhead from core files.\n\n[version=16]\n## Scheduler\n\nAs outlined in the [Advanced -> Scheduler](\/advanced\/scheduler) section, The scheduler can be monitored via the CLI command.\n\nThe base command will manually run the scheduler tasks that are due:\n\n[prism classes=\"language-bash command-line\"]\nbin\/grav scheduler\n[\/prism]\n\nTo get some more detail you can run with the optional `-v` option:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-10\"]\nbin\/grav scheduler -v\n\nRunning Scheduled Jobs\n======================\n\n[2019-02-27T12:34:07-07:00] Success: Grav\\Common\\Cache::purgeJob\n[2019-02-27T12:34:07-07:00] Success: Grav\\Common\\Cache::clearJob\n[2019-02-27T12:34:07-07:00] Success: ls -lah\n[\/prism]\n\nOther options include:\n\n[prism classes=\"language-text line-numbers\"]\n-i, --install         Show Install Command\n-j, --jobs            Show Jobs Summary\n-d, --details         Show Job Details\n[\/prism]\n\nPlease refer to the [Advanced -> Scheduler](\/advanced\/scheduler) section, for more detailed information on these options.\n[\/version]\n\n## Security\n\nAdded in Grav 1.5 is a new security scanner CLI command.  You can run this to quickly scan your contents against the [configured security settings](\/basics\/grav-configuration#security).\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-10\"]\nbin\/grav security                                                                                       [12:34:12]\n\nGrav Security Check\n===================\n\nScanning 11 pages [===================================================] 100% < 1 sec\n\n[OK] Security Scan complete: No issues found...\n[\/prism]\n\n#### PHP CGI-FCGI Information\n\nTo determine if your server is running `cgi-fcgi` on the command line, type the following:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-5\"]\n$ php -v\nPHP 5.5.17 (cgi-fcgi) (built: Sep 19 2014 09:49:55)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\n    with the ionCube PHP Loader v4.6.1, Copyright (c) 2002-2014, by ionCube Ltd.\n[\/prism]\n\nIf you see a reference to `(cgi-fcgi)` you will need to prefix all `bin\/grav` commands with `php-cli`. Alternatively, you can set up an alias in your shell with something like: `alias php=\"php-cli\"` which will ensure the **CLI** verison of PHP runs from the command line.\n\n\n\n\n\n\n"},{"title":"Command Line Intro","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/cli-console\/command-line-intro","taxonomy":{"categories":["docs"],"tags":[]},"media":["osx_symlink.png"],"content":"It's no secret that Grav was built with the command line in mind. While the Admin plugin is certainly making it easier to get more done without opening a Terminal (MacOS and Linux) or Command Prompt (Windows), there's a lot to be said about the speed and level of control that comes with working from the command line.\n\nThis is especially true for folks that are running their own development servers, or a remote server with which they have the ability to access the command line. The amount of tools at your disposal from the command line are incredible. You can control virtually all aspects of your site's hosting, Grav, and its plugins and themes with a handful of keystrokes.\n\nIn the end, it all comes down to personal preference. On this page, we will list some great resources out there to help you become familiar with the command line.\n\n!! Not all operating systems are compatible with one another when it comes to commands. There are minor differences between MacOS and many Linux distros, with Windows' Command Prompt having a very different set of commands from the other two.\n\n## MacOS\n\nMacOS is based on Unix and is POSIX standards compliant. This means that most of the commands you may be familiar with on other Unix or Linux-based operating systems will work exactly as expected in MacOS. There are some exceptions to the rule, and it's for that reason that we recommend researching Terminal commands for the specific operating system you're working with.\n\nHere are some great resources to help you become accustomed to using the Terminal in MacOS:\n\n* [Michael Hogg's MacOS Terminal Commands Guide](http:\/\/michael-hogg.co.uk\/os_x_terminal.php) - A practical resource for MacOS-friendly Terminal commands, what they do, and how to use them.\n* [MacRumors Guide to Terminal](http:\/\/guides.macrumors.com\/Terminal) - A useful resource for navigating and using the Terminal, including tips for using it with the GUI.\n* [Envato Tuts+ Terminal Tips and Tricks](http:\/\/computers.tutsplus.com\/tutorials\/40-terminal-tips-and-tricks-you-never-thought-you-needed--mac-51192) - 40 clever tips and tricks for mastering the Terminal. Includes commands you won't find in many basic introductions.\n* [Envato Tuts+ Taming the Terminal](http:\/\/computers.tutsplus.com\/articles\/new-mactuts-session-taming-the-terminal--mac-45471) - A multi-part, detailed course in using the Terminal. Includes videos, screenshots, and more.\n\n\n## Linux\n\nThe vast majority of Linux (and Unix) distros out there have one big thing in common: the Bash command line interface (Terminal). Whether you are running a GUI such as Gnome, Unity, or KDE or not, there is a good chance that if you're running a Linux distro on your desktop or laptop you have visited the command line.\n\nAfter all, it's powerful. You can do pretty much anything you could with the GUI directly into the command line, often with more control over how the commands are carried out. Here are some excellent resources to help you get familiar with the Terminal in Linux:\n\n* [TechSpot's Beginner's Guide to the Linux Command Line](http:\/\/www.techspot.com\/guides\/835-linux-command-line-basics\/) - An excellent beginner's guide to the command line.\n* [MakeUseOf's Quick Guide to Getting Started with the Linux Command Line](http:\/\/www.makeuseof.com\/tag\/a-quick-guide-to-get-started-with-the-linux-command-line\/) - Another great resource for learning about the Terminal.\n* [O'Reilly Linux DevCenter Directory of Linux Commands](http:\/\/www.linuxdevcenter.com\/cmd\/) - An index of commands available in the Terminal.\n* [Ryan's Tutorials Linux Tutorial](http:\/\/ryanstutorials.net\/linuxtutorial\/) - An excellent all-in-one guide to Linux and the Bash command line interface (Terminal).\n\n## Windows\n\nWindows sits apart from the pack for a number of reasons. Many of the commands in the command line for Windows are reminiscent of its DOS roots. Common commands such as `ls` for a directory listing doesn't work here. Instead, you would type `dir`. Here are a handful of resources to help you get the hang of the Windows Command Prompt:\n\n* [MakeUseOf's Beginner's Guide to the Windows Command Line](http:\/\/www.makeuseof.com\/tag\/a-beginners-guide-to-the-windows-command-line\/) - A well-written introduction to the command line for Windows.\n* [DOSPrompt.info](http:\/\/dosprompt.info\/) - An entire site devoted to familiarizing users with the Command Prompt.\n\n!! All of Grav's CLI commands rely on PHP, but this is not immediately available in Windows. You can find out whether it is installed by opening a console and typing `php -v` to check. If `'php' is not recognized as an internal or external command ...` returns, it is not.\n\nIf you want to add PHP to your Windows system, you need to find your \"Environment Variables\", either by searching for it in the Start-Menu or going to Control Panel -> Advanced System Settings -> Click the \"Environment Variables\"-button.\n\nUnder \"System Variables\", find \"Path\" and click edit. Copy the \"variable value\" into notepad, and add a semicolon at the end - to separate variables. Then find the path to your installation of PHP ([from scratch](http:\/\/windows.php.net\/) or using a current installation that came with your development environment), and add it to the end of this long list of variables. You want the folder-path, not including `php.exe`.\n\nWhen that is done, open a new console (or restart your current one) so the new path is applied. Then try `php -v` again, you should get an output like: `PHP 7.0.7 (cli) ...`. When you run Grav's commands, you will need to prepend `php` to them, for instance `php grav\/gpm index`.\n\n## Grav-specific Commands\n\nOne of the coolest things about Grav is that you have a host of powerful commands at your disposal to do everything from installing additional plugins and themes to adding users to the Admin. In this section, we will list many of the most commonly used commands.\n\nAll of the commands listed below are compatible with <strong>any operating system.<\/strong>\n\n[version=15]\n[div class=\"table table-keycol\"]\n| Command                           | Description                                                                                                                        |\n| :----------------                 | :--------------------------------------                                                                                            |\n| `bin\/grav list`                   | Lists all commands available in Grav (excluding the GPM).                                                                          |\n| `bin\/grav help <command>`         | Gives you help on a specific command.                                                                                              |\n| `bin\/grav new-project <location>` | Used to create a new, clean Grav instance in a different folder. Can be run from an existing Grav install.                         |\n| `bin\/grav install`                | This command installs any dependencies needed to run your current Grav install.                                                    |\n| `bin\/grav clear-cache`            | This command clears the cache of your Grav install. Options include: `--all`, `--assets-only`, `--images-only`, and `--cache-only` |\n| `bin\/grav backup`                 | Creates a zip backup of your current Grav site.                                                                                    |\n| `bin\/grav composer`               | Updates manually-installed composer-based vendor packages.                                                                         |\n| `bin\/gpm list`                    | Lists all commands available via Grav's GPM (Grav Package Manager)                                                                 |\n| `bin\/gpm help <command>`          | Gives you help on a specific command.                                                                                              |\n| `bin\/gpm index`                   | Shows a list of all the available resources in the Grav repository, organized by themes and plugins.                               |\n| `bin\/gpm info`                    | Displays the details of the desired package, such as description, author, homepage, etc.                                           |\n| `bin\/gpm install`                 | Installs a resource from the repository to your current Grav instance with a simple command.                                       |\n| `bin\/gpm update`                  | Checks installed plugins and themes for available updates and lists them.                                                          |\n| `bin\/gpm uninstall`               | Removes an installed theme or plugin and clears the cache.                                                                         |\n| `bin\/gpm self-upgrade`            | Enables you to update Grav to the latest version.                                                                                  |\n| `bin\/gpm security`                | Runs through the configured XSS security checks on all Grav pages                                                                  |\n[\/div]\n[\/version]\n\n\n[version=16]\n[div class=\"table table-keycol\"]\n| Command                           | Description                                                                                                                        |\n| :----------------                 | :--------------------------------------                                                                                            |\n| `bin\/grav list`                   | Lists all commands available in Grav (excluding the GPM).                                                                          |\n| `bin\/grav help <command>`         | Gives you help on a specific command.                                                                                              |\n| `bin\/grav new-project <location>` | Used to create a new, clean Grav instance in a different folder. Can be run from an existing Grav install.                         |\n| `bin\/grav install`                | This command installs any dependencies needed to run your current Grav install.                                                    |\n| `bin\/grav cache`                  | This command clears the cache of your Grav install. Options include: `--all`, `--assets-only`, `--images-only`, and `--cache-only` |\n| `bin\/grav backup`                 | Creates a zip backup of your current Grav site.                                                                                    |\n| `bin\/grav composer`               | Updates manually-installed composer-based vendor packages.                                                                         |\n| `bin\/gpm list`                    | Lists all commands available via Grav's GPM (Grav Package Manager)                                                                 |\n| `bin\/gpm help <command>`          | Gives you help on a specific command.                                                                                              |\n| `bin\/gpm index`                   | Shows a list of all the available resources in the Grav repository, organized by themes and plugins.                               |\n| `bin\/gpm info`                    | Displays the details of the desired package, such as description, author, homepage, etc.                                           |\n| `bin\/gpm install`                 | Installs a resource from the repository to your current Grav instance with a simple command.                                       |\n| `bin\/gpm update`                  | Checks installed plugins and themes for available updates and lists them.                                                          |\n| `bin\/gpm uninstall`               | Removes an installed theme or plugin and clears the cache.                                                                         |\n| `bin\/gpm self-upgrade`            | Enables you to update Grav to the latest version.                                                                                  |\n| `bin\/gpm security`                | Runs through the configured XSS security checks on all Grav pages                                                                  |\n| `bin\/gpm logviewer`               | Easily view Grav logs with configuration options to pick log file, number of lines, and verbosity                                  |\n| `bin\/gpm scheduler`               | Manage the scheduled jobs and manually run the scheduler process if required                                                       |\n[\/div]\n[\/version]\n\n\n!! These commands are explained in greater detail within the [Grav CLI](..\/grav-cli) and [Grav GPM](..\/grav-cli-gpm) documentation.\n\nThe commands listed below, are compatible with <strong>mac or unix systems.<\/strong>\n\n[div class=\"table table-keycol\"]\n| Command                                  | Description                                                                                                               |\n| :----------------                        | :--------------------------------------                                                                                   |\n|  `bin\/gpm index \\| grep '\\| installed'`  | Lists all plugins and themes you currently have installed. |\n[\/div]\n\n## Symbolic Links\n\nSymbolic Links (also known as symlinks) are incredibly useful and easy to perform within the command line. What it does it create a virtual copy (clone) of a given folder or its contents and puts it wherever you'd like it to go. Unlike a true copy, it is simply a tunnel to the original so everything you see and change is reflected in multiple places at once.\n\nAnother great benefit of doing this is that it takes up virtually zero additional disk space since you don't have multiple copies of the same files.\n\nWhere Grav is concerned, symlinks are a great way to add plugins, themes, and content to multiple instances and doing so in a way that makes it infinitely easier to update and modify. You make a change once, and it appears everywhere the file(s) are symlinked.\n\nThe process for performing a symlink is pretty straightforward, with minor differences between operating systems.\n\n### Symbolic Links in MacOS and Linux\n\n![](osx_symlink.png)\n\nThe command follows a common pattern of `ln -s <original file, directory, or its contents> <put virtual copies here>`.\n\nThe commands that initiate a symlink differ between operating systems. For MacOS and the majority of Unix and Linux distros, `ln -s` is the command. The `ln` part tells the system you want to create a link. The `-s` switch sets the link as symbolic.\n\n### Symbolic Links in Windows\n\nThe basic structure of the command in Windows is `mklink <type> <put virtual copies here> <original file, directory, or its contents>`. Unlike MacOS or Linux, you will need to set the argument for the type of file you're symbolically linking. The source and destination are also flipped in this case, where the new symbolic link comes before the file you're linking to. There are three arguments you can use here:\n\n* `\/j` - This is the most commonly used argument. It creates a symlink of a directory.\n* `\/h` - This creates a symbolic link for a specific file.\n* `\/d` - This creates a soft link, or a shortcut. It's not likely to be used for the purposes outlined here.\n\n\n### Example Commands\n\nBasically, you state the command that initiates the symlink, what you're symbolically linking, and where you're putting the virtual copies. Below, we've detailed examples of these commands:\n\n##### Link Contents of One Folder to Another\n\n[div class=\"table\"]\n| MacOS and Linux             | Windows                           |\n| :-----                      | :-----                            |\n| `ln -s ~\/folder1 ~\/folder2` | `mklink \/J C:\\folder2 C:\\folder1` |\n[\/div]\n\nThis command creates a symlink that takes contents originally placed in **folder1** and puts a symbolically linked copy of them in **folder2**. If **folder2** does not already exist, it is created with this command.\n\n##### Link Entire Folders from One Place to Another\n\n[div class=\"table\"]\n| MacOS and Linux              | Windows                            |\n| :-----                       | :-----                             |\n| `ln -s ~\/folder1 ~\/folder2\/` | `mklink \/J C:\\folder2\\ C:\\folder1` |\n[\/div]\n\nThis command copies the entire **folder1** directory and places it in the target location (in this case **folder2**). In this case, **folder2** would need to already exist as it will not be created with this command.\n\n##### Link Individual File(s) from One Place to Another\n\n[div class=\"table\"]\n| MacOS and Linux                      | Windows                                     |\n| :-----                               | :-----                                      |\n| `ln -s ~\/folder1\/file.jpg ~\/folder2` | `mklink \/H C:\\folder2\\ C:\\folder1\\file.jpg` |\n[\/div]\n\nThis is a useful command for symbolically linking individual files. This is especially useful if you have files that are shared between multiple directories and you want to have them update everywhere at the same time. Keep in mind that the original file is the only actual copy, so it must remain where it is for all of the symbolic links to work.\n"},{"title":"CLI Console","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/cli-console","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 7\n\n# CLI Console\n\n**Grav** is developer friendly and provides many useful **command line tools and features** to make things as simple and as scriptable as possible.\n"},{"title":"How to: Ajax Submission","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/forms\/how-to-ajax-submission","taxonomy":{"categories":["docs"],"tags":[]},"media":["simple-form.png","submitted-form.png"],"content":"## Submitting forms via Ajax\n\nThe default mechanism for form processing relies on standard HTML style form submission that causes the contents of an HTML form to be sent to the server via either `POST` or `GET` (default is `POST`). After the form has been [validated](..\/fields-available), and [processed](..\/reference-form-actions), results are sent back to the form (or to a [redirected page](..\/reference-form-actions#redirect)) where messages are displayed and the form can be edited for re-submission if required.\n\nThis involves a page reload, and that is sometimes undesirable.  This is where a form submitted via JavaScript using Ajax or XHR is the preferred option.  Luckily, Grav's form capabilities are up to the task.\n\n### Creating the form\n\nYou can create any standard form you like, so for this example, we'll keep the form as simple as possible to focus on the Ajax handling parts. First, we'll create a form in a page called: `forms\/ajax-test\/` and create a form page called `form.md`:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Ajax Test-Form\nform:\n    name: ajax-test-form\n    action: '\/forms\/ajax-test'\n    template: form-messages\n    refresh_prevention: true\n\n    fields:\n        name:\n            label: Your Name\n            type: text\n\n    buttons:\n        submit:\n            type: submit\n            value: Submit\n\n    process:\n        message: 'Thank you for your submission!'\n---\n[\/prism]\n\nAs you can see this is a very basic form that simply asks for your name and provides a submit button.  The only thing that stands out is the `template: form-messages` part.  As outlined in the [Frontend Forms](..\/..\/forms) section, you can provide a custom Twig template with which to display the result of the form processing.  This is a great way for us to process the form, and then simply return the messages via Ajax and inject them into the page.  There is already a `form-messages.html.twig` template provided with the forms plugin that does just this.\n\n!! NOTE: We use a hard-coded `action: '\/forms\/ajax-test'` so the ajax has a consistent URL rather than the letting the form set the action to the curren page route. This resolves an issue with the Ajax request not handling redirects properly. This can otherwise cause issues on the 'home' page. It doesn't have to be the current form page, it just needs to be a consistent, reachable route.\n\n![](simple-form.png?classes=shadow)\n\n### The page content\n\nIn this same page, we need to put a little HTML and JavaScript:\n\n[prism classes=\"language-twig line-numbers\"]\n<div id=\"form-result\"><\/div>\n\n<script>\n$(document).ready(function(){\n\n    var form = $('#ajax-test-form');\n    form.submit(function(e) {\n        \/\/ prevent form submission\n        e.preventDefault();\n\n        \/\/ submit the form via Ajax\n        $.ajax({\n            url: form.attr('action'),\n            type: form.attr('method'),\n            dataType: 'html',\n            data: form.serialize(),\n            success: function(result) {\n                \/\/ Inject the result in the HTML\n                $('#form-result').html(result);\n            }\n        });\n    });\n});\n<\/script>\n[\/prism]\n\nFirst we define a div placeholder with the ID `#form-result` to use as a location to inject the form results.\n\nWe are using JQuery syntax here for simplicity but obviously, you can use whatever JavaScript you like as long as it performs a similar function.  We first stop the default submit action of the form and make an Ajax call to the form's action with the form's data serialized.  The result of this call is then set back on that div we created earlier.\n\n![](submitted-form.png?classes=shadow)\n"},{"title":"How to: Forms in modular pages","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/forms\/how-to-forms-in-modular-pages","taxonomy":{"categories":["docs"],"tags":[]},"content":"## Using forms in modular pages\n\nIf your theme does not provide a `templates\/forms\/form.html.twig` file, it's not set up to use forms, but no fear - just copy the form templates from Antimatter, the default Grav theme:\n\n- `templates\/form.html.twig`\n- `templates\/formdata.html.twig`\n\nNow, create a modular folder with page type `form.md`\n\nFor example: `01.your-modular-page\/_contact\/form.md`\n\nThe `form.md` page will not contain any form definition. It\u2019s just an indication that this is the part that should output the form.\n\nImportant: set\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ncache_enable: false\n---\n[\/prism]\n\nin that page frontmatter header, because of how modular pages work, if you forget this the form will be cached, along with the nonce that is generated every 12 hours. So when reaching the 12 hours change, the form will stop working until the cache is refreshed. This step is not needed for standalone page forms.\n\nNow add the form header to the main modular page, `modular.md`\n\nThe modular.md page should contain the whole form definition, with fields etc, as if it was a \u201cfull-page\u201d form.md file header. With its own page path as the `form.action` field.\n\n!!! In Form v2.0, you can now define the form directly in the modular sub-page just like any other form. However, if not found, the form plugin will look in the 'current page', i.e. the top-level modular page for a form, so it's fully backwards compatible with the 1.0 way of doing things. !!!\n\nFor example:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ncontent:\n    items: '@self.modular'\n\nform:\n    action: \/your-modular-page\n    name: my-nice-form\n    fields:\n        -\n            name: name\n            label: Name\n            placeholder: 'Enter your name'\n            autofocus: 'on'\n            autocomplete: 'on'\n            type: text\n            default: test\n\n    buttons:\n        -\n            type: submit\n            value: Submit\n\n    process:\n        -\n            message: 'Thank you for your feedback!'\n---\n\n[\/prism]\n\nIn the form header, make sure you add the `action` parameter, with the modular page route\n\nLike present in the example above.\nThis step is needed because if you don't explicitly add `form.action`, the code usually looks for the page route, but being the form in a modular subpage, not an actual page, the path is wrong and breaks the form submit.\n\nSo if the modular page is e.g. `site.com\/my-page`, just put `form: action: \/my-page` in `modular.md`.\nEven if the modular page is the homepage, use the page route, e.g. `form: action: \/home`\n\n#### A live example\n\nThe Deliver skeleton has a modular form page ready to see while reading this tutorial:\n\n[Live page](http:\/\/demo.getgrav.org\/deliver-skeleton\/contact)\n\n[Page markdown file](https:\/\/github.com\/getgrav\/grav-skeleton-deliver-site\/blob\/develop\/pages\/07.contact\/modular_alt.md)\n\n#### Troubleshooting forms in modular pages\n\nThe best way to troubleshoot a form is to first get back to the roots, and add your customizations one-by-one to see what might be going wrong.\n\n- I suggest creating a \"regular form\", making sure it works, then try putting that into a modular form.\n- Try making the form work on an Antimatter-based skeleton, which provides all the files you already need.\n- If the form fields do not appear, if you have installed the Assets plugin disable \/ uninstall it. There's a known issue with it breaking modular forms will be soon fixed.\n"},{"title":"Reference: Form Actions","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/forms\/reference-form-actions","taxonomy":{"categories":["docs"],"tags":[]},"content":"## Form actions\n\nWe saw some example form actions in the simple form example above. Let's detail the actions you can use.\n\n### Email\n\nSends an email with the specified options.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nprocess:\n    - email:\n        from: \"{{ config.plugins.email.from }}\"\n        to: \"{{ config.plugins.email.to }}\"\n        subject: \"Contact by {{ form.value.name|e }}\"\n        body: \"{% include 'forms\/data.html.twig' %}\"\n[\/prism]\n\nSends an email from the email address specified in the Email plugin configuration, sends it to that same email address (it's a contact form, we send it to ourselves).\nUnless you want to use other values, you could freely omit from and to, as they are already configured by default to use these values.\nThe email has the set subject and body.\nIn this case, the body is generated by the `forms\/data.html.twig` file, which is found in the active template (Antimatter and the other main themes have it, but it's not guaranteed that every theme includes it).\n\nAntimatter sets it to\n\n[prism classes=\"language-twig line-numbers\"]\n{% for field in form.fields %}\n    <div><strong>{{ field.label }}<\/strong>: {{ string(form.value(field.name)|e) }}<\/div>\n{% endfor %}\n[\/prism]\n\nIn short, it just loops the values and prints them in the email body.\n\n!! Refer to the email plugin documentation for additional [important form email options](https:\/\/github.com\/getgrav\/grav-plugin-email#emails-sent-with-forms) including [multipart message bodies](https:\/\/github.com\/getgrav\/grav-plugin-email#multi-part-mime-messages) (good for anti-spam scores), `reply_to`, and [attachments](https:\/\/github.com\/getgrav\/grav-plugin-email#sending-attachments).\n\n##### Dynamic email attribute\n\nIf you want for example to set the `email.from` field from a Form input, you can get its content and use it in this way:\n\n`from: \"{{ form.value.email }}\"`\n\nIn this case, we get the field \"email\" from the form, and use it for the \"from\" attribute. This way the site owner will receive an email and will be able to directly reply to the email entered in the form.\n\n### Redirect\n\nRedirects the user to another page. The action is immediate, so if you use this, you probably need to put it at the bottom of the actions list.\n\n[prism classes=\"language-yaml line-numbers\"]\nprocess:\n    - redirect: '\/forms\/landing-page'\n[\/prism]\n\nYou may also set some or all of the `redirect` field from a form input or hidden form field. You can get its content and use it in this way:\n\n`redirect: \"\/path to\/location\/{{ form.value.hiddenfield }}\"`\n\nIn this case, we get the field \"hiddenfield\" from the form, and use it for the last portion of the redirect location. This can be useful when creating forms that, for example, redirect to a download upon completion.\n\n### Message\n\nSets a message to be shown in the next page. Works if you set a `display` action too, which redirects the user to another page. Note, you can use Twig in the message if you like.\n\n[prism classes=\"language-yaml line-numbers\"]\nprocess:\n    - message: Thank you for your feedback!\n    - display: thankyou\n[\/prism]\n\n#### Validation Message\n\nYou can utilize the message action to trigger in the event of a failed validation. For example:\n\n[prism classes=\"language-yaml line-numbers\"]\nusername:\n   type: text\n   label: Username\n  validate:\n     required: true\n     message: My custom message when validation fails!\n[\/prism]\n\nThis will enable you to write a custom message that users will see in the event that validation fails.\n\n### Display\n\nAfter submitting the form the user can be redirected to another page. That page will be a subpage of the form, so for example, if your form lives in `\/form`, you can redirect users to `\/form\/thankyou` with the following code:\n\n[prism classes=\"language-yaml line-numbers\"]\nprocess:\n    - display: thankyou\n[\/prism]\n\nThe Form plugin provides a `formdata` template that's suitable for the process destination page, as it outputs the result of the form submission. In the above example, you could create a `pages\/form\/thankyou\/formdata.md` page.\n\nIf you're redirecting to a subpage, `display: thankyou` works perfectly. If you're redirecting to an absolute page path, like `site.com\/thankyou`, prepend it with `\/`, for example: `display: \/thankyou`.\n\nAntimatter and compatible themes provide the `formdata.html.twig` Twig template, that looks like this:\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n\n    {{ content }}\n\n    <div class=\"alert\">{{ form.message }}<\/div>\n    <p>Here is the summary of what you wrote to us:<\/p>\n\n    {% include \"forms\/data.html.twig\" %}\n\n{% endblock %}\n[\/prism]\n\nIf the `thankyou\/formdata.md` page is\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Email sent\ncache_enable: false\nprocess:\n    twig: true\n---\n\n## Email sent!\n[\/prism]\n\nThe output will be a page with the \"Email sent!\" title, followed by a confirmation message and the form data entered in the previous page.\n\nYou could use any page type you want, as a destination page. Just create your own and set the destination page type accordingly.\n\n### Save\n\nSaves the form data to a file. The file is saved to the `user\/data` folder, in a subfolder named as the `form.name` parameter. For example:\n\n!! The `fileprefix` and `body` can contain Twig markup.\n\n[prism classes=\"language-yaml line-numbers\"]\nprocess:\n    - save:\n        fileprefix: feedback-\n        dateformat: Ymd-His-u\n        extension: txt\n        body: \"{% include 'forms\/data.txt.twig' %}\"\n        operation: create\n[\/prism]\n\nThe body is taken from the theme's `templates\/forms\/data.html.twig` file, provided by Antimatter and updated themes.\n\n! the `operation` can be either `create` (default) to create a new file per-form-submission or `add` to append to a single file.\n\n### Captcha\n\nTo also validate the captcha server-side, add the captcha process action.\n\n[prism classes=\"language-yaml line-numbers\"]\n    process:\n        - captcha:\n            recaptcha_secret: ENTER_YOUR_CAPTCHA_SECRET_KEY\n[\/prism]\n\n!! The `recaptcha_secret` is optional and will use the Form plugin's configuration values if you have provided them there.\n\n### User IP Address\n\nDisplay the user's IP address on the output. Put it above email \/ save processes in the 'form.md' to ensure it is used by the output processe(s).\n\n[prism classes=\"language-yaml line-numbers\"]\nprocess:\n    - ip:\n        label: User IP Address\n[\/prism]\n\n### Reset the form after submit\n\nBy default, the form is not cleared after the submit. So if you don't have a `display` action and the user is sent back to the form page, it's still filled with the data entered. If you want to avoid this, add a `reset` action:\n\n[prism classes=\"language-yaml\"]\nreset: true\n[\/prism]\n\n## Custom Actions\n\nYou can \"hook\" into a form processing and perform any kind of operation. Perform custom processing, add data for an online web application, even save to a database.\n\nTo do this, in the form process field add your own processing action name, for example 'yourAction'.\n\nThen, create a simple plugin.\n\nIn its main PHP file, register for the event `onFormProcessed`\n\n[prism classes=\"language-php line-numbers\"]\nnamespace Grav\\Plugin;\nuse Grav\\Common\\Plugin;\n\nclass EmailPlugin extends Plugin\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onFormProcessed' => ['onFormProcessed', 0]\n        ];\n    }\n}\n[\/prism]\n\nThen provide a handler for the saveToDatabase action:\n\n[prism classes=\"language-php line-numbers\"]\n    public function onFormProcessed(Event $event)\n    {\n        $form = $event['form'];\n        $action = $event['action'];\n        $params = $event['params'];\n\n        switch ($action) {\n            case 'yourAction':\n                \/\/do what you want\n        }\n    }\n[\/prism]\n\nIf your processing might go wrong and you want to stop the next form actions, which are executed in series, you can stop the processing by calling `stopPropagation` on the $event object:\n\n[prism classes=\"language-php line-numbers\"]\n$event->stopPropagation();\nreturn;\n[\/prism]\n\nSample code with form handling is available in the Form plugin, and in the Email plugin repositories.\n\n#### An example of custom form handling\n\nThe Form plugin offers this ability of sending emails, saving files, setting status messages and it\u2019s really handy.\nSometimes however you need total control. That\u2019s for example what the Login plugin does.\n\nIt defines the `login.md` page frontmatter:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: Login\ntemplate: form\n\nform:\n    name: login\n\n    fields:\n        - name: username\n          type: text\n          placeholder: Username\n          autofocus: true\n\n        - name: password\n          type: password\n          placeholder: Password\n[\/prism]\n\nThe Forms plugin correctly generates and shows the form. Notice there\u2019s no `process` defined.\n\nThe form `buttons` are missing too, since they\u2019re manually added in `templates\/login.html.twig`. That\u2019s where the form `action` and `task` are defined too.\n\nIn this case, `task` is `login.login`, and `action` is set to the page url.\n\nWhen a user presses 'Login' in the form, Grav calls the `onTask.login.login` event.\n\n`user\/plugins\/login\/login.php` hooks up to `onTask.login.login` to its `classes\/controller.php` file, and that's where the authentication happens.\n"},{"title":"Example: Contact Form","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/forms\/example-form","taxonomy":{"categories":["docs"],"tags":[]},"content":"## Simple Contact Form\n\nThe **Grav Form Plugin** is the easiest way to have forms on your site. Let's see how to create a simple contact form.\n\n!!! In the future we want Grav to be able to dynamically generate forms from the Admin Plugin\n\n### A Live Example\n\nThe Sora Article skeleton has a form page ready to see while reading this tutorial:\n\n[Live page](http:\/\/demo.getgrav.org\/soraarticle-skeleton\/contact)\n\n[Page markdown file](https:\/\/raw.githubusercontent.com\/getgrav\/grav-skeleton-soraarticle-blog\/develop\/pages\/03.contact\/form.md)\n\n### Setup the Page\n\nYou can put a form inside any page of your site. All you need to do is rename the page markdown file to `form.md`, or add a [template](..\/..\/..\/content\/headers#template) header in the page frontmatter, to make it use the `form` template.\n\nThe form fields and processing instructions are defined in the YAML frontmatter of the page, so just open the page markdown file with your favorite editor, and put the following code in it:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Contact Form\n\nform:\n    name: contact\n\n    fields:\n        - name: name\n          label: Name\n          placeholder: Enter your name\n          autocomplete: on\n          type: text\n          validate:\n            required: true\n\n        - name: email\n          label: Email\n          placeholder: Enter your email address\n          type: email\n          validate:\n            required: true\n\n        - name: message\n          label: Message\n          placeholder: Enter your message\n          type: textarea\n          validate:\n            required: true\n\n        - name: g-recaptcha-response\n          label: Captcha\n          type: captcha\n          recaptcha_site_key: ENTER_YOUR_CAPTCHA_SITE_KEY\n          recaptcha_not_validated: 'Captcha not valid!'\n          validate:\n            required: true\n\n    buttons:\n        - type: submit\n          value: Submit\n        - type: reset\n          value: Reset\n\n    process:\n        - captcha:\n            recaptcha_secret: ENTER_YOUR_CAPTCHA_SECRET_KEY\n        - email:\n            subject: \"[Site Contact Form] {{ form.value.name|e }}\"\n            body: \"{% include 'forms\/data.html.twig' %}\"\n        - save:\n            fileprefix: contact-\n            dateformat: Ymd-His-u\n            extension: txt\n            body: \"{% include 'forms\/data.txt.twig' %}\"\n        - message: Thank you for getting in touch!\n        - display: thankyou\n---\n\n# Contact form\n\nSome sample page content\n[\/prism]\n\n!!! Make sure you configured the \"Email from\" and \"Email to\" email addresses in the Email plugin with your email address\n\nMake sure you add your own `recaptcha_site_key` reCAPTCHA parameter ([see the reCAPTCHA V2 docs](https:\/\/developers.google.com\/recaptcha\/intro)). If you don't need captcha at all, just remove it from the form fields, and remove the captcha process action too.\n\nNow inside the page folder create a subfolder named `thankyou\/`, create a new file named `formdata.md`. And paste the following code into the file:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Email sent\ncache_enable: false\nprocess:\n    twig: true\n---\n\n## Email sent!\n[\/prism]\n\nThat's it!\n\n!!! Modular pages are a bit different. In this case, also see [using forms in modular pages](https:\/\/learn.getgrav.org\/forms\/forms\/how-to-forms-in-modular-pages)\n\nWhen users submit the form, the plugin will send an email to you (as set in the `form` setting of the Grav Email Plugin), and will save the entered data in the data\/ folder.\n\n! For full details on setting up and configuring email, please read the [Email plugin documentation](https:\/\/github.com\/getgrav\/grav-plugin-email\/blob\/develop\/README.md)\n\nYou can activate the **Grav Data Manager** plugin to see that data in the **Admin Plugin**.\n"},{"title":"Reference: Form Field Index","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/forms\/fields-available","taxonomy":{"categories":["docs"],"tags":[]},"media":["checkboxes_field.gif","checkbox_field.gif","datetime_field.gif","date_field.gif","display_field.jpg","email_field.gif","password_field.gif","radio_field.gif","range_field.gif","select_field.gif","select_optgroup_field.gif","textarea_field.gif","text_field.gif"],"content":"## Which fields you can use\n\nThe Forms plugin provides the following fields, which you can use to build your forms.\n\n[div class=\"table table-keycol\"]\n| Field                                             | Description                                                               |\n| :-----                                            | :-----                                                                    |\n| **Array**                                         |                                                                           |\n| **Avatar**                                        |                                                                           |\n| **[Captcha](#the-captcha-field)**                 | A captcha antispam field, using reCAPTCHA                                 |\n| **[Checkbox](#the-checkbox-field)**               | A simple checkbox                                                         |\n| **[Checkboxes](#the-checkboxes-field)**           | A series of checkboxes                                                    |\n| **Color**                                         |                                                                           |\n| **Columns**                                       |                                                                           |\n| **Column**                                        |                                                                           |\n| **[Conditional](#the-conditional-field)**         | A conditional field that will display or hide fields based on a condition |\n| **[Date](#the-date-field)**                       | A date selection field                                                    |\n| **Datetime**                                      |                                                                           |\n| **[Display](#the-display-field)**                 | A text or instructions field (not an input field)                         |\n| **[Email](#the-email-field)**                     | An email field, with validation                                           |\n| **Fieldset**                                      |                                                                           |\n| **[File](#the-file-field)**                       | A file field for uploading                                                |\n| **Formname**                                      |                                                                           |\n| **[Hidden](#the-hidden-field)**                   | An hidden field                                                           |\n| **[Honeypot](#the-honeypot-field)**               | A hidden field which returns an error when filled                         |\n| **[Ignore](#the-ignore-field)**                   | used to remove unused fields when extending from another blueprint        |\n| **Key**                                           |                                                                           |\n| **Month**                                         |                                                                           |\n| **Number**                                        |                                                                           |\n| **[Password](#the-password-field)**               | A password field                                                          |\n| **[Radio](#the-radio-field)**                     | A radio input type                                                        |\n| **[Range](#the-range-field)**                     | A range input type                                                        |\n| **[Select](#the-select-field)**                   | A select field                                                            |\n| **[Select OptGroup](#the-select-optgroup-field)** | A grouping of options used within a select field                          |\n| **Signature**                                     |                                                                           |\n| **[Spacer](#the-spacer-field)**                   | Used to add a title, text or a horizontal line to the form                |\n| **Switch**                                        |                                                                           |\n| **[Tabs](#the-tabs-tab-fields)**                  | divides the settings in a list of tabs                                    |\n| **[Tab](#the-tabs-tab-fields)**                   | used by the `Tabs` field to render a tab                                  |\n| **Tel**                                           |                                                                           |\n| **[Text](#the-text-field)**                       | A simple text field                                                       |\n| **[Textarea](#the-textarea-field)**               | A textarea                                                                |\n| **Time**                                          |                                                                           |\n| **[Toggle](#the-toggle-field)**                   | a on\/off kind of input, with configurable labels                          |\n| **Unique Id**                                     |                                                                           |\n| **Url**                                           |                                                                           |\n| **Value**                                         |                                                                           |\n| **Week**                                          |                                                                           |\n[\/div]\n\n### Common Field Attributes\n\nEvery field accepts a list of attributes you can use. Each field could share these common attributes, but particular fields might ignore them. The best way to check which attributes are allowed on a field is to check the field description in this page and see which attributes are mentioned.\n\nThis list provides a common grou\nnd so there's no need to repeat the description of a common field.\n\n[div class=\"table table-keycol\"]\n| Attribute           | Description                                                                                                                                                                                                    |\n| :-----              | :-----                                                                                                                                                                                                         |\n| `autocomplete`      | Accepts `on` or `off`                                                                                                                                                                                          |\n| `autofocus`         | if enabled, autofocus on that field                                                                                                                                                                            |\n| `classes`           | accepts a string with one or more CSS classes to add                                                                                                                                                           |\n| `default`           | sets the field default value                                                                                                                                                                                   |\n| `disabled`          | sets the field disabled state                                                                                                                                                                                  |\n| `help`              | Adds a tooltip to the field                                                                                                                                                                                    |\n| `id`                | sets the field id. Also sets the `for` attribute on the label                                                                                                                                                  |\n| `label`             | sets the field label                                                                                                                                                                                           |\n| `display_label`     | Accepts `true` or `false`                                                                                                                                                                                           |\n| `name`              | sets the field name                                                                                                                                                                                            |\n| `novalidate`        | sets the field novalidate state                                                                                                                                                                                |\n| `outerclasses`      | Classes added to the div that includes the label and the field                                                                                                                                                 |\n| `placeholder`       | sets the field placeholder value                                                                                                                                                                               |\n| `readonly`          | sets the field readonly state                                                                                                                                                                                  |\n| `size`              | sets the field size, which in turn adds a class to its container. Valid values are `large`, `x-small`, `medium`, `long`, `small`. You can ofcourse add more in the template you see, when used in the frontend |\n| `style`             | sets the field style                                                                                                                                                                                           |\n| `title`             | sets the field title value                                                                                                                                                                                     |\n| `type`              | sets the field type                                                                                                                                                                                            |\n| `validate.required` | if set to a positive value, sets the field as required.                                                                                                                                                        |\n| `validate.pattern`  | sets a validation pattern                                                                                                                                                                                      |\n| `validate.message`  | sets the message shown if the validation fails                                                                                                                                                                 |\n[\/div]\n\n### Positive values\n\nYou can set positive values in multiple ways: `'on'`, `true`, `1`.\nOther values are interpreted as negative.\n\n---\n\n### Captcha Field\n\nThe `captcha` field type is used to add a Google reCAPTCHA element to your form. Unlike other elements, it can be used once in the form.\n\nAlso, the `name` attribute of the captcha field must be `g-recaptcha-response`. The reason is that Google reCAPTCHA stores the Captcha confirmation code in a field named `g-recaptcha-response`.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\n-\n  name: g-recaptcha-response\n  label: Captcha\n  type: captcha\n  recaptcha_site_key: j3jeoi3jeroi23jrio234jro32nrkj43njrn32rn3\n  recaptcha_not_validated: 'Captcha not valid!'\n  validate:\n    required: true\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute                 | Description                                     |\n| :-----                    | :-----                                          |\n| `recaptcha_site_key`      | The Google reCAPTCHA Site Key                   |\n| `recaptcha_not_validated` | The message to show if the captcha is not valid |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [outerclasses](#common-fields-attributes)      |\n| [validate.required](#common-fields-attributes) |\n[\/div]\n\n\n##### Server-side Captcha validation\n\nThe above code will validate the Captcha in the frontend and prevent form submission if not correct. To also validate the captcha server-side, add the captcha process action to your forms:\n\n[prism classes=\"language-yaml line-numbers\"]\n    process:\n        - captcha:\n            recaptcha_secret: ENTER_YOUR_CAPTCHA_SECRET_KEY\n[\/prism]\n\n[See the Contact Form example](\/forms\/forms\/example-form) to see it in action.\n\n---\n\n### Checkbox Field\n\n![Checkbox Field](checkbox_field.gif)\n\nThe `checkbox` field type is used to add a single checkbox to your form.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nagree_to_terms:\n  type: checkbox\n  label: \"Agree to the terms and conditions\"\n  validate:\n      required: true\n[\/prism]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Checkboxes Field\n\n![Checkboxes Field](checkboxes_field.gif)\n\nThe `checkboxes` field type is used to add a group of checkboxes to your form.\n\nExamples:\n\n[prism classes=\"language-yaml line-numbers\"]\npages.process:\n    type: checkboxes\n    label: PLUGIN_ADMIN.PROCESS\n    help: PLUGIN_ADMIN.PROCESS_HELP\n    default:\n        markdown: true\n        twig: true\n    options:\n        markdown: Markdown\n        twig: Twig\n    use: keys\n[\/prism]\n\n[prism classes=\"language-yaml line-numbers\"]\nmy_field:\n    type: checkboxes\n    label: A couple of checkboxes\n    default:\n        option1: true\n        option2: true\n    options:\n        option1: Option 1\n        option2: Option 2\n[\/prism]\n\n\n[div class=\"table table-keycol\"]\n| Attribute | Description                                                                                                                                    |\n| :-----    | :-----                                                                                                                                         |\n| `use`     | When set to `keys`, the checkbox will store the value of the element key when the form is submitted. Otherwise, it will use the element value. |\n| `options` | An array of key-value options that will be allowed.                                                                                            |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [outerclasses](#common-fields-attributes)      |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n### Conditional Field\n\n\nThe `conditional` field type is used to conditionally display some other fields base on a condition.\n\nExamples:\n\nIf your conditional already returns a `true` or `false` then you can simply use this simplified format:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.field_condition:\n  type: conditional\n  condition: config.plugins.yourplugin.enabled\n  fields: # The field(s) below will be displayed only if the plugin named yourplugin is enabled\n    header.mytextfield:\n    type: text\n    label: A text field\n[\/prism]\n\nHowever, if you require more complex conditions, you can perform some logic that returns `'true'` or `'false'` as strings, and the field will understand that too.\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.field_condition:\n  type: conditional\n  condition: \"config.plugins.yourplugin.enabled ? 'true' : 'false'\"\n  fields: # The field(s) below will be displayed only if the plugin named yourplugin is enabled\n    header.mytextfield:\n    type: text\n    label: A text field\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute   | Description                                                                       |\n| :-----      | :-----                                                                            |\n| `condition` | The condition evaluated by twig. Any variable accessible by twig can be evaluated |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed             |\n| :-----                                |\n| [disabled](#common-fields-attributes) |\n| [id](#common-fields-attributes)       |\n| [label](#common-fields-attributes)    |\n| [name](#common-fields-attributes)     |\n[\/div]\n\n---\n\n### Date Field\n\n![Date Field](date_field.gif)\n\nThe `date` field type is used to add an HTML5 `date` input field.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\n-\n  type: date\n  label: Enter a date\n  validate.min: \"2014-01-01\"\n  validate.max: \"2018-12-31\"\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute      | Description                                                                                                                                                                                        |\n| :-----         | :-----                                                                                                                                                                                             |\n| `validate.min` | Sets the `min` attribute of the field (see [http:\/\/html5doctor.com\/the-woes-of-date-input\/#feature-min-max-attributes](http:\/\/html5doctor.com\/the-woes-of-date-input\/#feature-min-max-attributes)) |\n| `validate.max` | Sets the `max` attribute of the field (see [http:\/\/html5doctor.com\/the-woes-of-date-input\/#feature-min-max-attributes](http:\/\/html5doctor.com\/the-woes-of-date-input\/#feature-min-max-attributes)) |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [readonly](#common-fields-attributes)          |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [title](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Display Field\n\n![Display Field](display_field.jpg)\n\nThe `display` field type is used to show some text or instructions inside the form. Can accept markdown content\n\nExample:\n\n\n[prism classes=\"language-yaml line-numbers\"]\ntest:\n    type: display\n    size: large\n    label: Instructions\n    markdown: true\n    content: \"This is a test of **bold** and _italic_ in a text\/display field\\n\\nanother paragraph....\"\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute  | Description                                                         |\n| :-----     | :-----                                                              |\n| `markdown` | boolean value that enables markdown processing on the content field |\n| `content`  | the textual content to show                                         |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                 |\n| :-----                                    |\n| [help](#common-fields-attributes)         |\n| [id](#common-fields-attributes)        |\n| [label](#common-fields-attributes)        |\n| [name](#common-fields-attributes)         |\n| [id](#common-fields-attributes)           |\n| [outerclasses](#common-fields-attributes) |\n| [size](#common-fields-attributes)         |\n| [style](#common-fields-attributes)        |\n[\/div]\n\n---\n\n### Email Field\n\n![Email Field](email_field.gif)\n\nThe `email` field type is used to present a text input field that accepts an email, using the [email HTML5 input](http:\/\/html5doctor.com\/html5-forms-input-types\/#input-email).\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\nheader.email:\n  type: email\n  autofocus: true\n  label: Email\n[\/prism]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [readonly](#common-fields-attributes)          |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [title](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### File Field\n\nWith the `file` field type, you can let users upload files through the form. The field by default allows **one file** only, of type **image** and will get uploaded to the **current** page where the form has been declared.\n\n[prism classes=\"language-yaml line-numbers\"]\n# Default settings\nmy_files:\n  type: file\n  multiple: false\n  destination: '@self'\n  accept:\n    - image\/*\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| :-----        | :-----                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `multiple`    | Can be `true` or `false`, when set to **true**, multiple files can be selected at the same time                                                                                                                                                                                                                                                                                                                                                                                          |\n| `destination` | Can be either **@self**, **@page:\/route** or **local\/rel\/path\/**. <br>Set to **@self**, the files will be uploaded where the form has been declared (current .md). <br>Using **@page:\/route** will upload to the specified route of a page, if exists (e.g., **@page:\/blog\/a-blog-post**). <br>Set to **'local\/rel\/path'**: Can be any path relative to the Grav instance. For instance, `user\/data\/files`. If the path doesn't exist, it will get created, so make sure it is writable. |\n| `accept`      | Takes an array of MIME types that are allowed. For instance to allow only gifs and mp4 files: `accept: ['image\/gif', 'video\/mp4']`                                                                                                                                                                                                                                                                                                                                                       |\n\n[\/div]\n\n!!! The File field in the admin is a bit different, allowing also to delete a file uploaded to a form, because the use-case in admin is to upload and then associate a file to a field.\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [outerclasses](#common-fields-attributes)      |\n| [validate.required](#common-fields-attributes) |\n[\/div]\n\nBy default, in Admin the `file` field will overwrite an uploaded file that has the same name of a newer one, contained in the same folder you want to upload it, unless you set `avoid_overwriting` to `true` in the field definition.\n\n---\n\n### Hidden Field\n\nThe `hidden` field type is used to add a hidden element to a form.\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\nheader.some_field:\n  type: hidden\n  default: my-value\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute | Description                                                                                                                     |\n| :-----    | :-----                                                                                                                          |\n| `name`    | The field name. If missing, the field name is got from the field definition element (in the example above: `header.some_field`) |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed            |\n| :-----                               |\n| [default](#common-fields-attributes) |\n[\/div]\n\n---\n\n### Honeypot Field\n\nThe `honeypot` field type creates a hidden field that, when filled out, will return with an error. This is a useful way to prevent bots from filling out and submitting a form.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nfields:\n    - name: honeypot\n      type: honeypot\n[\/prism]\n\nThis is a simple text field which does not appear on the front end. Bots, which detect fields in the code and fill them out automatically, will likely fill the field out. The error prevents that form from being properly submitted. The error comes back next to the form element, rather than on the top in a message block.\n\nA honeypot field is a popular alternative to captcha fields.\n\n---\n\n### Ignore Field\n\nThe `ignore` field type can be used to remove unused fields when extending from another blueprint\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.process:\n  type: ignore\ncontent:\n  type: ignore\n[\/prism]\n\n---\n\n### Password Field\n\nThe `password` field type is used to present a password text input field.\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\npassword:\n  type: password\n  label: Password\n[\/prism]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [readonly](#common-fields-attributes)          |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [title](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Radio Field\n\n![Radio Field](radio_field.gif)\n\nThe `radio` field type is used to present a set of radio fields\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\nmy_choice:\n  type: radio\n  label: Choice\n  default: markdown\n  options:\n      markdown: Markdown\n      twig: Twig\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute | Description                                         |\n| :-----    | :-----                                              |\n| `options` | An array of key-value options that will be allowed. |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [outerclasses](#common-fields-attributes)      |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Range Field\n\n![Range Field](range_field.gif)\n\nThe `range` field is used to present a [range input field](http:\/\/html5doctor.com\/html5-forms-input-types\/#input-range).\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\nheader.choose_a_number_in_range:\n  type: range\n  label: Choose a number\n  validate:\n    min: 1\n    max: 10\n[\/prism]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [readonly](#common-fields-attributes)          |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [title](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Select Field\n\n![Select Field](select_field.gif)\n\nThe `select` field type is used to present a select field.\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\npages.order.by:\n    type: select\n    size: long\n    classes: fancy\n    label: PLUGIN_ADMIN.DEFAULT_ORDERING\n    help: PLUGIN_ADMIN.DEFAULT_ORDERING_HELP\n    options:\n        default: PLUGIN_ADMIN.DEFAULT_ORDERING_DEFAULT\n        folder: PLUGIN_ADMIN.DEFAULT_ORDERING_FOLDER\n        title: PLUGIN_ADMIN.DEFAULT_ORDERING_TITLE\n        date: PLUGIN_ADMIN.DEFAULT_ORDERING_DATE\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute  | Description                                         |\n| :-----     | :-----                                              |\n| `options`  | An array of key-value options that will be allowed. |\n| `multiple` | Allow the form to accept multiple values.           |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Select Optgroup Field\n\n![Select Optgroup Field](select_optgroup_field.gif)\n\nThe `select_optgroup` field type is used to present a select field with groupings.\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\nheader.newField:\n    type: select_optgroup\n    label: Test Optgroup Select Field\n    options:\n      - OptGroup1:\n        - Option1\n        - Option2\n      - OptGroup2:\n        - Option3\n        - Option4\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute  | Description                                         |\n| :-----     | :-----                                              |\n| `options`  | An array of key-value options that will be allowed. |\n| `multiple` | Allow the form to accept multiple values.           |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Spacer Field\n\nThe `spacer` field type is used to add some text, a headline or a hr tag\n\nExample:\n\n\n[prism classes=\"language-yaml line-numbers\"]\ntest:\n    type: spacer\n    title: A title\n    text: Some text\n    underline: true\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute   | Description                                            |\n| :-----      | :-----                                                 |\n| `title`     | add a h3 title to the form                             |\n| `text`      | Add some text. If title is set, add it after the title |\n| `underline` | boolean, add a `<hr>` tag if positive                  |\n[\/div]\n\n---\n\n### Tabs \/ Tab Fields\n\n![Tabs](tabs_field_bp.gif)\n\nThe `tabs` and `tab` field types are used to divide the contained form fields in tabs.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\ntabs:\n  type: tabs\n  active: 1\n\n  fields:\n    content:\n      type: tab\n      title: PLUGIN_ADMIN.CONTENT\n\n      fields:\n\n        # .... other subfields\n\n    options:\n      type: tab\n      title: PLUGIN_ADMIN.OPTIONS\n\n      fields:\n\n        # .... other subfields\n[\/prism]\n\n\n[div class=\"table table-keycol\"]\n| Attribute | Description           |\n| :-----    | :-----                |\n| `active`  | The active tab number |\n[\/div]\n\n---\n\n### Text Field\n\n![Text Field](text_field.gif)\n\nThe `text` field is used to present a text input field.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.title:\n  type: text\n  autofocus: true\n  label: PLUGIN_ADMIN.TITLE\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute | Description                                       |\n| :-----    | :-----                                            |\n| `prepend` | prepend some text or HTML to the front of a field |\n| `append`  | append some text or HTML to the end of a field  |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [readonly](#common-fields-attributes)          |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [title](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n\n---\n\n### Textarea Field\n\n![Textarea Field](textarea_field.gif)\n\nThe `textarea` field is used to present a textarea input field.\n\nExample:\n[prism classes=\"language-yaml line-numbers\"]\nheader.content:\n  type: textarea\n  autofocus: true\n  label: PLUGIN_ADMIN.CONTENT\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute | Description                                                     |\n| :-----    | :-----                                                          |\n| `rows`    | Add a rows attribute with the value associated with this property |\n| `cols`    | Add a cols attribute with the value associated with this property |\n\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [readonly](#common-fields-attributes)          |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [title](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n\n---\n\n### Toggle Field\n\n![Toggle Field](toggle_field_bp.gif)\n\nThe `toggle` field type is an on\/off kind of input, with configurable labels.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nsummary.enabled:\n    type: toggle\n    label: PLUGIN_ADMIN.ENABLED\n    highlight: 1\n    help: PLUGIN_ADMIN.ENABLED_HELP\n    options:\n        1: PLUGIN_ADMIN.YES\n        0: PLUGIN_ADMIN.NO\n    validate:\n        type: bool\n[\/prism]\n\n\n[div class=\"table table-keycol\"]\n| Attribute   | Description                                                  |\n| :-----      | :-----                                                       |\n| `highlight` | The key of the option to highlight (set green when selected) |\n| `options`   | The list of key-value options                              |\n\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n| [disabled](#common-fields-attributes)          |\n"},{"title":"Reference: Form Options","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/forms\/form-options","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Name\n\nThere are no required options for forms.  However as outlined in the [Frontend Forms](..\/..\/forms) overview, it is highly recommend to at least have a form name:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    name: my-form\n[\/prism]\n\nThis **must be unique** for your Grav site. This is because the form's name serves as a unique identifier for this form through the system.  A form can be referenced by this name from any other page.\n\n### Method\n\nThis option allows you to control if the form should be submitted via `POST` or `GET`.  The default is `POST`.  Also note, if you have a `file` field in your form, the method will also get `enctype=\"multipart\/form-data\"` appended:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    method: GET\n[\/prism]\n\n\n### Action\n\nThe action by default is going to be the route as the current page.  This makes sense most of the time because the form needs to be processed by the same page that houses the form.  There are times when you want to override the action however to either specify a different file extension (`.json` perhaps) or even target a specific page anchor:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    action: \/contact-us#contact-form\n[\/prism]\n\nYou can even process the form on another page if that page is where you want to handle the results.  This can also be used as a technique to alter the template of the response from the one used in the original form:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    action: \/contact-us\/ajax-process\n[\/prism]\n\nWhere you have a page file called `form-messages.html.twig` that returns just the message data.  Alternatively you can use the approach below...\n\n### Template\n\nUsually the page's Twig template that displays the form is perfectly capable of handling any success\/failure messages or in-line validation responses.  However sometimes it's useful to send the form response back using a different Twig template.  A good example of this is when you want to process your form via Ajax.  You probably only want the HTML for the success\/failure messages to be returned by the template, so these can be injected back into the page by JavaScript:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    template: form-messages\n[\/prism]\n\n### ID\n\nThe ability to set a form-level CSS `id` field. If not provided the form's name is used.\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    id: my-form-id\n[\/prism]\n\n### Classes\n\nYou can also set explicit classes on the form.  There are no default values here.\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    classes: 'form-style form-surround'\n[\/prism]\n\n### Inline Errors\n\nSetting Inline Errors in the form's markdown file or definition enables the display of in-line errors, an important troubleshooting tool.\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    inline_errors: true\n[\/prism]\n\n### Client-side Validation\n\nTurning client-side validation off will enable you to see in-line errors and detailed server-side validation that go beyond the HTML5 client-side validation. You can disable client-side validation through form.yaml or in the form definition.\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    client_side_validation: false\n[\/prism]\n\n### Keep Alive\n\nYou can ensure your forms do fail to submit when your session expires, by enabling the `keep_alive` option on the form.  By enabling this, an AJAX request will be made to Grav before your session expires to keep it 'fresh':\n\n[prism classes=\"language-yaml line-numbers\"]\nform:    \n    keep_alive: true\n[\/prism]\n\n### Fieldsets\n\nYou can set up `<fieldset><\/fieldset>` tags for the fields in your form using the `fieldset:` designation in the form.\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n    name: Example Form\n    fields:\n        example:\n            type: fieldset\n            id: my-fieldset\n            legend: 'Test Fieldset'\n            fields:\n                first_field: { type: text, label: 'First Field' }\n                second_field: { type: text, label: 'Second Field' }\n[\/prism]\n\nThe above form outputs as follows:\n\n[prism classes=\"language-html line-numbers\"]\n<form action=\"\/grav\/example\/forms\" class=\"\" id=\"my-example-form\" method=\"post\" name=\"Example Form\">\n  <fieldset id=\"my-fieldset\">\n    <legend>Test Fieldset<\/legend>\n    <div class=\"form-group\">\n      <div class=\"form-label-wrapper\">\n        <label class=\"form-label\">First Field<\/label>\n      <\/div>\n      <div class=\"form-data\" data-grav-default=\"null\" data-grav-disabled=\"true\" data-grav-field=\"text\">\n        <div class=\"form-input-wrapper\">\n          <input class=\"form-input\" name=\"data[first_field]\" type=\"text\" value=\"\">\n        <\/div>\n      <\/div>\n    <\/div>\n    <div class=\"form-group\">\n      <div class=\"form-label-wrapper\">\n        <label class=\"form-label\">Second Field<\/label>\n      <\/div>\n      <div class=\"form-data\" data-grav-default=\"null\" data-grav-disabled=\"true\" data-grav-field=\"text\">\n        <div class=\"form-input-wrapper\">\n          <input class=\"form-input\" name=\"data[second_field]\" type=\"text\" value=\"\">\n        <\/div>\n      <\/div>\n    <\/div>\n  <\/fieldset>\n<\/form>\n[\/prism]\n\nIn the above example, the fields appear within the `my-fieldset` fieldset. You'll also notice that the `<legend><\/legend>` tags are supporting through the `legend:` option.\n"},{"title":"Frontend Forms","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/forms","taxonomy":{"categories":["docs"],"tags":[]},"content":"The **Form** plugin gives you the ability to create virtually any type of frontend form. It is essentially a form construction kit, available for you to use in your own pages. Before going any further, don't forget to install the [**Form** plugin](https:\/\/github.com\/getgrav\/grav-plugin-form) with `bin\/gpm install form` if it's not installed yet.\n\nTo get an understanding of how the **Form** plugin works, let's start by going over how to create a simple form.\n\n!!!! With **Form 2.0** release, it is now required to pass the **name of the form** as a hidden field.  If you are using the form-plugin-provided `forms.html.twig`, this is handled automatically, however, if you have overridden the default `forms.html.twig` in your theme or plugin, you should manually add `{% include \"forms\/fields\/formname\/formname.html.twig\" %}` in your form-rendering Twig file.\n\n## Create a simple single form\n\nTo add a form to a page of your site, create a page, and set its Page File to \"Form\". You can do it via the Admin Panel, or via filesystem directly by naming the page `form.md`.\n\nSo, for example, `user\/pages\/03.your-form\/form.md`.\n\nThe contents of this page will be:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: A Page with an Example Form\nform:\n    name: contact-form\n    fields:\n        - name: name\n          label: Name\n          placeholder: Enter your name\n          autofocus: on\n          autocomplete: on\n          type: text\n          validate:\n            required: true\n\n        - name: email\n          label: Email\n          placeholder: Enter your email address\n          type: email\n          validate:\n            required: true\n\n    buttons:\n        - type: submit\n          value: Submit\n        - type: reset\n          value: Reset\n\n    process:\n        - email:\n            from: \"{{ config.plugins.email.from }}\"\n            to:\n              - \"{{ config.plugins.email.to }}\"\n              - \"{{ form.value.email }}\"\n            subject: \"[Feedback] {{ form.value.name|e }}\"\n            body: \"{% include 'forms\/data.html.twig' %}\"\n        - save:\n            fileprefix: feedback-\n            dateformat: Ymd-His-u\n            extension: txt\n            body: \"{% include 'forms\/data.txt.twig' %}\"\n        - message: Thank you for your feedback!\n        - display: thankyou\n\n---\n\n# My Form\n\nRegular **markdown** content goes here...\n[\/prism]\n\n!!! This is the content of the `form.md` file, when viewed via file-system. To do this via Admin Plugin, open the page in **Expert Mode**, copy the part between the triple dashes `---`, and paste it in the Frontmatter field.\n\nThis is enough to show a form in the page, below the page's content. It is a simple form with a name, email field, two buttons: one to submit the form and one to reset the fields. For more information on the available fields that are provided by the Form plugin, [check out the next section](fields-available).\n\nWhat happens when you press the `Submit` button?  It executes the `process` actions in series. To find out about other actions, [check out the available options](reference-form-actions) or [create your own](reference-form-actions#add-your-own-custom-processing-to-a-form).\n\n1. An email is sent to the email entered, with the subject `[Feedback] [name entered]`. The body of the email is defined in the `forms\/data.html.twig` file of the theme in use.\n\n2. A file is created in `user\/data` to store the form input data. The template is defined in `forms\/data.txt.twig` of the theme in use.\n\n3. The `thankyou` subpage is shown, along with the passed message. The `thankyou` page must be a subpage of the page containing the form.\n\n!!! Make sure you configured the **Email** plugin to ensure it has the correct configuration in order to send email successfully.\n\n## Multiple Forms\n\nWith the release of **Form Plugin v2.0**, you are now able to define multiple forms in a single page.  The syntax is similar but each form is differentiated by the name of the form, in this case `contact-form` and `newsletter-form`:\n\n[prism classes=\"language-yaml line-numbers\"]\nforms:\n    contact-form:\n        fields:\n            ...\n        buttons:\n            ...\n        process:\n            ...\n\n    newsletter-form:\n        fields:\n            ...\n        buttons:\n            ...\n        process:\n            ...\n[\/prism]\n\nYou can even use this format for single forms, by just providing one form under `forms:`:\n\n[prism classes=\"language-yaml line-numbers\"]\nforms:\n    contact-form:\n        fields:\n            ...\n        buttons:\n            ...\n        process:\n            ...\n[\/prism]\n\n## Displaying Forms from Twig\n\nThe easiest way to include a form is to simply include a Twig file in the template that renders the page where the form is defined.  For example:\n\n[prism classes=\"language-twig line-numbers\"]\n{% include \"forms\/form.html.twig\" %}\n[\/prism]\n\nThis will use the Twig template provided by the Form plugin itself.  In turn, it will render the form as you have defined in the page, and handle displaying a success message, or errors, when the form is submitted.\n\nThere is however a more powerful method of displaying forms that can take advantage of the new multi-forms support.  With this method you actually pass a `form:` parameter to the Twig template specifying the form you wish to display:\n\n[prism classes=\"language-twig line-numbers\"]\n{% include \"forms\/form.html.twig\" with { form: forms('contact-form') } %}\n[\/prism]\n\nUsing this method, you can choose a specific name of a form to display.  You can even provide the name of a form defined in other pages.  As long as all your form names are unique throughout your site, Grav will find and render the correct form!\n\nYou can even display multiple forms in one page:\n\n[prism classes=\"language-twig line-numbers\"]\n# Contact Form\n{% include \"forms\/form.html.twig\" with { form: forms('contact-form') } %}\n\n# Newsletter Signup\n{% include \"forms\/form.html.twig\" with { form: forms('newsletter-form') } %}\n[\/prism]\n\nAn alternative way to display a form is to reference the page route rather than the form name using an array, for example:\n\n[prism classes=\"language-twig line-numbers\"]\n# Contact Form\n{% include \"forms\/form.html.twig\" with { form: forms( {route:'\/forms\/contact'} ) } %}\n[\/prism]\n\nThis will find the first form from the page with route `\/forms\/contact`\n\n## Displaying Forms in Page Content\n\nYou can also display a form from within your page content (for example `default.md`) directly without that page even having a form defined within it. Simply pass the name or route to the form.\n\n!!  **Twig processing** should be enabled and **page cache** should be disabled to ensure the form is dynamically processed on the page and not statically cached and form handling can occur.\n\n[prism classes=\"language-twig line-numbers\"]\n---\ntitle: Page with Forms\nprocess:\n  twig: true\ncache_enable: false\n---\n\n# Contact Form\n{% include \"forms\/form.html.twig\" with {form: forms('contact-form')} %}\n\n# Newsletter Signup\n{% include \"forms\/form.html.twig\" with {form: forms( {route: '\/newsletter-signup'} ) } %}\n[\/prism]\n\n## Modular Forms\n\nWith previous versions of the Form plugin, to get a form to display in a modular sub-page of your overall **modular** page, you had to define the form in the **top-level modular page**.  This way the form would be processed and available to display in the modular sub-page.\n\nIn **Form v2.0**, you can now define the form directly in the modular sub-page just like any other form.  However, if not found, the form plugin will look in the 'current page', i.e. the top-level modular page for a form, so it's fully backwards compatible with the 1.0 way of doing things.\n\nYou can also configure your Modular sub-page's Twig template to use a form from another page, like the examples above.\n\n! When using a form defined in a modular sub-page you should set the **action:** to the parent modular page and configure your form with a **redirect:** or **display:** action, as this modular sub-page is not a suitable page to load on form submission because it is **not routable**, and therefore not reachable by a browser.  \n\nHere's an example that exists at `form\/modular\/_form\/form.md`:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Modular Form\n\nform:\n  action: '\/form\/modular'\n  inline_errors: true\n  fields:\n    person.name:\n      type: text\n      label: Name\n      validate:\n        required: true\n        \n  buttons:\n    submit:\n      type: submit\n      value: Submit\n      \n  process:\n    message: \"Thank you from your submission <b>{{ form.value('person.name') }}<\/b>!\"\n    reset: true\n    display: '\/form\/modular'  \n---\n\n## Modular Form\n[\/prism]\n\n"},{"title":"Advanced Blueprint Features","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints\/advanced-features","taxonomy":{"categories":["docs"],"tags":[]},"content":"!!!! These advanced features are only available in **Grav 1.1.x**.  They will not work in Grav 1.0.x\n\nThere are some advanced features in the blueprints which allow you to extend them and to have dynamic fields.\n\n## Defining Validation Rules\n\nIf you need the same validation rules multiple times, you can create your own custom rule for it.\n\n[prism classes=\"language-yaml line-numbers\"]\nrules:\n  slug:\n    pattern: \"[a-z][a-z0-9_\\-]+\"\n    min: 2\n    max: 80\nform:\n  fields:\n    folder:\n      type: text\n      label: Folder Name\n      validate:\n        rule: slug\n[\/prism]\n\nAbove example creates rule `slug`, which is then used in the folder field of the form.\n\n## Extending Base Type (extends@)\n\nYou can extend existing blueprints. Basically extending allows you to add new fields as well as modify existing ones from the base blueprint.\n\n[prism classes=\"language-yaml line-numbers\"]\nextends@: default\n[\/prism]\n\nIn long format you can specify lookup context for your base file:\n\n[prism classes=\"language-yaml line-numbers\"]\nextends@:\n  type: default\n  context: blueprints:\/\/pages\n[\/prism]\n\nYou can also extend the blueprint itself, if there are multiple versions of the same blueprint.\n\n[prism classes=\"language-yaml line-numbers\"]\nextends@: parent@\n[\/prism]\n\nThere is no limit on how many blueprints you can extend. Fields defined in the first blueprint will be replaced by any later blueprints in the list.\n\n[prism classes=\"language-yaml line-numbers\"]\nextends@:\n  - parent@\n  - type: default\n    context: blueprints:\/\/pages\n[\/prism]\n\n## Embedding Form (import@)\n\nSometimes you may want to share some fields or sub-forms between multiple forms.\n\nLet's create `blueprints:\/\/partials\/gallery.yaml` which we want to embed to our form:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    gallery.images:\n      type: list\n      label: Images\n      fields:\n        .src:\n          type: text\n          label: Image\n[\/prism]\n\nOur form then has a section where we would like to embed the gallery images:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    images:\n        type: section\n        title: Images\n        underline: true\n        import@:\n          type: partials\/gallery\n          context: blueprints:\/\/\n[\/prism]\n\n## Removing Fields \/ Properties (unset-*@)\n\nIf you want to remove a field, you can add `unset@: true` inside of it.\nIf you want to remove a property of field, you just append property name, eg: `unset-options@` removes all options.\n\n## Replacing Fields \/ Properties (replace-*@)\n\nBy default blueprints use deep merging of its properties. Sometimes instead of merging the content of the field, you want to start from a clean table.\nIf you want to replace the whole field, your new field needs to start with `replace@`:\n\n[prism classes=\"language-yaml line-numbers\"]\nauthor.name:\n  replace@: true\n  type: text\n  label: Author name\n[\/prism]\n\n\nAs the result `author.name` will have only two properties: `type` and `label` regardless of what the form had before.\nYou can do the same for individual properties:\n\n[prism classes=\"language-yaml line-numbers\"]\nsummary.enabled:\n  replace-options@: true\n  options:\n    0: Yeah\n    1: Nope\n    2: Do not care\n[\/prism]\n\nNote: `replace-*@` is alias for `unset-*@`.\n\n## Using Configuration (config-*@)\n\nThere are times when you might want to get default value from Grav configuration. For example you may want to have author field to default to author of the site:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    author:\n      type: text\n      label: Author\n      config-default@: site.author.name\n[\/prism]\n\nIf your site author name is `John Doe`, the form is equivalent to:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    author:\n      type: text\n      label: Author\n      default: \"John Doe\"\n[\/prism]\n\nYou can use `config-*@` for any field; for example if you want to change the field `type`, you can just have `config-type@: site.forms.author.type` to allow you to change the input field type from your configuration.\n\n## Using Function Calls (data-*@)\n\nYou can make function calls with parameters from your blueprints to dynamically fetch a value for any property in your field. You can do this by using `data-*@:` notation as the key, where `*` is the field name you want to fill with the result of the function call.\n\nAs an example we are editing a page and we want to have a field that allows us to change its parent or in another words move page into another location. For that we need default value that points to the current location as well as a list of options which consists of all possible locations. For that we need a way to ask Grav\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    route:\n      type: select\n      label: Parent\n      classes: fancy\n      data-default@: '\\Grav\\Plugin\\Admin::route'\n      data-options@: '\\Grav\\Common\\Page\\Pages::parentsRawRoutes'\n      options:\n        '\/': '- Root -'\n[\/prism]\n\nIf you were editing team member page, resulting form would look something like this:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    route:\n      type: select\n      label: Parent\n      classes: fancy\n      default: \/team\n      options:\n        '\/': '- Root -'\n        '\/home': 'Home'\n        '\/team': 'Team'\n        '\/team\/ceo': '  Meet Our CEO'\n        ...\n[\/prism]\n\nWhile `data-default@:` and `data-options@:` are likely the most used dynamic field properties, you are not limited to those. There are no limits on which properties you can fetch, including `type`, `label`, `validation` and even `fields` under the current field.\n\nAdditionally you can pass parameters to the function call just by using array where the first value is the function name and parameters follow:\n\n[prism classes=\"language-yaml line-numbers\"]\n  data-default@: ['\\Grav\\Theme\\ImaginaryClass::getMyDefault', 'default', false]\n[\/prism]\n\n## Changing field ordering\n\nWhen you extend a blueprint or import a file, by default the new fields are added to the end of the list. Sometimes this is not what you want to do, you may want to add item as the first or after some existing field.\n\nIf you want to create a field, you can state its ordering using the `ordering@` property. This field can contain either a field name or an integer (-1 = first item).\n\nHere is an example:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    route:\n      ordering@: -1\n      type: select\n      label: Parent\n      classes: fancy\n      default: \/team\n      options:\n        '\/': '- Root -'\n        '\/home': 'Home'\n        '\/team': 'Team'\n        '\/team\/ceo': '  Meet Our CEO'\n        ...\n[\/prism]\n\nDoing this ensures that the route field will be the first field to appear in the form. This makes it easy to import and\/or extend an existing field and place your additional fields where you would like them to go.\n\nHere is another example:\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    author:\n      ordering@: title\n      type: text\n      label: Author\n      default: \"John Doe\"\n[\/prism]\n\nIn the example above, we used the name of another field to set the ordering. In this example, we have set it up so that the `author` field appears after the `title` field in the form.\n\n!! When ordering fields in a page blueprint, you still need to reference the field names prefixed with `header.`, eg: `header.title` for the ordering to work.\n\n# Creating new form field type\n\nIf you create a special form field type, which needs a special handling in blueprints, there is a plugin function that you can use.\n\n[prism classes=\"language-php line-numbers\"]\n    \/**\n     * Get list of form field types specified in this plugin. Only special types needs to be listed.\n     *\n     * @return array\n     *\/\n    public function getFormFieldTypes()\n    {\n        return [\n            'display' => [\n                'input@' => false\n            ],\n            'spacer' => [\n                'input@' => false\n            ]\n        ];\n    }\n[\/prism]\n\nYou do not need to register this function as it's not really an event, but gets fired when plugin object gets constructed.\nThe purpose of this function is to give extra instructions how to handle the field, for example above code makes display and spacer types to be virtual, meaning that they won't exist in real data.\n\nYou can add any `key: value` pairs including dynamic properties like `data-options@` which will automatically get appended to the fields.\n\n## onBlueprintCreated or accessing blueprint data\n\nBecause of blueprints consist of fields with dots, getting nested field from blueprint uses `\/` notation instead of `.` notation.\n\n[prism classes=\"language-php\"]\n$tabs = $blueprint->get('form\/fields\/tabs');\n[\/prism]\n\nThis makes it possible to access special data fields, like:\n\n[prism classes=\"language-php\"]\n$name = $blueprint->get('form\/fields\/content.name');\n$name = $blueprint->get('form\/fields\/content\/fields\/.name');\n[\/prism]\n\nFor backwards compatibility, you can specify divider in the last (3rd) parameter of `set()` and `get()`\n\n[prism classes=\"language-php\"]\n$tabs = $blueprint->get('form\/fields\/tabs', null, '\/');\n[\/prism]\n"},{"title":"How to: Add a file upload","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints\/how-to-add-file-upload","taxonomy":{"categories":["docs"],"tags":[]},"content":"### File Uploads\n\nYou can add file upload functionality in Pages, Config, Plugins and Themes blueprints. File uploads are always Ajax based and allow Drag & Drop from the desktop or picking them as regular file fields. Every time a file is added to the field, it's automatically uploaded to a temporary folder, and will only be stored when the Save (or Submit) action takes place. \n\nExample of usage:\n\n[prism classes=\"language-yaml line-numbers\"]\ncustom_file:\n  name: myfile\n  type: file\n  label: A Label\n  destination: 'user\/plugins\/my-plugin\/assets'\n  multiple: true\n  autofocus: false\n  accept:\n    - image\/*\n[\/prism]\n\n! In order to add a file upload, you must have a bottom javascript render command in your base Twig template.  `{{ assets.js('bottom') }}`\n\n## Options\n\nA file field has multiple options available, from the accepted MIME type or extension, to the file size allowed:\n\n#### Defaults\n\n[prism classes=\"language-yaml line-numbers\"]\ncustom_file:\n  type: file\n  label: A Label\n  multiple: false\n  destination: 'self@'\n  random_name: false\n  avoid_overwriting: false\n  limit: 10\n  accept:\n    - image\/*\n[\/prism]\n\n#### `multiple`\n\n[prism classes=\"language-yaml\"]\nmultiple: false # [false | true]\n[\/prism]\n\nLike a regular HTML5 file field, when the `multiple` option is enabled, it allows to upload more than a single file. This setting is also tied to the [`limit`](#limit) option, which determines how many of the multiple files are allowed for the field.\n\n#### `destination`\n\n``` yaml\ndestination: 'self@' # [<path> | self@ | page@:<path> | theme@:<path>]\n```\n\nDestination is the location where uploaded files should be stored. This can be either a regular `path` (relative to the root of Grav), `self@` or one of the special  `page@:` and `theme@:` prefixes.\n\n!! `self@` is not allowed outside of the Pages scope, an error will be thrown. If you use a file field outside of a Page, you should always change the `destination` setting.\n\n##### Examples\n\n1. If it's desired to upload files to a plugin `testing` folder (`user\/plugins\/testing`), destination would be:\n\n  [prism classes=\"language-yaml\"]\n  destination: 'user\/plugins\/testing'\n  [\/prism]\n\n2. Assuming we have a blog item at the route `\/blog\/ajax-upload` (physical location being `user\/pages\/02.blog\/ajax-upload`), with the `page@:` prefix the destination would be:\n\n  [prism classes=\"language-yaml\"]\n  destination: 'page@:\/blog\/ajax-upload'\n  [\/prism]\n3. Assuming the current theme is `antimatter` and we want to upload to the assets folder (physical location being `user\/themes\/antimatter\/assets`), with the `theme@:` prefix the destination would be:\n\n   [prism classes=\"language-yaml\"]\n   destination: 'theme@:\/assets'\n   [\/prism]\n\n#### `random_name`\n\n[prism classes=\"language-yaml\"]\nrandom_name: false # [false | true]\n[\/prism]\n\nWhen the `random_name` is enabled, the uploaded file will get renamed with a random string **15** characters long. This is helpful if you wish to hash your uploaded files or if you are looking for a way to reduce names collision.\n\n##### Example\n[prism classes=\"language-php\"]\n'my_file.jpg' => 'y5bqsGmE1plNTF2.jpg'\n[\/prism]\n\n#### `avoid_overwriting`\n\n[prism classes=\"language-yaml\"]\navoid_overwriting: false # [false | true]\n[\/prism]\n\nWhen the `avoid_overwriting` is enabled and a file with the same name of the uploaded one already exists in `destination`, it will be renamed. The newly uploaded file will be prefixed with the current date and time, concatenated by a dash.\n\n##### Example\n[prism classes=\"language-php\"]\n'my_file.jpg' => '20160901130509-my_file.jpg'\n[\/prism]\n\n#### `limit`\n\n[prism classes=\"language-yaml\"]\nlimit: 10 # [1...X | 0 (unlimited)]\n[\/prism]\n\nWhen the [`multiple`](#multiple) setting is enabled, `limit` allows to constrain the number of allowed files for an individual field. If `multiple` is not enabled (not enabled by default), `limit` automatically falls back to **1**.\n\nWhen `limit` is set to **0**, it means that there are no restrictions on the amount of allowed files that can be uploaded.\n\n!! It is good practice to always ensure you have a set limit of allowed files that can be uploaded. This way you have more control over your server resources utilizations.\n\n#### `accept`\n\n[prism classes=\"language-yaml line-numbers\"]\naccept:\n  - 'image\/*' # Array of MIME types and\/or extensions. ['*'] for allowing any file.\n[\/prism]\n\nThe `accept` setting allows an array of MIME type as well as extensions definitions. All of the extensions need to be starting with the `.` (dot) plus the extension itself.\n\nIn addition you can also allow any file by simply using the __*__ (star) notation `accept: ['*']`.\n\n##### Examples\n\n1. To only allow `yaml` and `json` files:\n   [prism classes=\"language-yaml line-numbers\"]\n     accept:\n       - .yaml\n       - .json\n   [\/prism]\n2. To only allow images and videos:\n   [prism classes=\"language-yaml line-numbers\"]\n     accept:\n       - 'image\/*'\n       - 'video\/*'\n   [\/prism]\n3. To allow any image, any video and only mp3 files:\n   [prism classes=\"language-yaml line-numbers\"]\n     accept:\n       - 'image\/*'\n       - 'video\/*'\n       - .mp3\n   [\/prism]\n4. To allow any file:\n   [prism classes=\"language-yaml line-numbers\"]\n     accept:\n       - '*'\n   [\/prism]\n"},{"title":"Example: Config Blueprints","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints\/example-config-blueprints","taxonomy":{"categories":["docs"],"tags":[]},"content":"It's common to add some configuration options to site.yaml, to be shown in the site content.\n\nTo make those options configurable via Admin panel, add some fields to `user\/blueprints\/config\/site.yaml`. For example:\n\n\n[prism classes=\"language-yaml line-numbers\"]\n@extends:\n    '@parent'\n\nform:\n    fields:\n        content:\n\n            fields:\n                myfield:\n                    type: text\n                    label: My Field\n[\/prism]\n\nWill add the 'My Field' input type, appending it to the Content section of the Site configuration.\n\nYou can add entire new sections too, for example:\n\n[prism classes=\"language-yaml line-numbers\"]\n@extends:\n    '@parent'\n\nform:\n    fields:\n        anothersection:\n            type: section\n            title: Another Section\n            underline: true\n\n            fields:\n                myfield:\n                    type: text\n                    label: A label\n                    size: large\n[\/prism]"},{"title":"Example: Page Blueprints","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints\/example-page-blueprint","taxonomy":{"categories":["docs"],"tags":[]},"content":"**Page Blueprints** extend from the default page, and give you the ability to add options. Basically, custom pages can come to life by using page blueprints. With a page blueprint, you can 100% configure the editing form for a page as it appears in the Admin.\n\n### A first example\n\nIf you want to use the default page form, and just add a couple of select boxes for example, you can extend from the default page.\n\nThis will use the default page form, and append a text field to the **Advanced** tab, under the **Overrides** section:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: Gallery\n'@extends':\n    type: default\n    context: blueprints:\/\/pages\n\nform:\n  fields:\n    tabs:\n      type: tabs\n      active: 1\n\n      fields:\n        advanced:\n          fields:\n            overrides:\n              fields:\n                header.an_example_text_field:\n                  type: text\n                  label: Add a number\n                  default: 5\n                  validate:\n                    required: true\n                    type: int\n[\/prism]\n\nThis will instead add a new tab, called **Gallery**, with some fields in it.\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: Gallery\n'@extends':\n    type: default\n    context: blueprints:\/\/pages\n\nform:\n  fields:\n    tabs:\n      type: tabs\n      active: 1\n\n      fields:\n        gallery:\n          type: tab\n          title: Gallery\n\n          fields:\n            header.an_example_text_field:\n              type: text\n              label: Add a number\n              default: 5\n              validate:\n                required: true\n                type: int\n\n            header.an_example_select_box:\n              type: select\n              label: Select one of the following\n              default: one\n              options:\n                one: One\n                two: Two\n                three: Three\n[\/prism]\n\nThe fields types you can add are listed in [Available form fields for use in the admin](..\/fields-available)\n\n### How to name fields\n\nIt's important that fields use the `header.*` structure, so field content is saved to the **Page Header** when saved.\n\n### Create a completely custom page form\n\nYou can avoid extending from the default form, and create a page form that is completely unique.\n\nFor example:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: Gallery\n\nform:\n  fields:\n    tabs:\n      type: tabs\n      active: 1\n\n      fields:\n        gallery:\n          type: tab\n          title: Gallery\n\n          fields:\n            header.an_example_text_field:\n              type: text\n              label: Add a number\n              default: 5\n              validate:\n                required: true\n                type: int\n\n            header.an_example_select_box:\n              type: select\n              label: Select one of the following\n              default: one\n              options:\n                one: One\n                two: Two\n                three: Three\n\n            route:\n              type: select\n              label: PLUGIN_ADMIN.PARENT\n              classes: fancy\n              '@data-options': '\\Grav\\Common\\Page\\Pages::parents'\n              '@data-default': '\\Grav\\Plugin\\admin::route'\n              options:\n                '\/': PLUGIN_ADMIN.DEFAULT_OPTION_ROOT\n\n[\/prism]\n\n### A note for Expert mode\n\nWhen editing pages in **Expert** mode, the **Blueprint** is not read, and the page form is the same across all pages. This is because in Expert mode you edit the page fields directly in the **Frontmatter** field, and there is no need to have a customized presentation.\n\n### Where to put the Page Blueprints\n\nIn order for the Admin Plugin to pick up the blueprints, and thus show the new Page types, you need to put the blueprints in the correct place.\n\n#### In the User Blueprints folder\n\nPut them in `user\/blueprints\/pages\/`. This is a good place to put them when you simply want your blueprints to be present in your site.\n\n#### In the Theme\n\nPut them in `user\/themes\/YOURTHEME\/blueprints\/`. This is best when you also intend to distribute your theme: the theme will provide the page blueprints and it will be easier to use.\n\n#### In the Data folder\n\nIf you are using a Gantry5 based theme, the best location is `user\/data\/gantry5\/themes\/YOURTHEME\/blueprints\/`, otherwise your files may be lost during a theme update.\n\n#### In a Plugin\n\nPut them in `user\/plugins\/YOURPLUGIN\/blueprints\/`. This is the place where to put them if you define and add custom pages in the plugin.\n\nThen subscribe to the `onGetPageTemplates` event and add them to Grav. The following example adds the blueprints from the `blueprints\/` folder and also the page templates from the `templates\/` folder.\n\n[prism classes=\"language-php line-numbers\"]\npublic static function getSubscribedEvents()\n{\n  return [\n    'onGetPageTemplates' => ['onGetPageTemplates', 0]\n\n  ];\n}\n\npublic function onGetPageTemplates($event)\n{\n  $types = $event->types;\n  $locator = Grav::instance()['locator'];\n  $types->scanBlueprints($locator->findResource('plugin:\/\/' . $this->name . '\/blueprints'));\n  $types->scanTemplates($locator->findResource('plugin:\/\/' . $this->name . '\/templates'));\n}\n[\/prism]\n"},{"title":"Example: Plugin Configuration","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints\/example-plugin-configuration","taxonomy":{"categories":["docs"],"tags":[]},"content":"We saw in [the previous example](..\/example-plugin-blueprint) how to define a blueprint for a plugin and\/or theme.\n\nNow, let's see how to offer configuration options for a plugin or theme, that will be shown by the Admin Plugin.\n\nIf you want your plugin (or theme) to have options directly configurable from the admin interface, you need to fill the blueprints.yaml file with forms.\n\nFor example, here is the **Archives** plugin's **archives.yaml** file:\n\n[prism classes=\"language-yaml line-numbers\"]\nenabled: true\nbuilt_in_css: true\ndate_display_format: 'F Y'\nshow_count: true\nlimit: 12\norder:\n    by: date\n    dir: desc\nfilter_combinator: and\nfilters:\n    category: blog\n[\/prism]\n\nThose are the default settings of the plugin. Without the Admin plugin to configure those settings, the user needs to copy this file in the `\/user\/config\/plugins\/` folder and them there.\n\nBy providing a correctly-formatted **blueprints.yaml** file, you can allow the user to change the settings from the Admin interface. When the settings are saved, they're automatically written to `\/user\/config\/plugins\/archives.yaml` (or under config\/themes, if it's a theme). The structure starts as follows:\n\n[prism classes=\"language-yaml line-numbers\"]\nname: Archives\nversion: 1.3.0\ndescription: The **Archives** plugin creates links for pages grouped by month\/year\nicon: university\nauthor:\n  name: Team Grav\n  email: devs@getgrav.org\n  url: https:\/\/getgrav.org\nhomepage: https:\/\/github.com\/getgrav\/grav-plugin-archives\ndemo: http:\/\/demo.getgrav.org\/blog-skeleton\nkeywords: archives, plugin, blog, month, year, date, navigation, history\nbugs: https:\/\/github.com\/getgrav\/grav-plugin-archives\/issues\nlicense: MIT\n\nform:\n  validation: strict\n  fields:\n[\/prism]\n\nHere comes the part that we need. Every field in the **archives.yaml** file needs a corresponding form element, for example:\n\n**Toggle**\n\n[prism classes=\"language-yaml line-numbers\"]\nenabled:\n  type: toggle\n  label: Plugin status\n  highlight: 1\n  default: 1\n  options:\n      1: Enabled\n      0: Disabled\n  validate:\n       type: bool\n[\/prism]\n\n**Select**\n\n[prism classes=\"language-yaml line-numbers\"]\ndate_display_format:\n  type: select\n  size: medium\n  classes: fancy\n  label: Date Format\n  default: 'jS M Y'\n  options:\n    'F jS Y': \"January 1st 2014\"\n    'l jS of F': \"Monday 1st of January\"\n    'D, m M Y': \"Mon, 01 Jan 2014\"\n    'd-m-y': \"01-01-14\"\n    'jS M Y': \"10th Feb 2014\"\n[\/prism]\n\n**Text**\n\n[prism classes=\"language-yaml line-numbers\"]\nlimit:\n  type: text\n  size: x-small\n  label: Count Limit\n  validate:\n    type: number\n    min: 1\n[\/prism]\n\nThe root element (in those examples `enabled`, `date_display_format`, `limit`) is the name of the option. The additional components of each field determines how this field is displayed. For example, its type (`type`), its size (`size`), the label shown (`label`) and an optional helpful tooltip that appears on hover (`help`). `default` and `placeholder` let you create some defaults and improve how the fields renders to the user.\n\nThe rest of the fields can change depending on the field type. For example the `select` field type requires and `options` list.\n\nNested options are reachable via dot notation (e.g. `order.dir`)\n\n[prism classes=\"language-yaml line-numbers\"]\norder.dir:\n  type: toggle\n  label: Order Direction\n  highlight: asc\n  default: desc\n  options:\n    asc: Ascending\n    desc: Descending\n[\/prism]\n\nThe Admin plugin defines many other field types that can be used, in `plugins\/admin\/themes\/grav\/templates\/forms\/fields`.\n\nIt's important to note that when `form.validation` is set to `strict`, like in the **Archives** plugin example, you need to add form blueprints for _all_ the options, otherwise an error will pop up on save.\nIf you instead want to just allow to customize a couple of fields to the Admin interface, not all of them, set `form.validation` as `loose`.\n"},{"title":"Example: Plugin Blueprint","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints\/example-plugin-blueprint","taxonomy":{"categories":["docs"],"tags":[]},"content":"A Plugin's blueprint gives Grav insight into what a plugin is, its source, support and author information, dependencies, and and form fields used to administer the plugin in the Grav Admin.\n\nAs an example, here's the Blueprint for a plugin:\n\n[prism classes=\"language-yaml line-numbers\"]\nname: Assets\nversion: 1.0.4\ndescription: \"This plugin provides a convenient way to add CSS and JS assets directly from your pages.\"\nicon: list-alt\nauthor:\n  name: Team Grav\n  email: devs@getgrav.org\n  url: https:\/\/getgrav.org\nhomepage: https:\/\/github.com\/getgrav\/grav-plugin-assets\ndemo: https:\/\/learn.getgrav.org\nkeywords: assets, javascript, css, inline\nbugs: https:\/\/github.com\/getgrav\/grav-plugin-assets\/issues\nlicense: MIT\n\ndependencies:\n  - { name: afterburner2 }\n  - { name: github }\n  - { name: email, version: '~2.0' }\n[\/prism]\n\nThere are different properties that you can use to give your resource an identity. Some are **required**, others are _optional_.\n\n[div class=\"table\"]\n| property         | description                                                                                                                                                                                                                                                                                                                                                                                                      |\n| :-----           | :-----                                                                                                                                                                                                                                                                                                                                                                                                           |\n| __name*__        | This is the name of the resource. Avoid appending Plugin or Theme, there is no need for that.                                                                                                                                                                                                                                                                                                                    |\n| __version*__     | The version of the resource. This value should always change on each release, incrementally. You should follow the [semver](http:\/\/semver.org\/) standard, too.                                                                                                                                                                                                                                                   |\n| __description*__ | The description of your resource. Please don't exceed **200** characters. A description should be short and straight to the point. You can use markdown syntax if needed. It's also a good idea to wrap your description in quotation marks.                                                                                                                                                                     |\n| __icon*__        | Icon is what will be used on [getgrav.org](https:\/\/getgrav.org). At this stage, we are using [FontAwesome](http:\/\/fortawesome.github.io\/Font-Awesome\/icons\/) icons library, so if you are developing a new plugin or theme, it should be your job to ensure the icon you picked is not already used. Otherwise we will have to change it for you.                                                                |\n| _screenshot_     | _(optional)_ Screenshot is only ever evaluated for _Themes_ and completely ignored for _Plugins_. For _Themes_, this would be the filename of the screenshot that comes with the theme (default: `screenshot.jpg`). If you have a _screenshot.jpg_ image at the root of your theme, then you can avoid using this property. Our repository will automatically pick it up.                                        |\n| __author.name*__ | The developer full name                                                                                                                                                                                                                                                                                                                                                                                          |\n| _author.email_   | _(optional)_ The developer email.                                                                                                                                                                                                                                                                                                                                                                                |\n| _author.url_     | _(optional)_ The developer homepage.                                                                                                                                                                                                                                                                                                                                                                             |\n| _homepage_       | _(optional)_ If you have a dedicated homepage for your resource, this would be the place for it.                                                                                                                                                                                                                                                                                                                 |\n| _docs_           | _(optional)_ If you have written documentation for your resource, you can link them here.                                                                                                                                                                                                                                                                                                                        |\n| _demo_           | _(optional)_ If you have a demo up and running about your resource, link it here.                                                                                                                                                                                                                                                                                                                                |\n| _guide_          | _(optional)_ If you have tutorials or how-to guides for your resource, link it here.                                                                                                                                                                                                                                                                                                                             |\n| _keywords_       | _(optional)_ Although there is no real use of keywords yet, you can list keywords relative to your resource here, comma separated.                                                                                                                                                                                                                                                                               |\n| _bugs_           | _(optional)_ The URL where bugs can be reported, usually this would be the [GitHub issues](https:\/\/guides.github.com\/features\/issues\/) link.                                                                                                                                                                                                                                                                     |\n| _license_        | _(optional)_ The type of license your resource is (MIT, GPL, etc). It is adviced that you always provide a `LICENSE` file with your resource.                                                                                                                                                                                                                                                                    |\n| _dependencies_   | _(optional)_ A list of dependencies that the plugin\/theme requires.  The default process is to use GPM to install them, however, if an optional GIT repository URL is provided, installing direct from the repository will be an option also. Also if you use an array, you can define a name and a version explicitly using [Composer-style package versions](https:\/\/getcomposer.org\/doc\/articles\/versions.md) |\n[\/div]\n\nHere is an example of the identity portion of the [GitHub plugin](https:\/\/github.com\/getgrav\/grav-plugin-github) blueprints:\n\n[prism classes=\"language-yaml line-numbers\"]\nname: GitHub\nversion: 1.0.1\ndescription: \"This plugin wraps the [GitHub v3 API](https:\/\/developer.github.com\/v3\/) and uses the [php-github-api](https:\/\/github.com\/KnpLabs\/php-github-api\/) library to add a nice GitHub touch to your Grav pages.\"\nicon: github\nauthor:\n  name: Team Grav\n  email: devs@getgrav.org\n  url: https:\/\/getgrav.org\nhomepage: https:\/\/github.com\/getgrav\/grav-plugin-github\nkeywords: github, plugin, api\nbugs: https:\/\/github.com\/getgrav\/grav-plugin-github\/issues\nlicense: MIT\n[\/prism]\n\nTheme blueprints work in very much the same way as plugins.\n"},{"title":"Reference: Blueprint Form Fields","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints\/fields-available","taxonomy":{"categories":["docs"],"tags":[]},"media":["array_field_bp.gif","checkboxes_field.gif","checkbox_field.gif","colorpicker_field.png","columns_field_bp.gif","dateformat_field_bp.gif","datetime_field.gif","display_field.jpg","editor_field_bp.gif","fieldset-gif.gif","field_list_1.png","filepicker_field.png","file_field_bp.gif","list_field_bp.gif","pages_field_bp.gif","password_field.gif","radio_field.gif","range_field.gif","selectize_field_bp.gif","tabs_field_bp.gif","taxonomy_field_bp.gif","text_field.gif","toggle_field_bp.gif"],"content":"## Available Form Fields for Use in the Admin\n\nAdmin-side forms can be created with a variety of fields. This document provides a complete reference of the properties of each field, and provides usage examples.\n\nIn addition to the fields listed below, reserved for usage in the Admin, you can also use all the fields available in the frontend forms described in [the Frontend Forms Fields Reference](\/forms\/forms\/fields-available).\n\n### Special Form Fields Available Exclusively in the Admin\n\n[div class=\"table table-keycol\"]\n| Field                                             | Description                                                                                                                                                                                                 |\n| :-----                                            | :-----                                                                                                                                                                                                      |\n| **[Array](#the-array-field)**                     | used to create key-value arrays                                                                                                                                                                             |\n| **BackupHistory**                                 |                                                                                                                                                                                                             |\n| **Blueprint**                                     |                                                                                                                                                                                                             |\n| **[Colorpicker](#the-colorpicker-field)**         | show a color picker                                                                                                                                                                                         |\n| **[Columns](#the-columns-column-fields)**         | used to break the form into multiple columns                                                                                                                                                                |\n| **[Column](#the-columns-column-fields)**          | used to show a single column (used with the `Columns` field)                                                                                                                                                |\n| **Cron**                                          |                                                                                                                                                                                                             |\n| **CronStatus**                                    |                                                                                                                                                                                                             |\n| **[Dateformat](#the-dateformat-field)**           | a special select that renders the current date\/time in the passed formats                                                                                                                                   |\n| **[Datetime](#the-datetime-field)**               | a date and time selection field                                                                                                                                                                             |\n| **[Editor](#the-editor-field)**                   | show a markdown editor                                                                                                                                                                                      |\n| **[Fieldset](#the-fieldset-field)**               | group a set of fields inside a collapsible accordion                                                                                                                                                        |\n| **[File](#the-file-field)**                       | in Admin, **File** is specialized to be used in plugin and theme configurations (blueprints). Handles uploading a file to a location and deleting it, and removing it from the theme \/ plugin configuration |\n| **[Filepicker](#the-filepicker-field)**           | **Filepicker** allows to choose files from a location in the web server filesystem.                                                                                                                         |\n| **Frontmatter**                                   |                                                                                                                                                                                                             |\n| **IconPicker**                                    |                                                                                                                                                                                                             |\n| **[List](#the-list-field)**                       | used to create collections of fields                                                                                                                                                                        |\n| **Markdown**                                      |                                                                                                                                                                                                             |\n| **MediaPicker**                                   |                                                                                                                                                                                                             |\n| **Multilevel**                                    |                                                                                                                                                                                                             |\n| **Order**                                         |                                                                                                                                                                                                             |\n| **PageMedia**                                     |                                                                                                                                                                                                             |\n| **[PageMediaSelect](#the-pagemediaselect-field)** | shows a select with all the page media. Used in Pages blueprints to let the user choose a media file to be assigned to a field.                                                                             |\n| **[Pages](#the-pages-field)**                     | shows a list of the site pages                                                                                                                                                                              |\n| **Parents**                                       |                                                                                                                                                                                                             |\n| **Permissions**                                   |                                                                                                                                                                                                             |\n| **Range**                                         |                                                                                                                                                                                                             |\n| **[Section](#the-section-field)**                 | used to divide a setting page into sections; each section comes with a title                                                                                                                                |\n| **[Selectize](#the-selectize-field)**             | a hybrid of a text box and a select box. Mostly useful for tagging and other element picking fields.                                                                                                        |\n| **SelectUnique**                                  |                                                                                                                                                                                                             |\n| **[Taxonomy](#the-taxonomy-field)**               | a special select preconfigured to select one or more taxonomies                                                                                                                                             |\n| **ThemeSelect**                                   |                                                                                                                                                                                                             |\n| **UserInfo**                                      |                                                                                                                                                                                                             |\n| **Xss**                                           |                                                                                                                                                                                                             |\n[\/div]\n\n### Common Fields Attributes\n\nEvery field accepts a list of attributes you can use. Each field could share these common attributes, but particular fields might ignore them. The best way to check which attributes are allowed on a field is to check the field description in this page, and see which attributes are mentioned.\n\nThis list provides a common ground so there's no need to repeat the description of a common field.\n\n[div class=\"table table-keycol\"]\n| Attribute           | Description                                                                                                                                                                                                     |\n| :-----              | :-----                                                                                                                                                                                                          |\n| `autocomplete`      | accepts `on` or `off`                                                                                                                                                                                           |\n| `autofocus`         | if enabled, autofocus on that field                                                                                                                                                                             |\n| `classes`           | accepts a string with one or more CSS classes to add                                                                                                                                                            |\n| `default`           | sets the field default value. This ensures you will always get back either a user-specified value _or_ this default value.  See also `placeholder`.                                                             |\n| `disabled`          | sets the field disabled state                                                                                                                                                                                   |\n| `help`              | Adds a tooltip to the field                                                                                                                                                                                     |\n| `id`                | sets the field id as well as the `for` attribute on the label                                                                                                                                                   |\n| `label`             | sets the field label                                                                                                                                                                                            |\n| `name`              | sets the field name                                                                                                                                                                                             |\n| `novalidate`        | sets the field novalidate state                                                                                                                                                                                 |\n| `placeholder`       | sets the field placeholder value. This is to set a value the user can see as a prompt for their own value, but it does not influence what value ultimately gets written.  See also `default`.                   |\n| `readonly`          | sets the field read-only state                                                                                                                                                                                  |\n| `size`              | sets the field size, which in turn adds a class to its container. Valid values are `large`, `x-small`, `medium`, `long`, `small`. You can of course add more in the template you see, when used in the frontend |\n| `style`             | sets the field style. If set to `vertical`, the field is able to appear full width. This is an easy way to clean up the form.                                                                                   |\n| `title`             | sets the field title value                                                                                                                                                                                      |\n| `toggleable`        | add a checkbox that will toggle the enabled\/disabled attribute of the field                                                                                                                                     |\n| `validate.required` | if set to a positive value, sets the field as required                                                                                                                                                          |\n| `validate.pattern`  | sets a validation pattern                                                                                                                                                                                       |\n| `validate.message`  | sets the message shown if the validation fails                                                                                                                                                                  |\n| `validate.type`     | sets the field type used during validation                                                                                                                                                                      |\n[\/div]\n\n### Know more about fields\n\nYou can read how the fields are built from the source: [Fields added by the Form Plugin](https:\/\/github.com\/getgrav\/grav-plugin-form\/tree\/master\/templates\/forms) and [Fields only available in Admin](https:\/\/github.com\/getgrav\/grav-plugin-admin\/tree\/master\/themes\/grav\/templates\/forms).\n\n### Validation\n\nMost of the fields allow validation.\n\n[prism classes=\"language-yaml line-numbers\"]\nvalidate:\n    required: true\n[\/prism]\n\nwill cause the field to be marked as required.\n\n[prism classes=\"language-yaml line-numbers\"]\nvalidate:\n    message: 'Some message'\n[\/prism]\n\nwill show the defined message when the field is not correctly filled.\n\n[prism classes=\"language-yaml line-numbers\"]\nvalidate:\n    pattern: 'Some pattern'\n[\/prism]\n\nwill validate the field value against the passed regex pattern. Examples: `pattern: \"[1-9][0-9]*\"`, `pattern: '[A-Za-z0-9-]+'`, `pattern: '[a-z0-9-]+'`, ` pattern: '^[a-z0-9_-]{3,16}$'`, `pattern: '(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}'`\n\n#### validate.type\n\n`validate.type` indicates which type should it validate against.\n\nSome examples:\n\nAn editor will result in a `textarea`:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    type: editor\n    validate:\n      type: textarea\n[\/prism]\n\nA selectize will be a `commalist`:\n\n[prism classes=\"language-yaml line-numbers\"]\ntaxonomies:\n    type: selectize\n    size: large\n    label: PLUGIN_ADMIN.TAXONOMY_TYPES\n    classes: fancy\n    help: PLUGIN_ADMIN.TAXONOMY_TYPES_HELP\n    validate:\n        type: commalist\n\nfilters.category:\n  type: selectize\n  label: Category filter\n  help: Comma separated list of category names\n  validate:\n    type: commalist\n[\/prism]\n\nValidate an email address:\n\n[prism classes=\"language-yaml line-numbers\"]\nauthor.email:\n    type: text\n    size: large\n    label: PLUGIN_ADMIN.DEFAULT_EMAIL\n    help: PLUGIN_ADMIN.DEFAULT_EMAIL_HELP\n    validate:\n        type: email\n[\/prism]\n\nMake sure a value is a bool:\n\n[prism classes=\"language-yaml line-numbers\"]\nsummary.enabled:\n    type: toggle\n    label: PLUGIN_ADMIN.ENABLED\n    highlight: 1\n    help: PLUGIN_ADMIN.ENABLED_HELP\n    options:\n        1: PLUGIN_ADMIN.YES\n        0: PLUGIN_ADMIN.NO\n    validate:\n        type: bool\n[\/prism]\n\nMake sure a value is an integer between 0 and 65536:\n\n[prism classes=\"language-yaml line-numbers\"]\nsummary.size:\n    type: text\n    size: x-small\n    label: PLUGIN_ADMIN.SUMMARY_SIZE\n    help: PLUGIN_ADMIN.SUMMARY_SIZE_HELP\n    validate:\n        type: int\n        min: 0\n        max: 65536\n[\/prism]\n\nMake sure a value is a number > 1:\n\n[prism classes=\"language-yaml line-numbers\"]\npages.list.count:\n    type: text\n    size: x-small\n    label: PLUGIN_ADMIN.DEFAULT_PAGE_COUNT\n    help: PLUGIN_ADMIN.DEFAULT_PAGE_COUNT_HELP\n    validate:\n        type: number\n        min: 1\n[\/prism]\n\nValidate a taxonomy type as an array:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.taxonomy:\n  type: taxonomy\n  label: PLUGIN_ADMIN.TAXONOMY\n  multiple: true\n  validate:\n    type: array\n[\/prism]\n\nValidate a text field as a slug:\n\n[prism classes=\"language-yaml line-numbers\"]\nfolder:\n  type: text\n  label: PLUGIN_ADMIN.FOLDER_NAME\n  validate:\n    type: slug\n[\/prism]\n\n### Array Field\n\n![Array](array_field_bp.gif)\n\nThe `array` field type is used to create a simple list of key - values objects.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nmetadata:\n   type: array\n   label: PLUGIN_ADMIN.METADATA\n   help: PLUGIN_ADMIN.METADATA_HELP\n   placeholder_key: PLUGIN_ADMIN.METADATA_KEY\n   placeholder_value: PLUGIN_ADMIN.METADATA_VALUE\n   required: true\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute           | Description |\n| :-----              | :-----      |\n| `placeholder_key`   |             |\n| `placeholder_value` |             |\n| `value_only`        |             |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n[\/div]\n\n### Colorpicker Field\n\n![Colorpicker](colorpicker_field.png)\n\nThe `colorpicker` field type is used to display a color picker field\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\ncolor:\n   type: colorpicker\n   label: Choose a color\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autocomplete](#common-fields-attributes)      |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [placeholder](#common-fields-attributes)       |\n| [style](#common-fields-attributes)             |\n| [title](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.message](#common-fields-attributes)  |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n[\/div]\n\n### Columns \/ column Fields\n\n![Columns](columns_field_bp.gif)\n\nThe `columns` and `column` field types are used to divide the contained form fields in columns\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\ncolumns:\n  type: columns\n  fields:\n    column1:\n      type: column\n      fields:\n\n        # .... subfields\n\n    column2:\n      type: column\n      fields:\n\n        # .... other subfields\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute | Description                    |\n| :-----    | :-----                         |\n| `fields`  | The columns \/ column subfields |\n[\/div]\n\n### Dateformat Field\n\n![DateFormat](dateformat_field_bp.gif)\n\nThe `dateformat` field type is used to\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\npages.dateformat.short:\n    type: dateformat\n    size: medium\n    classes: fancy\n    label: PLUGIN_ADMIN.SHORT_DATE_FORMAT\n    help: PLUGIN_ADMIN.SHORT_DATE_FORMAT_HELP\n    default: \"jS M Y\"\n    options:\n        \"F jS \\\\a\\\\t g:ia\": Date1\n        \"l jS \\\\of F g:i A\": Date2\n        \"D, d M Y G:i:s\": Date3\n        \"d-m-y G:i\": Date4\n        \"jS M Y\": Date5\n[\/prism]\n\n\n[div class=\"table table-keycol\"]\n| Attribute   | Description                                             |\n| :-----      | :-----                                                  |\n| `options`   | The field available key-value options                   |\n| `multiple`  | boolean. If positive, the field accepts multiple values |\n| `selectize` |                                                         |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n[\/div]\n\n### Datetime Field\n\n![DateTime](datetime_field.gif)\n\nThe `datetime` field type is used to store and present a date and time field.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.date:\n  type: datetime\n  label: PLUGIN_ADMIN.DATE\n  toggleable: true\n  help: PLUGIN_ADMIN.DATE_HELP\n[\/prism]\n\n\n[div class=\"table table-keycol\"]\n| Attribute      | Description           |\n| :-----         | :-----                |\n| `validate.min` | A minimum valid value |\n| `validate.max` | A maximum valid value |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n[\/div]\n\n### Editor Field\n\n![Editor Field](editor_field_bp.gif)\n\nThe `editor` field type is used to present the Codemirror editor\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nfrontmatter:\n  classes: frontmatter\n  type: editor\n  label: PLUGIN_ADMIN.FRONTMATTER\n  autofocus: true\n  codemirror:\n    mode: 'yaml'\n    indentUnit: 4\n    autofocus: true\n    indentWithTabs: false\n    lineNumbers: true\n    styleActiveLine: true\n    gutters: ['CodeMirror-lint-markers']\n    lint: true\n[\/prism]\n\n\n[div class=\"table table-keycol\"]\n| Attribute    | Description                                                                              |\n| :-----       | :-----                                                                                   |\n| `codemirror` | A set of values to be set on the [codemirror editor](https:\/\/codemirror.net\/doc\/manual.html#config). By default uses mode: gfm (github flavored markdown) |\n| `resizer`    | If positive, enables the resizer. Otherwise the editor is fixed                          |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [id](#common-fields-attributes)                |\n| [novalidate](#common-fields-attributes)        |\n| [placeholder](#common-fields-attributes)       |\n| [readonly](#common-fields-attributes)          |\n[\/div]\n\n### Fieldset Field\n\n![Fieldset Field](fieldset-gif.gif)\nThe `fieldset` groups a set of fields inside a collapsible box.\n                    \n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.fieldset:\n  type: fieldset\n  title: Your title\n  help: Help text\n  info: Info text\n  text: Text inside fieldset and before other fields\n  icon: comments\n  collapsed: true     # Initial state of fieldset (see collapsible option)\n  collapsible: true    # Whether one can expand the fieldset or not \n  fields:\n    header.fieldset.an_example_text:\n      type: text\n      label: text\n    header.fieldset.an_example_textarea:\n      type: textarea\n      label: textarea\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute     | Description                                                                                                |\n| :-----        | :-----                                                                                                     |\n| `icon`        | An icon for the box                                                                                        |         \n| `collapsed`   | If `true`, the list is opened collapsed. By default it's expanded                                          |\n| `collapsible` | Whether one can expand the fieldset or not                                                                 |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n[\/div]\n\n### File Field\n\n![File Field](file_field_bp.gif)\n\nThe `file` field type can be used in pages, plugin and theme configurations (blueprints). Handles uploading a file to a location as well as removing it from the page headers or theme \/ plugin configuration.\n\n! More details can be found in the dedicated [How To: Add a File Upload](..\/how-to-add-file-upload) section. Also note that displaying an image uploaded in a file field is not done the same way than with a filepicker field. More details about how to access images uploaded in a file field can be found on this [cookbook entry](https:\/\/learn.getgrav.org\/cookbook\/twig-recipes#displaying-an-image-uploaded-in-a-file-field).\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\ncustom_logo_login_screen:\n  type: file\n  label: Custom Logo Login Screen\n  destination: 'user\/plugins\/admin-pro\/assets'\n  accept:\n    - image\/*\n[\/prism]\n\n[prism classes=\"language-yaml line-numbers\"]\ncustom_file:\n  type: file\n  label: A Label\n  destination: 'user\/themes\/my-theme\/assets'\n  multiple: true\n  limit: 5\n  filesize: 1\n  accept:\n    - image\/*\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute           | Description                                                                                                |\n| :-----              | :-----                                                                                                     |\n| `destination`       | The folder where the files will be stored, relative to the Grav root. E.g. `user\/plugins\/my-plugin\/assets` |\n| `multiple`          | Whether or not to allow more than one file per field                                                       |\n| `limit`             | When `multiple` is enabled, allows to constrain the amount of files permitted to be uploaded               |\n| `filesize`          | The size in MB each file is allowed                                                                        |\n| `accept`            | Add a list of accepted page mime types and extensions. E.g. `[\"image\/*\", '.mp3']`                          |\n| `random_name`       | Uses a random filename for each file                                                                       |\n| `avoid_overwriting` | Will append a timestamp before each filename if a conflict would occur                                     |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n[\/div]\n\n\n### Filepicker Field\n\n![Filepicker Field](filepicker_field.png)\n\nThe `filepicker` field type can be used in pages, plugin and theme configurations (blueprints). Handles selecting a file from a location and saving it to the page headers or theme \/ plugin configuration.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\npicked_image:\n  type: filepicker\n  folder: 'theme@:\/images\/pages'\n  label: Select a file\n  preview_images: true\n  accept:\n    - .png\n    - .jpg\n[\/prism]\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.a_file:\n  type: filepicker\n  folder: '@self'\n  preview_images: true\n  label: Select a file\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute     | Description                                                                                                |\n| :-----        | :-----                                                                                                     |\n| `folder` | The folder where the files will be looked up, relative to the Grav root. Accepts any value in the [file field destination format](\/forms\/blueprints\/how-to-add-file-upload#destination). |\n| `accept` | A list of accepted file extensions                                                          |\n| `preview_images` | If enabled, image files will have a little preview |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n[\/div]\n\n\n### Honeypot Field\n\nThe `honeypot` field type creates a hidden field that, when filled out, will return with an error. This is a useful way to prevent bots from filling out and submitting a form.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nfields:\n    - name: honeypot\n      type: honeypot\n[\/prism]\n\nThis is a simple text field which does not appear on the front end. Bots, which detect fields in the code and fill them out automatically, will likely fill the field out. The error prevents that form from being properly submitted. The error comes back next to the form element, rather than on the top in a message block.\n\nA honeypot field is a popular alternative to captcha fields.\n\n\n### List Field\n\n![List Field](list_field_bp.gif)\n\nThe `list` field type is used to create collections of fields. The field accepts a `fields` attribute that will host subfields, and there will be an \"Add item\" button to allow the user to add more items to the collection.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.buttons:\n  name: buttons\n  type: list\n  style: vertical\n  label: Buttons\n  fields:\n    .text:\n      type: text\n      label: Text\n    .url:\n      type: text\n      label: URL\n    .primary:\n      type: toggle\n      label: Primary\n      highlight: 1\n      default: 1\n      options:\n          1: 'Yes'\n          0: 'No'\n      validate:\n          type: bool\n[\/prism]\n\nThis example will generate this Admin interface:\n\n![](field_list_1.png)\n\nWhen saving the page, we'll see the following YAML added to the page frontmatter:\n\n[prism classes=\"language-yaml line-numbers\"]\nbuttons:\n    -\n        text: 'Some text'\n        url: 'https:\/\/getgrav.org'\n        primary: false\n    -\n        text: 'Another text'\n        url: 'https:\/\/another-url.com'\n        primary: true\n[\/prism]\n\nThis will be used in the Theme Twig to output the list in some nice way.\n\nAnother example of this field definition is this list of Features, used by Antimatter's Features Modular child page. Every feature has an icon, a header and some text:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.features:\n  name: features\n  type: list\n  label: Features\n\n  fields:\n    .icon:\n      type: text\n      label: Icon\n    .header:\n      type: text\n      label: Header\n    .text:\n      type: text\n      label: Text\n[\/prism]\n\nAccessing and displaying the data of a `list` field is done with a simple twig for loop, like in the example below:\n\n[prism classes=\"language-twig line-numbers\"]\n{% for feature in page.header.features %}\n    {{ feature.icon }}\n    {{ feature.header }}\n    {{ feature.text }}\n{% endfor %}\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute   | Description                                              |\n| :-----      | :-----                                                   |\n| `fields`    | The subfields                                            |\n| `collapsed` | If `true`, the list is opened collapsed. By default it's expanded |\n| `style`     | Can be set to `vertical` to conserve horizontal space    |\n| `btnLabel`  | The \"add new item\" label text                            |\n| `sort`      | Boolean. If negative, disables the ability to sort items |\n| `controls`  | Decides where the \"Add Item\" button will be placed. Can be set to `[top|bottom|both]` defaults to `bottom`.  |\n| `min`       | Minimum number of items allowed in the list.             |\n| `max`       | Maximum number of items allowed in the list. 'Add item' button won't function past this number |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n| [size](#common-fields-attributes)              |\n[\/div]\n\n\n### PageMediaSelect Field\n\nThe `pagemediaselect` field type is used to allow the users to choose a media from one of the page media already uploaded through FTP or using the page media manager.\n\nExample\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.img_link:\n  label: Choose media\n  type: pagemediaselect\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute  | Description           |\n| :-----     | :-----                |\n| `multiple` | Select multiple files |\n[\/div]\n\n[div class=\"table table-keycol\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [id](#common-fields-attributes)                |\n| [novalidate](#common-fields-attributes)        |\n| [size](#common-fields-attributes)              |\n[\/div]\n\n\n### Pages Field\n\n![Pages Field](pages_field_bp.gif)\n\nThe `pages` field type shows a list of the site pages.\n\nExample\n\n[prism classes=\"language-yaml line-numbers\"]\nhome.alias:\n    type: pages\n    size: medium\n    classes: fancy\n    label: PLUGIN_ADMIN.HOME_PAGE\n    show_all: false\n    show_modular: false\n    show_root: false\n    help: PLUGIN_ADMIN.HOME_PAGE_HELP\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute      | Description                            |\n| :-----         | :-----                                 |\n| `show_all`     | Shows all pages                        |\n| `show_modular` | Shows all pages                        |\n| `show_root`    | Shows all pages                        |\n| `options`      | An optional list of additional choices |\n| `multiple`     | Select multiple pages                  |\n| `selectize`    |                                        |\n[\/div]\n\nIf you set `multiple` to true, you need to add `validate.type: array`. Otherwise the array of selected pages will not be saved correctly.\n\n[div class=\"table]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [novalidate](#common-fields-attributes)        |\n| [size](#common-fields-attributes)              |\n[\/div]\n\n\n### Section Field\n\nThe `Section` field type is used to divide a setting page into sections.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    type: section\n    title: PLUGIN_ADMIN.DEFAULTS\n    underline: true\n\n    fields:\n\n        #..... subfields\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute   | Description                                                    |\n| :-----      | :-----                                                         |\n| `title`     | A heading title                                                |\n| `underline` | Add an underline after the title                               |\n| `text`      | A text to show beneath                                         |\n| `security`  | An array of credentials a user needs to visualize this section |\n[\/div]\n\n\n### Selectize Field\n\n![Selectize](selectize_field_bp.gif)\n\nThe `selectize` field type is used to show a hybrid of a text box and a select box. Mostly useful for tagging and other element picking fields.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\ntaxonomies:\n    type: selectize\n    size: large\n    label: PLUGIN_ADMIN.TAXONOMY_TYPES\n    classes: fancy\n    help: PLUGIN_ADMIN.TAXONOMY_TYPES_HELP\n    validate:\n        type: commalist\n[\/prism]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [default](#common-fields-attributes)           |\n| [help](#common-fields-attributes)              |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [toggleable](#common-fields-attributes)        |\n| [validate.required](#common-fields-attributes) |\n| [validate.type](#common-fields-attributes)     |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes IN INPUT BLOCK              |\n| :-----                                        |\n| [autocomplete](#common-fields-attributes)     |\n| [autofocus](#common-fields-attributes)        |\n| [classes](#common-fields-attributes)          |\n| [disabled](#common-fields-attributes)         |\n| [id](#common-fields-attributes)               |\n| [novalidate](#common-fields-attributes)       |\n| [placeholder](#common-fields-attributes)      |\n| [readonly](#common-fields-attributes)         |\n| [size](#common-fields-attributes)             |\n| [title](#common-fields-attributes)            |\n| [validate.pattern](#common-fields-attributes) |\n| [validate.message](#common-fields-attributes) |\n[\/div]\n\n\n### Taxonomy Field\n\n![Taxonomy](taxonomy_field_bp.gif)\n\nThe `taxonomy` field type is a special select preconfigured to select one or more taxonomy values.\n\nExample:\n\n[prism classes=\"language-yaml line-numbers\"]\nheader.taxonomy:\n  type: taxonomy\n  label: PLUGIN_ADMIN.TAXONOMY\n  multiple: true\n  validate:\n    type: array\n[\/prism]\n\n[div class=\"table table-keycol\"]\n| Attribute  | Description                                             |\n| :-----     | :-----                                                  |\n| `multiple` | boolean. If positive, the field accepts multiple values |\n[\/div]\n\n[div class=\"table\"]\n| Common Attributes Allowed                      |\n| :-----                                         |\n| [autofocus](#common-fields-attributes)         |\n| [classes](#common-fields-attributes)           |\n| [default](#common-fields-attributes)           |\n| [disabled](#common-fields-attributes)          |\n| [help](#common-fields-attributes)              |\n| [id](#common-fields-attributes)                |\n| [label](#common-fields-attributes)             |\n| [name](#common-fields-attributes)              |\n| [novalidate](#common-fields-attributes)        |\n| [outerclasses](#common-fields-attributes)      |\n| [size](#common-fields-attributes)              |\n| [style](#common-fields-attributes)             |\n| [validate.required](#common-fields-attributes) |\n| [validate.pattern](#common-fields-attributes)  |\n| [validate.message](#common-fields-attributes)  |\n[\/div]\n"},{"title":"Blueprints","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/forms\/blueprints","taxonomy":{"categories":["docs"],"tags":[]},"media":["blueprints_1.png","blueprints_2.png","blueprints_3.png"],"content":"## What is a Blueprint?\n\nBlueprints are an important aspect of Grav. They are essentially the foundation of a theme or plugin's interaction with the Grav admin. They tell Grav what a theme or plugin is, its name, where it can be found on GitHub, etc. It also generates the configuration options for that theme or plugin in the Grav admin. \n\nA Blueprint is defined in a YAML file, and can generally host properties as well as form definitions.\n\nThe vast majority of Grav users will never have to work with Blueprints. Simply put, they determine how plugins and themes appear in the back-end of the site. For most users, this is where they pick up, configuring their themes and plugins using the Grav admin or manipulating options within the theme or plugin's primary YAML file.\n\nThe folks that will work the most with Blueprints are developers that are creating new themes and plugins and customizing a resource's options in the back end. They're a powerful tool that defines what your resource is, where Grav can find updates for it, and what configuration options you should be able to set in the back end.\n\n## Types of Blueprints\n\nGrav uses Blueprints to:\n\n- define themes and plugins information.\n- define theme\/plugin configuration options to be shown in the Admin.\n- define the Pages forms in the Admin.\n- define the options shown in the Configuration Admin section.\n\nAt this point, we will break down additional details about how Blueprints work in Grav.\n\n#### Themes and Plugins\n\nWhen used with themes and plugins, the convention is to put a **blueprints.yaml** in the package. Doing this tells Grav the metadata of that resource, which introduces it to the Grav admin.\n\nA **blueprints.yaml** file is an important part of any theme and plugin. It's essential for the GPM (Grav Package Manager) system. GPM uses the information stored in the blueprint to make the plugin available to users.\n\nIn our [example plugin blueprint](example-plugin-blueprint), we dive into the blueprint of the **Assets** plugin. This blueprint sets the name, author information, keywords, home page, bug report link, and other metadata that not only tells Grav where it can locate updates for the plugin, but to provide a useful resource to the user accessible from the Grav Admin.\n\nOnce this information is given, further down in the Blueprint's page, you find forms information. This information creates the Admin Forms that are accessible by the user in the backend of Grav. For example, if you wanted to add a toggle that enables or disables a particular feature of that plugin, you would add it here.\n\n![Admin Forms](blueprints_1.png?classes=shadow)\n\nThe **blueprints.yaml** file works with the plugin's named YAML file (example: **assets.yaml**). The blueprint sets what the configurable options are, and the resource's self-named named YAML file sets their values. It's this named YAML file that is then duplicated to the Grav instance's `user\/config` section to override these defaults either manually or through the Grav admin.\n\nSo essentially, when it comes to any configuration option for a theme or plugin, the **blueprints.yaml** file defines it, and the named YAML file for that resource tells you what it is set at.\n\n#### Pages\n\nGrav Pages can really be anything. A page can be a blog listing, a blog post, a product page, an image gallery, etc.\n\nWhat determines what a page should do and how it should appear is the **Page Blueprint**.\n\nGrav provides some basic Page Blueprints: Default and Modular. Those are the two main building blocks of Grav.\n\nAdditional page Blueprints are added and set up by the theme, which might decide to add as many page Blueprints as possible, or focus on some particular Page blueprints focused on what it needs to do.\n\nA Grav theme is much more flexible and powerful than what you might be used to on other platforms.\n\nThis allows themes to be specific application. For example, a theme might specialize in one of those goals:\n\n- building a documentation site, like the one you are reading now.\n- building an e-commerce site.\n- build a blog.\n- build a portfolio site.\n\nA theme can also allow its users to build all of them, but usually a fine-tuned theme created for a single purpose can satisfy that goal better than a generic theme.\n\nA page file is used by a page by setting its markdown file name, e.g. `blog.md`, `default.md` or `form.md`.\n\nEach of those files will use a different page file. You can also change the file type by [using the template header property](https:\/\/learn.getgrav.org\/content\/headers#template).\n\nThe template used by a page not only determines the \"look and feel\" in the frontend, but also determines how the Admin Plugin will render it, allowing you to add options, select boxes, custom inputs and toggles.\n\nHow to do it: in your theme, add a `blueprints\/` folder and add a YAML file with the name of the page template you added. For example if you add a `blog` page template, add a `blueprints\/blog.yaml` file. You can find an [example of this directory in the **Antimatter** theme](https:\/\/github.com\/getgrav\/grav-theme-antimatter\/tree\/develop\/blueprints).\n\n## Components of a Blueprint\n\nThere are two sets of information presented in a **blueprints.yaml** file. The first set of metadata information is the identity of the resource itself, the second set is about the forms. All this information is stored in a single **blueprints.yaml** file stored at the root of each plugin and theme.\n\nHere is an example of the metadata portion of a **blueprints.yaml** file:\n\n```yaml\nname: GitHub\nversion: 1.0.1\ndescription: \"This plugin wraps the [GitHub v3 API](https:\/\/developer.github.com\/v3\/) and uses the [php-github-api](https:\/\/github.com\/KnpLabs\/php-github-api\/) library to add a nice GitHub touch to your Grav pages.\"\nicon: github\nauthor:\n  name: Team Grav\n  email: devs@getgrav.org\n  url: https:\/\/getgrav.org\nhomepage: https:\/\/github.com\/getgrav\/grav-plugin-github\nkeywords: github, plugin, api\nbugs: https:\/\/github.com\/getgrav\/grav-plugin-github\/issues\nlicense: MIT\n```\n\nAs you can see here, this area contains a lot of general identifying information about the plugin, including its name, version number, description, author information, license, keywords, and URLs where you can find more information or report bugs. You can see this section in action in the screenshot taken from the Grav Admin below.\n\n![Admin Forms](blueprints_2.png?classes=shadow)\n\nThe next section is the forms area, which is just a couple spaces below the data listed above. This area of the blueprint generates forms and fields used to configure the plugin from the Grav Admin. Here is a quick example of this area of the **blueprints.yaml** file.\n\n```yaml\nform:\n  validation: strict\n  fields:\n    enabled:\n        type: toggle\n        label: Plugin status\n        highlight: 1\n        default: 1\n        options:\n            1: Enabled\n            0: Disabled\n        validate:\n            type: bool\n```\n\nThis area of the file creates any administrative options accessible in the Grav Admin. In this particular instance, we have created a simple **Plugin Status** toggle which lets the user enable or disable the plugin from the admin (pictured below).\n\n![Admin Forms](blueprints_3.png?classes=shadow)\n"},{"title":"Forms","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/forms","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 6\n\n# Forms\n\nThis chapter explains how to **extend admin forms** and create **custom fields** for your page content.\n\nAlso, it digs into creating frontend forms."},{"title":"FAQ","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/faq","taxonomy":{"categories":["docs"],"tags":[]},"media":["faq_1.png","faq_2.png","offline.png"],"content":"This FAQ is intended to provide useful tutorials, tips, and tricks to help you get the most out of the Admin plugin.\n\n### Manual Installation of Admin\n\nManual installation is not the recommended method of installation, however, it is still possible to install the admin plugin manually. Basically, you need to download each of the following plugins individually:\n\n* [admin](https:\/\/github.com\/getgrav\/grav-plugin-admin\/archive\/master.zip)\n* [login](https:\/\/github.com\/getgrav\/grav-plugin-login\/archive\/master.zip)\n* [form](https:\/\/github.com\/getgrav\/grav-plugin-form\/archive\/master.zip)\n* [email](https:\/\/github.com\/getgrav\/grav-plugin-email\/archive\/master.zip)\n\nExtract each archive file into your `user\/plugins` folder, then ensure the folders are renamed to just `admin\/`, `login\/`, `form\/`, and `email\/`.  Then proceed with the **Usage instructions below**.\n\n### Adding and Managing Users\n\nWhen you first install the Admin plugin, you will be prompted to create an admin user when you point your browser at your site. This is a simple web form that ensures at least one admin user has been created.\n\n![New User](..\/introduction\/new-user.png?width=1009&classes=shadow)\n\nYou can easily add other users but it requires a bit of work in the terminal\/command prompt to do. From your terminal, access the root of the Grav site you'd like to add users to, and type the following command:\n\n[prism classes=\"language-bash command-line\"]\nbin\/plugin login newuser\n[\/prism]\n\n![Admin FAQ](faq_1.png?width=1009&classes=shadow)\n\nThis will initiate a series of prompts to guide you through the creation of a new user. These include creating a user name, password, email address, and setting the new user's permissions level.\n\n!!!! You will need to have a user name consisting of between 3 and 16 characters which can include lowercase letters, numbers, underscores, and hyphens. Uppercase letters, spaces, and special characters are not allowed for the user name.\n\nAt one point during the creation process you will be asked to choose a set of permissions for the new user. There are currently three options:\n\n[div class=\"table table-keycol\"]\n| Role(s)        | Description                                                                                                       |\n| :-----         | :-----                                                                                                            |\n| Admin          | Gives the user access to the Admin back end. This role does not include front end access to protected pages. |\n| Site           | Gives user access to all pages in the front end. This is the equivalent of a logged-in user.                      |\n| Admin and Site | Gives user access to the entire site, front and back end.                                                         |\n[\/div]\n\nUser data is stored in `SITE_ROOT\/user\/accounts\/` and each user is given a **YAML** file containing that user's login information and other details. Here is an example of the data contained within a user account file. For example this could be the content of `SITE_ROOT\/user\/accounts\/tester.yaml`.\n\n!! The filename `tester.yaml` dictates the username is `tester`\n\n[prism classes=\"language-yaml line-numbers\"]\nemail: test@rockettheme.com\naccess:\n  admin:\n    login: true\n    super: true\n  site:\n    login: true\nfullname: 'Tester McTesting'\ntitle: Admin\nhashed_password: $2y$10$5RAUI6ZCISWR.4f0D6FILu3efYq3078ZX\/.9vtAnZbjxS\/4PXN\/WW\n[\/prism]\n\nYou can edit this information directly to the user's YAML file, or by selecting your user avatar from the sidebar of the admin. This will take you to a page where you can easily manage user information.\n\n![Admin FAQ](faq_2.png?width=1009&classes=shadow)\n\n!! Avatar photos are automatically generated by [Gravatar](http:\/\/gravatar.com), based on the user's email address.\n\nFor security reasons, user passwords are stored as a hash. If you would like to change your password, we recommend doing so from within the admin.\n\n### Managing ACL\n\nEvery user yaml file has an `access` property. By setting this property appropriately, you can grant a specific user access to just a specific part of the admin.\n\nHere are the currently supported access levels explained:\n\n- `admin.login`: allows a user to login to the admin\n- `admin.super`: grants a user super admin powers, allowing access to all the admin interface and functionality\n- `admin.pages`: allows a user to view pages, edit them and add new ones\n- `admin.maintenance`: allows a user to update Grav from the admin side, check for updates and clear the cache\n- `admin.plugins`: allows a user to access the plugins functionality, edit the plugins settings, disable plugins or add new ones\n- `admin.themes`: allows a user to access the themes functionality, edit theme settings, change themes and add new ones\n- `admin.statistics`: allows a user to see the site statistics\n- `admin.cache`: allows a user to clear the cache\n\n!! Changes made to a user.yaml file while that user is logged-in will only take effect after they log out and back in again.\n\n### Custom Admin URL\n\nOne way to help keep your admin panel secure is to hide its location. To do this would be to change the URL from\n\n[prism classes=\"language-text\"]\nhttp:\/\/yourwebsite.com\/admin\n[\/prism]\n\nto something more ambiguous that is going to be harder for someone to guess.  To do this you need to locate `admin.yaml` which can be found in `user\/plugins\/admin\/` folder and **copy this** to `user\/config\/plugins\/admin.yaml`.\n\nThen change the line `route: '\/admin'` to something more ambiguous, for example `route: '\/myspecialplace'`, this way if you need to access the admin panel for your grav site you will enter\n\n[prism classes=\"language-text\"]\nhttp:\/\/yourwebsite.com\/myspecialplace\n[\/prism]\n\n### Offline Mode\n\n![Offline](offline.png?width=1028&classes=shadow)\n\nIn the event that your server loses its connection to the Internet, the Grav Admin automatically enters into an Offline Mode. This mode is indicated by a notice below the low in the upper-left corner of the admin.\n\nWhen in Offline Mode, the admin will not attempt to retrieve updates to the CMS, plugins, or themes. This prevents hangups and other issues that would otherwise result from being unable to reach the update servers.\n\nOnce an Internet connection is re-established, the notice will disappear and Offline Mode will end, automatically.\n"},{"title":"Admin Event Hooks","date":"2018-07-15T08:58:43+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/extending\/admin-events","taxonomy":{"categories":["docs"],"tags":[]},"content":"The Admin plugin has multiple event hooks that can be used during the [Grav Lifecycle](\/plugins\/grav-lifecycle).  See the general plugin documentation for using event hooks in the [Plugins](\/plugins) section.\n\n## Available Admin Event Hooks\n* [onAdminTaskExecute](..\/admin-events#onAdminTaskExecute)\n* [onAdminCreatePageFrontmatter](..\/admin-events#onAdminCreatePageFrontmatter)\n* [onAdminSave](..\/admin-events#onAdminSave)\n* [onAdminAfterSave](..\/admin-events#onAdminAfterSave)\n* [onAdminAfterSaveAs](..\/admin-events#onAdminAfterSaveAs)\n* [onAdminAfterDelete](..\/admin-events#onAdminAfterDelete)\n* [onAdminAfterAddMedia](..\/admin-events#onAdminAfterAddMedia)\n* [onAdminAfterDelMedia](..\/admin-events#onAdminAfterDelMedia)\n\n\n## Enabling an Admin Event Hook\nAdmin event hooks are called the [same way](\/plugins\/plugin-tutorial#step-6-determine-if-the-plugin-should-run) that the core event hooks are called.\n\n\n* * *\n\n<a name=\"onAdminTaskExecute\"><\/a>\n### onAdminTaskExecute\n\nThe Admin plugin fires various tasks, depending on user interaction.  Tasks might include logout, login, save, 2faverify, etc.  After the task completes, this event hook fires.\n\n<a name=\"onAdminCreatePageFrontmatter\"><\/a>\n### onAdminCreatePageFrontmatter\n\nWhile creating a new page, this event is fired after the header data is initially set to allow plugins to programmatically manipulate the frontmatter.\n\n<a name=\"onAdminSave\"><\/a>\n### onAdminSave\n\nUse admin event `onAdminSave()` to manipulate the page object data `$obj` before it is saved to the filesystem.\n\n<a name=\"onAdminAfterSave\"><\/a>\n### onAdminAfterSave\n\nAfter saving the page in the administration panel, this event is fired.\n\n<a name=\"onAdminAfterSaveAs\"><\/a>\n### onAdminAfterSaveAs\n\nWhen creating a folder via the panel, this event fires immediately after creating the new folder and performing a standard cache clear.\n\n<a name=\"onAdminAfterDelete\"><\/a>\n### onAdminAfterDelete\n\nFires after a page or folder is deleted.  It is immediately followed by a standard cache clear.\n\n<a name=\"onAdminAfterAddMedia\"><\/a>\n### onAdminAfterAddMedia\n\nFires after an add media task completes, but before the confirmation message is displayed.\n\n<a name=\"onAdminAfterDelMedia\"><\/a>\n### onAdminAfterDelMedia\n\nFires after a delete media task completes, but before the confirmation message is displayed.\n"},{"title":"Extending","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/extending","taxonomy":{"categories":["docs"],"tags":[]},"media":["myPage.jpg","myPage-customField.jpg"],"content":"This page provides guides for how to extend the Administration Panel, as well as best practices when doing so.\n\n### Understanding Admin Themes\n\nJust like when you are extending or modifying a regular Grav Theme, you will be overriding templates to change the structure and appearance of the Admin Plugin. This means that the templates your plugin declares to be used instead of the default ones should mirror the structure of the Admin Theme exactly. For example, if we wanted to change the avatar in the left-side navigation, we would change `nav-user-avatar.html.twig`.\n\nIn the Admin plugin, the path to templates is: `user\/plugins\/admin\/themes\/grav\/templates`, hereafter referred to as *ADMIN_TEMPLATES*. The file we are looking for is `ADMIN_TEMPLATES\/partials\/nav-user-avatar.html.twig`, which contains `<img src=\"https:\/\/www.gravatar.com\/avatar\/{{ admin.user.email|md5 }}?s=47\" \/>`.\n\nIn your plugin, the path to templates should be: `user\/plugins\/myadminplugin\/admin\/themes\/grav\/templates`, hereafter referred to as *PLUGIN_TEMPLATES*. The corresponding file should then be `PLUGIN_TEMPLATES\/partials\/nav-user-avatar.html.twig`, which would contain something like `<img src=\"{{ myadminplugin_avatar_image_path }}\" \/>`.\n\nThus we are overriding the path to the template, but non-destructively. We target only the relevant template, in a way that does not override any unnecessary templates or hinder other admin themes from registering their alternate templates for the same use. To do this, we register the path in our plugin like this:\n\n[prism classes=\"language-twig line-numbers\"]\npublic static function getSubscribedEvents()\n{\n    return [\n        'onAdminTwigTemplatePaths' => ['onAdminTwigTemplatePaths', 0]\n    ];\n}\n\npublic function onAdminTwigTemplatePaths($event)\n{\n    $event['paths'] = [__DIR__ . '\/admin\/themes\/grav\/templates'];\n}\n[\/prism]\n\nIt is important to remember that the theme used in the Admin plugin is sensitive to the templates available. As a general rule, you should only modify templates with *low impact*, that is, make changes that will not break the interface for any user who installs your plugin. In this sense it is better to override `nav-user-avatar.html.twig` than `nav.html.twig`, as the latter contains much more functionality but uses `{% include 'partials\/nav-user-details.html.twig' %}` to include the former.\n\n### Adding a custom field\n\nTo create a custom field, we will add it to `PLUGIN_TEMPLATES\/forms\/fields\/myfield`. In the *myfield*-folder we need a Twig-template which declares how the field will operate. The easiest way to add a field is to find a similar field in `ADMIN_TEMPLATES\/forms\/fields` and copy that, to see how they are structured. For example, to add a HTML range-slider we create `PLUGIN_TEMPLATES\/forms\/fields\/range\/range.html.twig`. In this file, we add:\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends \"forms\/field.html.twig\" %}\n\n{% block input_attributes %}\n    type=\"range\"\n    {% if field.validate.min %}min=\"{{ field.validate.min }}\"{% endif %}\n    {% if field.validate.max %}max=\"{{ field.validate.max }}\"{% endif %}\n    {% if field.validate.step %}step=\"{{ field.validate.step }}\"{% endif %}\n    {{ parent() }}\n{% endblock %}\n[\/prism]\n\nThis adds a field-type called \"range\", with the type *range*, that allows the user to select a value by [sliding a button](http:\/\/www.html5tutorial.info\/html5-range.php). To use the new field in a blueprint, we would simply add this in [*blueprints.yaml*](\/plugins\/plugin-tutorial#required-items-to-function):\n\n[prism classes=\"language-yaml line-numbers\"]\nform:\n  fields:\n    radius:\n      type: range\n      label: Radius\n      id: radius\n      default: 100\n      validate:\n        min: 0\n        max: 100\n        step: 10\n[\/prism]\n\nWhich gives us a slider with a default value of 100, where accepted values are between 0 and 100, and each value increments by 10 as we slide it.\n\nWe could extend this further by using the `prepend` or `append` blocks available, by for example adding a visual indicator of the selected value. We change `range.html.twig` to contain this:\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends \"forms\/field.html.twig\" %}\n\n{% block input_attributes %}\n    type=\"range\"\n    style=\"display: inline-block;vertical-align: middle;\"\n    {% if field.id is defined %}\n        oninput=\"{{ field.id|e }}_output.value = {{ field.id|e }}.value\"\n    {% endif %}\n    {% if field.validate.min %}min=\"{{ field.validate.min }}\"{% endif %}\n    {% if field.validate.max %}max=\"{{ field.validate.max }}\"{% endif %}\n    {% if field.validate.step %}step=\"{{ field.validate.step }}\"{% endif %}\n    {{ parent() }}\n{% endblock %}\n{% block append %}\n  {% if field.id is defined %}\n    <output\n        name=\"{{ (scope ~ field.name)|fieldName }}\"\n        id=\"{{ field.id|e }}_output\"\n        style=\"display: inline-block;vertical-align: baseline;padding: 0 0.5em 5px 0.5em;\"\n    >\n    {{ value|join(', ')|e('html_attr') }}\n    <\/output>\n  {% endif %}\n{% endblock append %}\n[\/prism]\n\nThus we append an `<output>`-tag which will hold the selected value, and add to it and the field itself simple styling to align them properly. We also add an `oninput`-attribute to the field, so that changing values automatically updates the `<output>`-tag with the value. This requires that each field using the range-slider has an unique `id`-property, like the `id: radius` we declared above, which should be something like `id: myadminplugin_radius` to avoid conflicts.\n\n### Creating custom page templates\n\nAs mentioned in [Theme Basics](themes\/theme-basics#content-pages-twig-templates), there is a direct relationship between **pages** in Grav and the **Twig template files** provided in a theme\/ plugin.\nTo create a custom page template, you will need a blueprint file to define the fields for the Admin plugin and a template file for rendering the content.\n\n#### Adding a custom page template to a theme\/ plugin\nIn the root of the theme\/ plugin folder, create a folder named `templates`.  Inside this folder, create a new mypage.html.twig file.  This will be the Twig template for the new page template \"mypage\".\n\nExample mypage.html.twig:\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n    {{ page.header.newTextField }}\n    {{ page.content}}\n{% endblock %}\n[\/prism]\n\nThere is more information about Twig theming in the [Twig Primer](\/themes\/twig-primer) section.\n\nThemes automatically find template files within the theme's `templates` folder.  If the template is being added via a plugin, you'll need to add the template via the event `onTwigTemplatePaths`:\n\n[prism classes=\"language-twig line-numbers\"]\n    public function onPluginsInitialized()\n    {\n        \/\/ If in an Admin page.\n        if ($this->isAdmin()) {\n            return;\n        }\n        \/\/ If not in an Admin page.\n        $this->enable([\n            'onTwigTemplatePaths' => ['onTwigTemplatePaths', 1],\n        ]);\n    }\n\n    \/**\n     * Add templates directory to twig lookup paths.\n     *\/\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '\/templates';\n    }\n\n[\/prism]\n\n\n#### Adding a custom page blueprint to a theme\/ plugin\n\nIn order for the Admin plugin to provide a new `mypage` page option, create a folder named `blueprints` in the root of the theme\/ plugin. Inside this folder, create a new mypage.yaml file.  This is where you will define custom fields for the Admin plugin to display when creating a new page.  Available form fields can be found in the [Forms](\/forms) chapter.\n\nThe example blueprint `mypage.yaml` below extends the default page template, and then adds header.newTextField under the content tab.:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: My Page Blueprint\n'@extends':\n    type: default\n    context: blueprints:\/\/pages\n\nform:\n  fields:\n    tabs:\n      type: tabs\n      active: 1\n      fields:\n        content:\n          type: tab\n          fields:\n             header.newTextField:\n              type: text\n              label: 'New Text Field'\n\n[\/prism]\n\nSimilarly to the `templates` folder, a theme will automatically add any blueprint yaml files found within the `blueprints` folder.  If the blueprint is being added via a plugin, you'll need to add the blueprint via the event `onGetPageTemplates`:\n\n[prism classes=\"language-twig line-numbers\"]\n    public function onPluginsInitialized()\n    {\n        \/\/ If in an Admin page.\n        if ($this->isAdmin()) {\n            $this->enable([\n                'onGetPageTemplates' => ['onGetPageTemplates', 0],\n            ]);\n            return;\n        }\n\n    \/**\n     * Add blueprint directory to page templates.\n     *\/\n    public function onGetPageTemplates(Event $event)\n    {\n        $types = $event->types;\n        $locator = Grav::instance()['locator'];\n        $types->scanBlueprints($locator->findResource('plugin:\/\/' . $this->name . '\/blueprints'));\n        $types->scanTemplates($locator->findResource('plugin:\/\/' . $this->name . '\/templates'));\n    }\n\n[\/prism]\n\n#### Creating a new page\n\nAfter defining the blueprint and template files, create a new page within the admin panel by clicking on **Add** and then selecting \"Mypage\":\n![myPage.jpg](myPage.jpg)\n\nThe Admin edit form now displays the new custom field \"New Text Field\":\n![myPage-customField.jpg](myPage-customField.jpg)\n"},{"title":"Tools","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/tools","taxonomy":{"categories":["docs"],"tags":[]},"media":["tools.png","tools1.png","tools1b.png","tools2.png"],"content":"![Admin Tools](tools.png)\n\nThere are instances where you may want to upload a theme or plugin package that isn't currently in the main Grav plugins directory. Perhaps you have a premium theme that is made available in a zip file, or you're developing a plugin and want to upload your latest build to your Grav install for testing. In any case, you can do this by way of FTP, but the Admin gives you an even simpler solution.\n\nUsing the **Direct Install** tool, you can upload a zipped package directly to your Grav install and have it available for use in seconds. This isn't just limited to plugins and themes. You can even upload Grav itself this way and upgrade (or downgrade) doing this, as well. This is especially useful for Grav contributors that want to test their work easily.\n\nAs with any installation process, we recommend having a recent backup of your Grav install before using this tool - especially if you plan on using it to change your entire Grav install.\n\n### Uploading\n\n![Admin Tools](tools1.png)\n\nThe first method of direct install available is a file upload. You can upload a zip package directly to Grav using this tool. Simply select the **Choose File** button (or drag your zip package to the button with some browsers) and select your local package file. Once you have your file selected, simply hit **Upload and Install** to install your package.\n\n![Admin Tools](tools1b.png)\n\nOnce your package has been successfully installed, you will be greeted with an alert letting you know. That's all there is to it!\n\n#### Remote Location\n\n![Admin Tools](tools2.png)\n\nThe second method involves linking directly to a package file. For example, if you have a package hosted on a remote server, you can enter the URL of that package in the field. GPM friendly download links such as `https:\/\/getgrav.org\/download\/themes\/bootstrap\/1.6.0` should work fine.\n\nBy default, these uploads are limited to official GPM repository links. But, you can go to **Configuration > System** and toggle the **Official GPM Only** option to **No** to unlock this field and enable direct zip package links that are not official GPM repositories. For example: `http:\/\/example.com\/mypackage.zip`. This is an advanced feature and should only be used in cases where you have properly vetted the package as safe.\n"},{"title":"Themes","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/themes","taxonomy":{"categories":["docs"],"tags":[]},"media":["themes.png","themes1.png","themes2.png","themes3.png","themes4.png"],"content":"![Admin Themes](themes.png?width=1009&classes=shadow)\n\nThe **Themes** in the admin is where you can go to add and manage your site's themes.\n\nIn this page, we will explore how to manage existing themes, and add a new one to your site.\n\n!! Accessing the Themes functionality requires an `access.admin.super` or `access.admin.themes` access level.\n\n### Controls\n\n![Admin Themes](themes1.png?width=1009&classes=shadow)\n\nAlong the top of the **Themes** area of the admin, you will find the <i class=\"fa fa-reply\"><\/i> **Back**, <i class=\"fa fa-plus\"><\/i> **Add**, and <i class=\"fa fa-refresh\"><\/i> **Check for Updates** buttons.\n\n<i class=\"fa fa-reply\"><\/i> **Back** simply takes you back to either the **Dashboard** or to the main **Themes** page if you are deeper into that area of the admin.\n\n<i class=\"fa fa-refresh\"><\/i> **Check for Updates** checks your presently-installed themes for any updates.\n\n#### Adding a New Theme\n\n![Admin Themes](themes2.png?width=1009&classes=shadow)\n\n<i class=\"fa fa-plus\"><\/i> **Add** pulls up a display of currently-available Grav themes you can add to your site. This is a quick and easy way to install a new theme. Simply select the <i class=\"fa fa-plus\"><\/i> **Install** button to install the theme.\n\n![Admin Themes](themes3.png?width=1009&classes=shadow)\n\nDoing so will take you to the new theme's **Information** panel which contains more detailed information about the theme, as well as any options set in its *blueprints* file. Once you are satisfied with any settings changes, simply select the <i class=\"fa fa-check\"><\/i> **Save** button to save your changes.\n\nYou can also delete the theme from your site by selecting the red <i class=\"fa fa-fw fa-warning\"><\/i> **Remove Theme** button in the bottom-right area of the panel.\n\n### Installed Themes\n\n![Admin Themes](themes4.png?width=1009&classes=shadow)\n\nThe **Installed Themes** section displays your currently-installed themes. Selecting the thumbnail of a theme takes you to the information page for that theme, while the gray **Activate** button at the bottom of each thumbnail gives you the ability to set that theme as the active default theme for your site.\n\nThe currently-active theme is indicated by the <i class=\"fa fa-star\"><\/i> **Active Theme** icon.\n\nAt the top of each thumbnail you will see the name and current version number of each theme. The purple <i class=\"fa fa-check-circle\"><\/i> check icon indicates that a theme was created by the Grav team. Themes without that icon are created and maintained by third-party developers.\n"},{"title":"Options","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/plugins\/options","taxonomy":{"categories":["docs"],"tags":[]},"media":["grav-options1.png","grav-options2.png","grav-options3.png","grav-options4.png","grav-options5.png","grav-options6.png"],"content":"![Admin Options](grav-options1.png?width=2546&classes=shadow)\n\nThe Admin Panel plugin has a set of options of its own accessible in the **Plugins** area of the admin. To reach them, simply navigate to **Plugins > Admin Panel** and select the title link for the plugin called **Admin Panel**. This will open a page filled with useful options to help you customize your experience with the Admin.\n\n### Plugin Information\n\n![Admin Options](grav-options2.png?width=1964&classes=shadow)\n\nThe top of the Admin Panel options page gives you some information about the Admin Panel plugin. This includes the plugin author, homepage, and license, in addition to other links and information to help you find additional information and report any bugs.\n\nThis is a pretty standard feature in any plugin's options page.\n\n### Basics\n\n![Admin Options](grav-options3.png?width=1416&classes=shadow)\n\nThe **Basics** section of this page gives you a set of options to help you define your experience within the Admin. This includes being able to change the text that appears at the top of the sidebar, create a custom path to the administrator, and more.\n\nWe've broken down these options, and what they do, below.\n\n[div class=\"table table-keycol\"]\n| Option                          | Description                                                                                                                                 |\n| :-----                          | :-----                                                                                                                                      |\n| Enable Admin Caching            | Caching in the admin can be **Enabled** or **Disabled** here. This allows you to disable admin caching without affecting front end caching. |\n| Administrator Path              | Changing the path to the administrator is done here. The default path is `\/admin`, but you can make it whatever you'd like from this field. |\n| Logo Text                       | This is where you define the text that appears at the top of the administrator's sidebar.                                                   |\n| Body Classes                    | Want to give the body of your admin a different look? You can add body class(es) here. Separate multiple classes with a space.              |\n| Sidebar Activation              | Choose between **Tab** and **Hover** methods of expanding the sidebar.                                                                      |\n| Hover Delay                     | Set the delay time your cursor needs to hover over the compressed sidebar to expand in **Hover** mode.                                      |\n| Sidebar Size                    | Choose between **Automatic** and **Small** as your default sidebar size.                                                                    |\n| Edit Mode                       | Choose your default content editor. By default, the options are **Normal** and **Expert**.                                                  |\n| Use Google Fonts                | Use Google custom fonts.  Disable this to use Helvetica. Useful when using Cyrillic and other languages with unsupported characters.        |\n| Show GitHub Link                | **Enable** or **Disable** display of the \"Found an issue? Please report it on GitHub.\" message.                                             |\n| Automatically Check for Updates | Choose to automatically check for updates to the **Admin Panel** plugin.                                                                    |\n| Session Timeout                 | Set the session timeout (in seconds) here.                                                                                                  |\n| Warn on Page Delete             | **Enable** or **Disable** a warning that asks you to confirm an action that results in a page's deletion.                                   |\n[\/div]\n\n### Dashboard\n\n![Admin Options](grav-options4.png?width=1068&classes=shadow)\n\nThis section of the page lets you customize the items that appear in the main dashboard of the admin. Not a fan of the News Feed and want to get rid of it? Want to streamline your dashboard down to one or two sections you love? This is where you can do that.\n\n[div class=\"table table-keycol\"]\n| Option                    | Description                                                                                                  |\n| :-----                    | :-----                                                                                                       |\n| Maintenance Widget        | **Enable** or **Disable** the display of the **Maintenance** area of the main Dashboard page in the Admin.   |\n| Statistics Widget         | **Enable** or **Disable** the display of the **Statistics** area of the main Dashboard page in the Admin.    |\n| Notifications Feed Widget | **Enable** or **Disable** the display of the **Notifications** area of the main Dashboard page in the Admin. |\n| News Feed Widget          | **Enable** or **Disable** the display of the **News Feed** area of the main Dashboard page in the Admin.     |\n| Latest Pages Widget       | **Enable** or **Disable** the display of the **Latest Pages** area of the main Dashboard page in the Admin.  |\n[\/div]\n\n### Notifications\n\n![Admin Options](grav-options5.png?width=1062&classes=shadow)\n\nYou can enable or disable specific types of notifications from this section. You can turn off feed update notifications, as well as notifications for plugins and\/or themes.\n\n[div class=\"table table-keycol\"]\n| Option                  | Description                                                           |\n| :-----                  | :-----                                                                |\n| Feed Notifications      | **Enable** or **Disable** feed-based notifications in the admin.      |\n| Dashboard Notifications | **Enable** or **Disable** dashboard-based notifications in the admin. |\n| Plugins Notifications   | **Enable** or **Disable** plugins-based notifications in the admin.   |\n| Themes Notifications    | **Enable** or **Disable** themes-based notifications in the admin.    |\n[\/div]\n\n### Popularity\n\n![Admin Options](grav-options6.png?width=1928&classes=shadow)\n\nOne of the Admin's great features is its ability to track and display traffic information from the Admin's dashboard. This section of the Admin plugin's options gives you the ability to enable or disable traffic tracking, and configure how that data is displayed.\n\n[div class=\"table table-keycol\"]\n| Option           | Description                                                                                        |\n| :-----           | :-----                                                                                             |\n| Visitor tracking | You can **Enable** or **Disable** the visitor tracking feature here.                               |\n| Days of stats    | This field lets you set the number of days of visitor data kept in the graph before being dropped. |\n| Ignore           | Ignore traffic to specific URLs in your site. For example `\/test` or `\/modular`                    |\n[\/div]"},{"title":"Plugins","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/plugins","taxonomy":{"categories":["docs"],"tags":[]},"media":["plugins-1.png","plugins-2.png","plugins-3.png","plugins-4.png","plugins.png"],"content":"![Admin Plugins](plugins.png?width=2532&classes=shadow)\n\nThe **Plugins** area of the admin is where you can go to manage your plugins, add new ones, remove existing ones, and quickly access links to documentation and other information.\n\nIn this page, we will explore this area of the admin in detail, including how to active and deactivate installed plugins, and add new ones with ease.\n\n!! Accessing the Plugins functionality requires an `access.admin.super` or `access.admin.plugins` access level.\n\n### Controls\n\n![Admin Plugins](plugins-1.png?width=2024&classes=shadow)\n\nThe **Controls** area at the top of the page gives you the ability to add new plugins, as well as check for updates for existing ones.\n\n![Admin Plugins](plugins-2.png?width=2014&classes=shadow)\n\nThe <i class=\"fa fa-plus\"><\/i> Add button takes you to a page listing all of the currently-available Grav plugins, enabling you to view their information and install them by selecting the <i class=\"fa fa-plus\"><\/i> Install button to the right of the plugin.\n\n! The <span color=\"purple\"><i class=\"fa fa-check-circle\"><\/i><\/span> icon indicates that the plugin is created and supported by the Grav team. Plugins without this icon were created by third-party developers.\n\n### Installed Plugins\n\n![Admin Plugins](plugins-4.png?width=2014&classes=shadow)\n\nThis area of the Plugins administrator shows you, at a glance, which plugins are presently installed on your Grav site. Additionally, you can enable and disable these plugins by selecting the <i class=\"fa fa-fw fa-toggle-on\"><\/i> toggle icon to the right of each plugin.\n\n![Admin Plugins](plugins-3.png?width=1970&classes=shadow)\n\nSelecting the <i class=\"fa fa-chevron-down\"><\/i> chevron icon will give you more information about the plugin, including its author, project home page and bug tracker, as well as its license and a brief description. You can also quickly access the plugin's readme file for additional information and usage guide.\n\nYou can also click the plugin's name to go to a more-detailed page including the plugin's settings area where you can configure the plugin.\n"},{"title":"Editor (Advanced)","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/page\/advanced","taxonomy":{"categories":["docs"],"tags":[]},"media":["page-advanced-admin.png","page-advanced-ordering.png","page-advanced-overrides.png","page-advanced-route.png","page-advanced-settings.png","page-advanced.png"],"content":"![Admin Page Editor](page-advanced.png?width=2528&classes=shadow)\n\nThe **Page Editor** in the admin is a powerful text editor and page manager that enables you to create your page's content (including media files), its publishing and taxonomy options, settings, overrides, and theme-specific options.\n\nIt's essentially a one-stop-shop for managing a specific page.\n\nIn this page, we will go over the features and functionality found in the **Advanced** tab of the **Page Editor**.\n\n!! Accessing the Pages functionality requires an `access.admin.super` or `access.admin.pages` access level.\n\n! You might notice the check boxes to the left of some of the options in this area of the admin. These boxes indicate that you would like to override the default values for this page. Leaving them unchecked reverts to blank or default states.\n\n### Settings\n\n![Admin Page Editor](page-advanced-settings.png?width=974&classes=shadow)\n\nThe **Settings** area focuses on various critical options for your page. This is where you would go to change the name of the folder the page is stored in, its parent, and the template used when displaying the page.\n\n[div class=\"table table-keycol\"]\n| Option                | Description                                                                                                                      |\n| :-----                | :-----                                                                                                                           |\n| Folder Numeric Prefix | Numeric prefix that provides manual ordering and implies visibility.                                                             |\n| Folder Name           | Sets the name of the folder the page is contained in.                                                                            |\n| Parent                | Sets the parent of the current page. This can be - Root- for top-level pages, or specific pages to have them appear as subpages. |\n| Display Template      | Sets the template (provided by the theme) to be applied to the page. This has a direct effect on how the page looks.             |\n| Body Classes          | Classes entered in this field are applied to the body of the page.                                                               |\n[\/div]\n\n### Ordering\n\n![Admin Page Editor](page-advanced-ordering.png?width=940&classes=shadow)\n\nThe **Ordering** section gives you the ability to configuring page ordering of non-numbered folders.\n\n[div class=\"table table-keycol\"]\n| Option     | Description                                         |\n| :-----     | :-----                                              |\n| Page Order | Enables you to configure the ordering for the page. |\n[\/div]\n\n### Overrides\n\n![Admin Page Editor](page-advanced-overrides.png?width=1946&classes=shadow)\n\nOverrides are those options that give your page extra functionality, set its slug to something different than the default one based on the folder name, caching settings, navigation visibility, and make a page unreachable via a direct URL.\n\nYou can also use this area to turn on and off various processes for the page, such as Twig which enables you to inject Twig into your page content and have it render.\n\n[div class=\"table table-keycol\"]\n| Options                | Description                                                                                                        |\n| :-----                 | :-----                                                                                                             |\n| Menu                   | The string to be used in a menu.  If not set, <b>Title<\/b> will be used.                                           |\n| Slug                   | The slug variable allows you to specifically set the page's portion of the URL.                                    |\n| Process                | Processes you would like to have run, and made available in the page's content.                                    |\n| Default Child Template | Sets a default page type for child pages.                                                                          |\n| Routable               | Sets whether or not this page is reachable by a URL. If disabled, the page will not be reachable on the front end. |\n| Caching                | Enables or disables caching for the page.                                                                          |\n| Visible                | Determines if a page is visible in the navigation.                                                                 |\n[\/div]\n\n### Route Overrides\n\n![Admin Page Editor](page-advanced-route.png?width=940&classes=shadow)\n\n[div class=\"table table-keycol\"]\n| Options         | Description                                             |\n| :-----          | :-----                                                  |\n| Default Route   | Enter a new default route.                              |\n| Canonical Route | Enter a new value for to use for the canonical routing. |\n| Route Aliases   | Create route aliases.                                   |\n[\/div]\n\n### Admin Specific Overrides\n\n![Admin Page Editor](page-advanced-admin.png?width=1946&classes=shadow)\n\n[div class=\"table table-keycol\"]\n| Options                | Description                                                                                   |\n| :-----                 | :-----                                                                                        |\n| Children Display Order | Set the order children are displayed in. You can choose folder name or collection definition. |\n[\/div]\n"},{"title":"Editor (Options)","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/page\/options","taxonomy":{"categories":["docs"],"tags":[]},"media":["page-options-publishing.png","page-options-sitemap.png","page-options-taxonomies.png","page-options.png"],"content":"![Admin Page Editor](page-options.png?width=2532&classes=shadow)\n\nThe **Page Editor** in the admin is a powerful text editor and page manager that enables you to create your page's content (including media files), its publishing and taxonomy options, settings, overrides, and theme-specific options.\n\nIt's essentially a one-stop-shop for managing a specific page.\n\nIn this page, we will go over the features and functionality found in the **Options** tab of the **Page Editor**.\n\n!! Accessing the Pages functionality requires an `access.admin.super` or `access.admin.pages` access level.\n\n! You might notice the check boxes to the left of some of the options in this area of the admin. These boxes indicate that you would like to override the default values for this page. Leaving them unchecked reverts to blank or default states.\n\n### Publishing\n\n![Admin Page Editor](page-options-publishing.png?width=1946&classes=shadow)\n\nThis section is all about controlling the way your content is published. You can publish (or unpublish) content, set published dates as well as dates and times to unpublish, and to create metadata values specific to the page.\n\n[div class=\"table table-striped table-keycol\"]\n| Option           | Description                                                                                                                                              |\n| :-----           | :-----                                                                                                                                                   |\n| Published        | By default, a page is published unless you explicitly set published: false or via a `publish_date` being in the future, or `unpublish_date` in the past. |\n| Date             | The date variable allows you to specifically set a date associated with this page.                                                                       |\n| Published Date   | This serves as the official publishing date for the page. It can provide a date to automatically trigger publication.                                    |\n| Unpublished Date | This is the date\/time you would like to mark for the page to automatically trigger un-publication.                                                       |\n| Metadata         | Default metadata values that will be displayed on every page unless overridden by the page.                                                              |\n[\/div]\n\n### Taxonomies\n\n![Admin Page Editor](page-options-taxonomies.png?width=1944&classes=shadow)\n\nThe Taxonomies area is where you can configure your page's organizational properties. What categorie(s) the page will appear in, its tags, and more can be configured here.\n\n[div class=\"table table-striped table-keycol\"]\n| Option   | Description                                                                                                                                                             |\n| :-----   | :-----                                                                                                                                                                  |\n| Category | This field enables you to set one or more categories for the page. It is useful in content sorting and filtering.                                                       |\n| Tag      | Tags are a great way to provide some back-end insight into what your page is about. It's useful for content-driven sites as a mechanism for organization and filtering. |\n| Month    |                                                                                                                                                                         |\n[\/div]\n\n### Sitemap\n\n![Admin Page Editor](page-options-sitemap.png?width=1944&classes=shadow)\n\nHaving a good, clean sitemap is important for several reasons. Among them being user navigation and search engine optimization (SEO). Having a sitemap in place makes your site inherently more friendly to search engines, which can have a direct impact on ranking.\n\nThis area of the options page is only available if you install the [Sitemap plugin](https:\/\/github.com\/getgrav\/grav-plugin-sitemap).\n\n[div class=\"table table-striped table-keycol\"]\n| Options                  | Description                                                                                                                                                                                                                     |\n| :-----                   | :-----                                                                                                                                                                                                                          |\n| Sitemap Change Frequency | This drop-down enables you to set a frequency by which the page's sitemap is updated. This can be any time a change is made, hourly, daily, weekly, monthly, yearly, or never. By default, the global sitemap options are used. |\n| Sitemap Priority         | Sets the priority of this page in your sitemap.                                                                                                                                                                                 |\n[\/div]"},{"title":"Editor (Content)","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/page\/editor","taxonomy":{"categories":["docs"],"tags":[]},"media":["page-editor-1.png","page-editor-2.png","page-editor-3.png","page-editor-4.png","page-editor.png"],"content":"![Admin Page Editor](page-editor.png?width=2532&classes=shadow)\n\nThe **Page Editor** in the admin is a powerful text editor and page manager that enables you to create your page's content (including media files), its publishing and taxonomy options, settings, overrides, and theme-specific options.\n\nIt's essentially a one-stop-shop for managing a specific page.\n\n!! Accessing the Pages functionality requires an `access.admin.super` or `access.admin.pages` access level.\n\nTabs that appear in the **Page Editor** are not universal. There are a default set of form fields that are commonly found in Grav themes, however these can vary between themes. The admin pulls form field information from a number of sources including the theme and the template used for the specific page.\n\n!! The tabs and options represented in this documentation are by default. Theme developers have the ability to add their own options to these tabs, or even to do away with these tabs and replace them with something entirely different. We are documenting a common-case scenario based on the Antimatter theme to serve as an example.\n\nIn this page, we will go over the features and functionality found in the **Content** tab of the **Page Editor**.\n\n### Controls\n\n![Admin Page Editor](page-editor-1.png?width=2024&classes=shadow)\n\nAlong the top of the page, you will find the administrative controls that enable you to save, delete, copy, and move your page. Additionally, you can hit the **Back** button to get back to the main **Pages** area of the admin.\n\nThe **Save** and **Delete** buttons are pretty self-explanatory. They save and delete the currently-accessed page, respectively.\n\nSelecting the **Move** button activates a popup that gives you the ability to assign a new parent to the page. You have the same option in the **Advanced** tab.\n\n**Copy** creates a duplicate of your current page, appending a `-2` (or other numeric prefix if `-2` is already in use) to the end of the folder name. You can change both the folder name and title as you see fit.\n\n### Title\n\n![Admin Page Editor](page-editor-2.png?width=1920&classes=shadow)\n\nThe title of a page is typically set during that page's creation, however you can edit it after the fact here. Note that changing the page's title here will not have a direct impact on the folder name (which is used for navigation purposes) but it will change what people see on the front end.\n\n### Page Editor Content\n\n![Admin Page Editor](page-editor-3.png?width=1924&classes=shadow)\n\nThis is the heart of the Page Editor. It is where your page's content body is written and edited. It features many powerful tools typically only found in premium browser-based text editors.\n\nFor example, you can switch between edit and preview views using the <i class=\"fa fa-code\"><\/i> and <i class=\"fa fa-eye\"><\/i> buttons located in the upper-right area of the editor.\n\nBecause Grav's content is primarily based in markdown, the editing shortcuts automatically append markdown tags to your content. For example, highlighting a block of text and selecting the **B** icon surrounds the highlighted area with `**(selected area)**` bold tags.\n\nHere is a breakdown of the tools found in the content editor:\n\n[div class=\"table table-striped table-keycol\"]\n| Tool                                      | Description                                       |\n| :-----                                    | :-----                                            |\n| <i class=\"fa fa-fw fa-bold\"><\/i>          | Adds **Bold** tags to your content.               |\n| <i class=\"fa fa-fw fa-italic\"><\/i>        | Adds *Italic* tags to your content.               |\n| <i class=\"fa fa-fw fa-strikethrough\"><\/i> | Adds ~~Strikethrough~~ tags to your content.      |\n| <i class=\"fa fa-fw fa-link\"><\/i>          | Adds [links](https:\/\/getgrav.org) to your content. |\n| <i class=\"fa fa-fw fa-picture-o\"><\/i>     | Adds media to your content.                       |\n| <i class=\"fa fa-fw fa-quote-right\"><\/i>   | Adds quote tags to your content.                  |\n| <i class=\"fa fa-fw fa-list-ul\"><\/i>       | Creates an unordered list.                        |\n| <i class=\"fa fa-fw fa-list-ol\"><\/i>       | Creates an ordered list.                           |\n| <i class=\"fa fa-fw fa-code\"><\/i>          | Activates the edit view.                          |\n| <i class=\"fa fa-fw fa-eye\"><\/i>           | Activates the content preview.                    |\n| <i class=\"fa fa-fw fa-expand\"><\/i>        | Toggles to a full-page edit or preview view.      |\n[\/div]\n\n### Page Media\n\n![Admin Page Editor](page-editor-4.png?width=1924&classes=shadow)\n\nThe **Page Media** section at the bottom of the **Content** tab is all about media files for your page. These files exist in the same folder as the page's markdown file. Uploading new media files is as simple as **dragging-and-dropping** a file, or **tapping** in the white area of the section. This will bring up a file selector that enables you to pick files for upload.\n\nAlready have media files you'd like to insert into your page? Just move your mouse cursor over the image thumbnail and **drag-and-drop** the image into the editor.\n\nAlternatively you can select **Insert** option on the image thumbnail. This will insert the media directly into your page's content.\n\nYou can also delete media files by selecting **Delete**.\n"},{"title":"Pages","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/page","taxonomy":{"categories":["docs"],"tags":[]},"media":["add.png","add2.png","add3.png","pages.png","pages2.png"],"content":"![Admin Pages](pages.png?width=2520&classes=shadow)\n\nThe **Pages** page gives you quick editorial access to your site's content. This is where you can access a page's editor, delete pages, create new pages, and find out if a page is visible at a glance.\n\n!! Accessing the Pages functionality requires an `access.admin.super` or `access.admin.pages` access level.\n\nIf you frequently create or modify content on your site, this area of the admin will become very familiar to you.\n\n### Adding New Pages\n\n![Admin Pages](add.png?width=2024&classes=shadow)\n\nThree buttons line the top of the **Pages** administrative panel. The **Back** button sends you back to the **Dashboard**, while the **Add Page** and **Add Modular** buttons initiate the creation of new pages for your site.\n\nBelow, we break down the options available when you select these buttons.\n\n#### Add Page\n\n![Admin Pages](add2.png?width=1382&classes=shadow)\n\nThe **Add Page** button creates a non-modular page for your site. Once selected, a popup will appear enabling you to enter a **Title** and **Folder Name**, assign a **Parent Page** and **Display Template**, as well as to set whether the page should be visible or hidden.\n\n[div class=\"table table-keycol\"]\n| Option           | Description                                                                                                                                                                                                                                                                             |\n| :-----           | :-----                                                                                                                                                                                                                                                                                  |\n| Page Title       | This is where you enter the title of the page you are creating.                                                                                                                                                                                                                         |\n| Folder Name      | You can set a custom folder name for the page, or keep the automatically-generated one based on the title.                                                                                                                                                                              |\n| Parent Page      | This sets the parent page for the new page. Can be a child of another page (such as home or blog) or set to the root of your site. By setting the value of the `child_type` option in the frontmatter of a parent page a default `Display Template` will be automatically selected.                                                                                                                                                    |\n| Display Template | You can choose which theme-provided template you wish to have applied to the page.                                                                                                                                                                                                      |\n| Visible          | Sets whether or not you want the page to be visible in navigation. Can be set to **Auto** to have this be determined for you. In the auto setting, if there is another sibling page that uses a numeric prefix, it uses one and is therefore visible. Otherwise, it doesn't display it. |\n[\/div]\n\nOnce you have filled out this information, selecting **Continue** will take you to the new page's editor. We will cover the Page Editor in more detail in [a following guide](..\/page-editor).\n\n!! Whether a page is visible or not in these settings only has an effect on navigation. A page's ability to be visited by a browser is determined by the page's [publishing settings](..\/..\/content\/headers#published).\n\n#### Add Modular Page\n\n![Admin Pages](add3.png?width=1386&classes=shadow)\n\nThe second button along the top of the **Pages** area of the admin allows you to add a modular subpage to your site. Modular pages are different from regular pages because they are actually a collection of pages, arranged and displayed as one page. This button specifically lets you create subpages and assign them to a parent modular page.\n\nHere is a breakdown of the fields and options that appear in the **Add Modular Page** button's popup.\n\n[div class=\"table table-keycol\"]\n| Option           | Description                                                                                                        |\n| :-----           | :-----                                                                                                             |\n| Page Title       | Sets a title for the modular page.                                                                                 |\n| Folder Name      | You can set a custom folder name for the page, or keep the automatically-generated one based on the title.         |\n| Page             | Sets the parent page for the new modular subpage. This is the page your new modular page's content will appear on. |\n| Modular Template | Displays a list of templates provided by the theme for modular pages you can choose from for the new page.         |\n[\/div]\n\nOnce you have filled out this information, selecting **Continue** will take you to the new page's editor. We will cover the Page Editor in more detail in [a following guide](..\/page-editor).\n\n### Pages List\n\n![Admin Pages](pages2.png?width=1942&classes=shadow)\n\nThe pages list that appears in this area gives you quick access to all of your current pages, as well as an at-a-glance method for seeing whether or not the pages are visible.\n\nSelecting the title of any page will take you directly to that page's editor. The big **X** icon to the right of each page lets you delete the page.\n\nIf you hover over the icon directly to the left of a page, it will tell you its current status. For example, it may say **Page \u2022 Routable \u2022 Visible** if a page is routable (visible via the URL) and visible (appears in navigation menus).\n\nYou can **filter** and **search** your pages to make it easy to find the exact page you're looking for. For example, using the **Add Filters** option, you can filter pages by type so that only **Modular**, **Visible**, and\/or **Routable** pages appear in the list.\n\nIf you have a specific page title (or part of a title) in mind, you can use the search bar to quickly find the specific page you're looking for.\n"},{"title":"Profile","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/dashboard\/profile","taxonomy":{"categories":["docs"],"tags":[]},"media":["grav-profile.png","grav-profile2.png","grav-profile2b.png","grav-profile3.png","grav-profile4.png","grav-profile5.png"],"content":"![Admin Profile](grav-profile.png?width=2030&classes=shadow)\n\nThe profile page in the admin enables you to view and update your individual profile settings. This is where your avatar, email address, name, language, and more are set. For administrators, this is also where you can adjust the groups and permission levels for individual users.\n\nAccessing the profile page is simple. Once you are logged in to the admin, you can access your profile by selecting the area of the sidebar with your avatar image and name. This will take you directly to your own profile.\n\nAdditionally, administrators will enjoy the ease of jumping to another user's profile page by appending `admin\/user\/example` to their site's URL. Replacing `example` with the username of the user they wish to edit profile information and\/or permissions for.\n\n### Profile Photo\n\n![Admin Profile](grav-profile2.png?width=1678&classes=shadow)\n\nThe **Profile** area of the admin gives you a quick, styled look at your avatar, name, and title. Your avatar is automatically generated through [Gravatar](http:\/\/en.gravatar.com\/), a global avatar service that enables you to upload a single profile image and use it across multiple sites and services.\n\n![Admin Profile](grav-profile2b.png?width=1670&classes=shadow)\n\nIf you don't have an image uploaded to Gravatar, or if you'd prefer to use an image of your choosing, you can upload an image here by dragging and dropping the image file into the **Drop Your Files Here or Click This Area** section of the page. You can also click the area to bring up a file chooser that will enable you to find, select, and upload an image file from your system.\n\nOnce you have a new image uploaded, simply select the **Save** button in the upper-right corner of the page.\n\n### Account\n\n![Admin Profile](grav-profile3.png?width=1660&classes=shadow)\n\nThe **Account** section of the profile page is where you can update your contact information, name, language, and more. You are not able to edit your **Username** here, as this is tied directly to where your user information is stored, but you can edit anything else you need to.\n\n### 2-Factor Authentication\n\n![Admin Profile](grav-profile5.png?width=918&classes=shadow)\n\n**2-Factor Authentication** provides an extra layer of security for your website. Find out more about this feature in the [**Security**](..\/..\/security\/2fa) area of this guide.\n\n### Access Levels\n\n![Admin Profile](grav-profile4.png?width=1814&classes=shadow)\n\nAdministrators will find the permissions area especially useful. This is where you can configure exactly what a user will be able to access and do within the administrator.\n\nHere is a quick breakdown of the permissions options and what they enable someone to do.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                         | Description                                                                                                      |\n| :-----                         | :-----                                                                                                           |\n| **admin.super**                | Designates the user as a super admin, giving them the ability to see and configure all areas of the site.        |\n| **admin.login**                | Enables the user to log in to the admin. This must be set to **Yes** to enable the user to log in.               |\n| **admin.cache**                | Gives the user access to the cache reset buttons.                                                                |\n| **admin.configuration**        | Gives the user access to the **Configuration** area of the admin. This does not include any tabs or subsections. |\n| **admin.configuration_system** | Gives the user access to the **System** tab in the **Configuration** area of the admin.                          |\n| **admin.configuration_site**   | Gives the user access to the **Site** tab in the **Configuration** area of the admin.                            |\n| **admin.configuration_media**  | Gives the user access to the **Media** tab in the **Configuration** area of the admin.                           |\n| **admin.configuration_info**   | Gives the user access to the **Info** tab in the **Configuration** area of the admin.                            |\n| **admin.pages**                | Gives the user access to the **Pages** area of the admin.                                                        |\n| **admin.maintenance**          | Gives the user the ability to access the **Maintenance** area of the **Dashboard**.                              |\n| **admin.statistics**           | Gives the user the ability to access the **Statistics** area of the **Dashboard**.                               |\n| **admin.plugins**              | Gives the user access to the **Plugins** area of the admin.                                                      |\n| **admin.themes**               | Gives the user access to the **Themes** area of the admin.                                                       |\n| **admin.users**                | Enables the user to access and edit other users' profile information. This does not include permissions.         |\n| **site.login**                 | Enables the user to log in to the front end.                                                                     |\n[\/div]"},{"title":"Configuration (Site)","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/dashboard\/configuration-site","taxonomy":{"categories":["docs"],"tags":[]},"media":["configuration-site-defaults.png","configuration-site-metadata.png","configuration-site-page.png","configuration-site-redirects.png","configuration-site.png"],"content":"![Admin Configuration](configuration-site.png?width=2532&classes=shadow)\n\nThe **Configuration** page gives you access to your site's **System** and **Site** configuration settings. Additionally, you can view a breakdown of your server's properties in a number of areas including PHP, SQL, server environment, and other various components that determine how your site operates.\n\n!! The Configuration requires an `access.admin.super` or `access.admin.configuration` && `access.admin.configuration_site` access level.\n\nThe **Site** tab enables you to customize the settings found in the `\/user\/config\/site.yaml` file. This tab gives you access to options and fields that determine site-related variables, such as the name, default author, and metadata used in your site.\n\nBelow is a breakdown of the different configuration sections that appear in the **Site** tab.\n\n### Defaults\n\n![Admin Configuration](configuration-site-defaults.png?width=1664&classes=shadow)\n\nThis section is where you set the basic properties of content handling for your site. The home page, default theme, and various other content display options are set here.\n\n[div class=\"table table-striped table-keycol\"]\n| Option             | Description                                                           |\n| :-----             | :-----                                                                |\n| **Site Title**     | Default title for your site, often used by themes.                    |\n| **Default Author** | A default author name, often used in themes or page content.          |\n| **Default Email**  | A default email to reference in themes or pages.                      |\n| **Taxonomy Types** | Taxonomy types must be defined here if you wish to use them in pages. |\n[\/div]\n\n### Page Summary\n\n![Admin Configuration](configuration-site-page.png?width=1034&classes=shadow)\n\nPage summaries are a great way to give a small preview of a page's content. You can use a delimiter in the page to set a \"cut off\" point between the summary content, and the full body content of the page. These settings give you the ability to\n\n\n[div class=\"table table-striped table-keycol\"]\n| Option           | Description                                                                                                                                                  |\n| :-----           | :-----                                                                                                                                                       |\n| **Enabled**      | Enable page summary (the summary returns the same as the page content)                                                                                       |\n| **Summary Size** | The amount of characters of a page to use as a content summary                                                                                               |\n| **Format**       | **short** = use the first occurrence of delimiter or size; **long** = summary delimiter will be ignored                                                      |\n| **Delimiter**    | The summary delimiter (default '==='). You would typically place this after an opening paragraph, with everything prior to it appearing in the page summary. |\n[\/div]\n\n### Metadata\n\n![Admin Configuration](configuration-site-metadata.png?width=1896&classes=shadow)\n\nMetadata is an important part of a page's behind-the-scenes makeup. It can improve SEO, how your links appear in various search engines and social feeds, and more. You can set various metadata properties here.\n\n[div class=\"table table-striped table-keycol\"]\n| Option       | Description                                                                                 |\n| :-----       | :-----                                                                                      |\n| **Metadata** | Default metadata values that will be displayed on every page unless overridden by the page. |\n[\/div]\n\n### Redirects and Routes\n\n![Admin Configuration](configuration-site-redirects.png?width=1888&classes=shadow)\n\nRedirects and routing have never been easier. Just set it all up in this section, and you're good to go.\n\n[div class=\"table table-striped table-keycol\"]\n| Option               | Description                                                             |\n| :-----               | :-----                                                                  |\n| **Custom Redirects** | Routes to redirect to other pages. Standard Regex replacement is valid. |\n| **Custom Routes**    | Routes to alias to other pages. Standard Regex replacement is valid.    |\n[\/div]\n"},{"title":"Configuration (System)","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/dashboard\/configuration-system","taxonomy":{"categories":["docs"],"tags":[]},"media":["configuration-system-advanced.png","configuration-system-assets.png","configuration-system-caching.png","configuration-system-content.png","configuration-system-debugger.png","configuration-system-error.png","configuration-system-http.png","configuration-system-languages.png","configuration-system-markdown.png","configuration-system-media.png","configuration-system-session.png","configuration-system-twig.png","configuration.png"],"content":"![Admin Configuration](configuration.png?width=2530&classes=shadow)\n\nThe **Configuration** page gives you access to your site's **System** and **Site** configuration settings. Additionally, you can view a breakdown of your server's properties in a number of areas including PHP, server environment, and other various components that determine how your site operates.\n\n!! The Configuration requires an `access.admin.super` or `access.admin.configuration` access level.\n\nThe **System** tab enables you to customize the settings found in the `\/user\/config\/system.yaml` file. These settings affect how many of the primary system-related features of Grav operate. The site's home page, caching settings, and more can be configured here.\n\nThese settings are separated into several sections, each focusing on a specific aspect of Grav's operation.\n\nBelow is a breakdown of the different configuration sections that appear in the **System** tab.\n\n### Content\n\n![Admin Configuration](configuration-system-content.png?width=1594&classes=shadow)\n\nThis section is where you set the basic properties of content handling for your site. The home page, default theme, and various other content display options are set here.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                      | Description                                                                |\n| :-----                      | :-----                                                                     |\n| **Home Page**               | Select the page you wish to have appear as the home page for your site.    |\n| **Default Theme**           | Sets the primary default theme used in your site.                          |\n| **Process**                 | Control how pages are processed. Can be set per-page rather than globally. |\n| **Timezone**                | Override the server's default timezone.                                    |\n| **Short Date Format**       | Set the short date format that can be used by themes.                      |\n| **Long Date Format**        | Set the long date format that can be used by themes.                       |\n| **Default Ordering**        | Pages in a list will render using this order unless it is overridden.      |\n| **Default Order Direction** | The direction of pages in a list.                                          |\n| **Default Page Count**      | Default maximum pages count in a list.                                     |\n| **Date-based Publishing**   | Automatically (un)publish posts based on their date.                       |\n| **Events**                  | Enable or Disable specific events.  Disabling these can break plugins.     |\n| **Redirect Default Route**  | Automatically redirect to a page's default route.                          |\n[\/div]\n\n### Languages\n\n![Admin Configuration](configuration-system-languages.png?width=1662&classes=shadow)\n\nMultilanguage features are set in this section.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                             | Description                                                               |\n| :-----                             | :-----                                                                    |\n| **Supported**                      | Comma separated list of 2-letter language codes (for example 'en,fr,de'). |\n| **Translations Enabled**           | Support translations in Grav, plugins and extensions.                     |\n| **Translations Fallback**          | Fallback through supported translations if active language doesn't exist. |\n| **Active Language in Section**     | Store the active language in the session.                                 |\n| **Home Redirect Include Language** | Include language in home redirect (\/en).                                  |\n| **Home Redirect Include Route**    | Home redirect include route.                                              |\n[\/div]\n\n### HTTP Headers\n\n![Admin Configuration](configuration-system-http.png?width=1336&classes=shadow)\n\nHTTP header options can be set in this section. This is useful for browser-based caching and optimization.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                   | Description                                                                     |\n| :-----                   | :-----                                                                          |\n| **Expires**              | Sets the expires header. The value is in seconds.                               |\n| **Last Modified**        | Sets the last modified header that can help optimize proxy and browser caching. |\n| **ETag**                 | Sets the etag header to help identify when a page has been modified.            |\n| **Vary Accept Encoding** | Sets the *Vary: Accept Encoding* header to help with proxy and CDN caching.     |\n[\/div]\n\n### Markdown\n\n![Admin Configuration](configuration-system-markdown.png?width=932&classes=shadow)\n\nMarkdown makes up the bulk of Grav's page content. This section gives you options to enable Markdown Extra, as well as to set how Grav handles Markdown.\n\n[div class=\"table table-striped table-keycol\"]\n| Option               | Description                                                                                   |\n| :-----               | :-----                                                                                        |\n| **Markdown Extra**   | Enable default support for [Markdown Extra](https:\/\/michelf.ca\/projects\/php-markdown\/extra\/). |\n| **Auto Line Breaks** | Enable support for automatic line breaks in markdown.                                         |\n| **Auto URL Links**   | Enable automatic conversion of URLs into HTML hyperlinks.                                     |\n| **Escape Markup**    | Escape markup tags into HTML entities.                                                        |\n[\/div]\n\n### Caching\n\n![Admin Configuration](configuration-system-caching.png?width=1364&classes=shadow)\n\nGrav's integrated caching feature helps make it one of the fastest flat-file CMS options out there. You can configure your site's primary caching functions in this section.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                 | Description                                                                                 |\n| :-----                 | :-----                                                                                      |\n| **Caching**            | Global ON\/OFF switch to enable\/disable Grav caching.                                        |\n| **Cache Check Method** | Sets the cache check method. The options are **File**, **Folder**, and **None**.            |\n| **Cache Driver**       | Choose which cache driver Grav should use. 'Auto Detect' attempts to find the best for you. |\n| **Cache Prefix**       | An identifier for part of the Grav key.  Don't change unless you know what you're doing.    |\n| **Lifetime**           | Sets the cache lifetime in seconds. 0 = infinite.                                           |\n| **Gzip Compression**   | Enable GZip compression of the Grav page for increased performance.                         |\n[\/div]\n\n### Twig Templating\n\n![Admin Configuration](configuration-system-twig.png?width=906&classes=shadow)\n\nThis section focuses on Grav's Twig templating feature. You can set Twig caching, debug, and change detection settings here.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                   | Description                                                                                   |\n| :-----                   | :-----                                                                                        |\n| **Twig Caching**         | Control the Twig caching mechanism. Leave this enabled for best performance.                  |\n| **Twig Debug**           | Allows the option of not loading the Twig Debugger extension.                                 |\n| **Detect Changes**       | Twig will automatically recompile the Twig cache if it detects any changes in Twig templates. |\n| **Autoescape Variables** | Autoescapes all variables. This will break your site most likely.                             |\n[\/div]\n\n### Assets\n\n![Admin Configuration](configuration-system-assets.png?width=1502&classes=shadow)\n\nThis section deals with assets handling, including CSS and JavaScript assets.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                          | Description                                                                     |\n| :-----                          | :-----                                                                          |\n| **CSS Pipeline**                | The CSS pipeline is the unification of multiple CSS resources into one file.    |\n| **CSS Minify**                  | Minify the CSS during pipelining.                                               |\n| **CSS Minify Windows Override** | Minify Override for Windows platforms. False by default due to ThreadStackSize. |\n| **CSS Rewrite**                 | Rewrite any CSS relative URLs during pipelining.                                |\n| **JavaScript Pipeline**         | The JS pipeline is the unification of multiple JS resources into one file.      |\n| **JavaScript Minify**           | Minify the JS during pipelining.                                                |\n| **Enable Timestamps on Assets** | Enable asset timestamps.                                                        |\n| **Collections**                 | Add individual asset collections.                                               |\n[\/div]\n\n### Error Handler\n\n![Admin Configuration](configuration-system-error.png?width=1336&classes=shadow)\n\nYou can set how Grav handles error reporting and display here. This is a useful tool to have during site development.\n\n[div class=\"table table-striped table-keycol\"]\n| Option            | Description                              |\n| :-----            | :-----                                   |\n| **Display Error** | Display full backtrace-style error page. |\n| **Log Errors**    | Log errors to \/logs folder.              |\n[\/div]\n\n### Debugger\n\n![Admin Configuration](configuration-system-debugger.png?width=950&classes=shadow)\n\nLike error handling, Grav's integrated debugging tools give you the ability to locate and troubleshoot issues. This is especially useful during development.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                        | Description                                                            |\n| :-----                        | :-----                                                                 |\n| **Debugger**                  | Enable Grav debugger and following settings.                           |\n| **Debug Twig**                | Enable debugging of Twig templates.                                    |\n| **Shutdown Close Connection** | Close the connection before calling onShutdown(). false for debugging. |\n[\/div]\n\n### Media\n\n![Admin Configuration](configuration-system-media.png?width=1670&classes=shadow)\n\nThis section determines how Grav handles media content. Image quality and other media handling options are configured here.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                         | Description                                                                                               |\n| :-----                         | :-----                                                                                                    |\n| **Default Image Quality**      | Default image quality to use when resampling or caching images (85%).                                     |\n| **Cache All Images**           | Run all images through Grav's cache system even if they have no media manipulations.                      |\n| **Image Debug Watermark**      | Show an overlay over images indicating the pixel depth of the image when working with Retina for example. |\n| **Enable Timestamps on Media** | Appends a timestamp based on last modified date to each media item.                                       |\n[\/div]\n\n!! Caching images that have already been optimised (outside of Grav) could result in the output file being a much larger filesize than the original. This is due to a bug in the Gregwar image library and not directly related to Grav (see this [open issue](https:\/\/github.com\/Gregwar\/Image\/issues\/115) for more information). The alternative is to set \"Cache All Images\" to No\n\n### Session\n\n![Admin Configuration](configuration-system-session.png?width=1184&classes=shadow)\n\nThis section gives you the ability to enable session support, set timeout limits, and the name of the session cookie used to handle this information.\n\n[div class=\"table table-striped table-keycol\"]\n| Option      | Description                                                                                                                                  |\n| :-----      | :-----                                                                                                                                       |\n| **Enable**  | Enable session support within Grav.                                                                                                          |\n| **Timeout** | Sets the session timeout in seconds.                                                                                                         |\n| **Name**    | An identifier used to form the name of the session cookie. Use alphanumeric, dashes or underscores only. Do not use dots in the session name |\n[\/div]\n\n### Advanced\n\n![Admin Configuration](configuration-system-advanced.png?width=1360&classes=shadow)\n\nThis section contains advanced system options.\n\n[div class=\"table table-striped table-keycol\"]\n| Option                  | Description                                                                |\n| :-----                  | :-----                                                                     |\n| **Absolute URLs**       | Absolute or relative URLs for `base_url`.                                  |\n| **Parameter Separator** | Separater for passed parameters that can be changed for Apache on Windows. |\n[\/div]"},{"title":"Dashboard","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/dashboard","taxonomy":{"categories":["docs"],"tags":[]},"media":["grav-dashboard-cache.png","grav-dashboard-latest.png","grav-dashboard-maintenance-2.png","grav-dashboard-maintenance.png","grav-dashboard.png"],"content":"![Admin Dashboard](grav-dashboard.png?width=1264&classes=shadow)\n\nThe **Dashboard** serves as a hub of information for the **Administration Panel** plugin. From this one page, you can check traffic statistics, maintenance information, Grav updates, create new backups, see the latest page updates, as well as to quickly clear Grav's cache.\n\nIt's a starting point for your administrative experience.\n\n!! The Dashboard content will change depending on the user permissions. For example, giving `access.admin.super` unlocks everything. If that access level is not granted, `access.admin.maintenance` allows cache clearing and updates. `access.admin.pages` allows access to pages. `access.admin.statistics` allows display of the site visitors stats.\n\n\n### Cache and Updates Checking\n\n![Admin Dashboard](grav-dashboard-cache.png?width=323px&classes=shadow)\n\nAlong the top of the Dashboard, you will find two buttons. The first of which initiates a clearing of the Grav cache. Clicking the main **Clear Cache** button will wipe the entire cache, including any caching of assets and images. Using the **drop-down** feature to the right, you can choose from specific types of cache clearing processes.\n\nFor example, if you only want to clear the **image cache** without disrupting any other cached data, you can do so here.\n\nThe second button initiates an update check for your site. This includes any supported plugins, themes, and Grav itself. If new updates are discovered, you receive a notification on the Dashboard. This isn't the only method Grav has for checking for new updates.\n\n!! Update checks are also triggered whenever a new page in the admin is loaded, and cached for one day. If you clear all of Grav's cache and load a new page in the admin, an update check will automatically take place.\n\n### Maintenance and Statistics\n\n![Admin Dashboard](grav-dashboard-maintenance.png?width=1007&classes=shadow)\n\nThe **Maintenance** and **Statistics** sections give you quick access to important information about your site.\n\nOn the **Maintenance** side, you can see a percentage graph letting you know how many of Grav's bits and pieces are completely up-to-date.\n\n![Admin Dashboard](grav-dashboard-maintenance-2.png?width=1009&classes=shadow)\n\nIf new updates are available, an <i class=\"fa fa-cloud-download\"><\/i> **Update** button will appear that enables you to perform a one-click update for all plugins and themes. This button will not update Grav itself, which notifies you about a required update just above the Maintenance and Statistics sections.\n\nYou can update Grav's core by selecting the **Update Grav Now** button in its notification bar.\n\nThere is also a graph indicating how long the site has gone without being backed up. Selecting the <i class=\"fa fa-database\"><\/i> **Backup** button will generate a zip file you can download and store as a backup for your site's data.\n\n!! Backups are also stored in the `backup\/` folder of your Grav install.  You can grab them via FTP or web manager tools provided by your hosting company.\n\nThe **Statistics** section displays simple, at-a-glance traffic data breaking down the number of visitors the front end of the site has received in the past day, week, and month (30 days). Statistics for the past week are displayed in a bar graph separated by days of the week.\n\n### Latest Page Updates\n\n![Admin Dashboard](grav-dashboard-latest.png?width=1006&classes=shadow)\n\nThe **Latest Page Updates** area of the admin gives you an at-a-glance view of the latest content changes made to pages in your Grav site. This list is sorted by most recently updated, and is generated each time you refresh the page. Selecting the title of a page in this list will take you directly to the page's editor in the admin.\n\nThe **Manage Pages** button takes you to the **Pages** administrative panel.\n"},{"title":"Introduction","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/introduction","taxonomy":{"categories":["docs"],"tags":[]},"media":["admin-dashboard.png","new-user.png"],"content":"The **Administration Panel** plugin for [Grav](https:\/\/github.com\/getgrav\/grav) is a web GUI (graphical user interface) that provides a convenient way to configure Grav and easily create and modify pages.  This will remain a totally optional plugin, and is not in any way required or needed to use Grav effectively.  In fact, the admin interface provides an intentionally limited view to ensure it remains easy to use and not overwhelming.  Power users will still prefer to work with the configuration files directly.\n\n![](admin-dashboard.png?width=2528&classes=shadow)\n\n### Features\n\n* User login with automatic password hashing\n* Forgot password functionality\n* Logged-in-user management\n* One click Grav core updates\n* Dashboard with maintenance status, site activity and latest page updates\n* Ajax-powered backup capability\n* Ajax-powered clear-cache capability\n* System configuration management\n* Site configuration management\n* Normal and Expert modes which allow editing via forms or YAML\n* Page listing with filtering and search\n* Page creation, editing, moving, copying, and deleting\n* Powerful syntax highlighting code editor with instant Grav-powered preview\n* Editor features, hot keys, toolbar, and distraction-free fullscreen mode\n* Drag-n-drop upload of page media files including drag-n-drop placement in the editor\n* One click theme and plugin updates\n* Plugin manager that allows listing and configuration of installed plugins\n* Theme manager that allows listing and configuration of installed themes\n* GPM-powered installation of new plugins and themes\n* ACL for admin users access to features\n\n### Support\n\nThe Adminstration Panel is quite an ambitious plugin with lots of functionality that will give you a lot of power and flexibility when building out your Grav sites. So if you have any questions, problems, suggestions or find one of those rare bugs in it, please use one of the following ways to get support from us.\n\nFor **live chatting**, please use the [Discord Chat Server](https:\/\/chat.getgrav.org) for discussions  related to the admin plugin.\n\nFor **bugs, features, improvements**, please ensure you [create issues in the admin plugin GitHub repository](https:\/\/github.com\/getgrav\/grav-plugin-admin).\n\n### Installation\n\nFirst ensure you are running the latest Grav version, **{{ grav_version }} or later**.  This is required for the admin plugin to run properly.  Check for and upgrade to new Grav versions like this (`-f` forces a refresh of the GPM index):\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm version -f\nbin\/gpm selfupgrade\n[\/prism]\n\nThe admin plugin actually requires the help of 3 other plugins, so to get the **admin** plugin to work you first need to install the **login**, **forms**, and **email** plugins.  These are available via GPM, and because the plugin has dependencies you just need to proceed and install the admin plugin, and agree when prompted to install the others:\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm install admin\n[\/prism]\n\nYou can also [install the plugin manually](..\/faq#manual-installation-of-admin) if you are unable to use GPM on your system.\n\n### Creating a User\n\nWith the latest version of the Admin, you will be prompted to create an admin user account when you point your browser to your site.  You must complete this step to ensure straight away a valid admin user is under your control.\n\n![](new-user.png?width=1654&classes=shadow)\n\nSimply fill out the form and click the `Create User` button.\n\nThe user information is stored in the `user\/accounts\/` folder of your Grav installation.  You can edit the values manually or via the Admin plugin itself.  You can also create new users manually or via the `bin\/plugin login newuser` CLI command.  More information is contained in the [Admin FAQ](..\/faq#adding-and-managing-users).\n\n### Username and Password Complexity\n\nRegex patterns for usernames and passwords are defined in `system\/config\/system.yaml`.\n\nThe default pattern for users (`system.username_regex`) is only lowercase characters, digits, dashes, and underscores. Usernames must be between 3 - 16 characters in length.\n\nThe default pattern for passwords (`system.pwd_regex`) is a minimum of eight (8) characters, with at least one number, one uppercase, and one lowercase letter.\n\n### Usage\n\nBy default, you can access the admin by pointing your browser to `http:\/\/yoursite.com\/admin`. You can simply log in with the `username` and `password` set in the YAML file you configured earlier.\n\n> After logging in, your **plaintext password** will be removed and replaced by an **encrypted** one.\n"},{"title":"2-Factor Authentication","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/security\/2fa","taxonomy":{"categories":["docs"],"tags":[]},"media":["2fa_1.jpeg","2fa_2.jpeg","2fa_4.png","2fa_5.png","auth3.gif","page-header.jpg"],"content":"![Admin Profile](auth3.gif?classes=shadow)\n\nAvailable with Grav 1.3.3 and Admin Panel 1.6.0, you can now activate 2-factor authentication on your Grav site.\n\n2-factor authentication (2FA) is an excellent security measure that uses a rolling-clock style authentication method that generates six-digit codes you can use in addition to your username and password to access the Admin.\n\nTo take advantage of this feature, you'll want to download a 2FA-supporting app such as [Authy](https:\/\/authy.com\/) or [Google Authenticator](https:\/\/play.google.com\/store\/apps\/details?id=com.google.android.apps.authenticator2&hl=en). This app will act as a virtual key ring for authentication codes.\n\n## How to Set it Up\n\n![](2fa_1.jpeg?classes=shadow)\n\nSetting 2-factor authentication up in Grav is easy. All you need to do is navigate to **Plugins > Admin Panel > Basics** in the Admin.\n\nHere, you will find 2-Factor Authentication. You can choose to turn this feature on by selecting **Yes**. This will enable users to set up 2-factor authentication on their accounts.\n\n![](2fa_2.jpeg?classes=shadow)\n\nNow, you can select your avatar image to access your user profile settings. Next, you will want to set the **2FA Enabled** option to **Yes**.\n\nA QR code will appear along with a 2FA secret key. Write the key down and put it somewhere safe.\n\n![](2fa_4.png?width=1009&classes=shadow)\n\nUsing your authenticator app of choice, scan the QR code or enter the secret key to register your 2FA key. Save your profile page to lock in your 2FA settings.\n\n![](2fa_5.png?width=1009&classes=shadow)\n\nA purple 2FA badge will now appear next to your name in the sidebar. This badge lets you know that 2FA is active on the account.\n\nYou can now log out and log back in. You will be greeted with the same username and password fields, but once you enter this information, you will be asked to provide an additional six-digit code. This code is in your authenticator app. It resets every 30 seconds, so the code is only good during that short period. A new code will generate to replace it.\n\nThat's it! You now have a more secure Grav site!\n\nOh, and if you want to change your 2FA key, all you need to do is hit the big red **Regenerate** button.\n\n## Frequently Asked Questions\n\n#### What Happens if I lose access to my 2FA device?\n\nDon't worry! All is not lost.\n\nYour 2FA status and hashed key are stored in your site's file system on your user YAML file. For example, if your user account is `admin`, navigate to **ROOT\/user\/accounts\/admin.yaml** and look for these two lines:\n\n[prism classes=\"language-yaml line-numbers\"]\ntwofa_enabled: true\ntwofa_secret: RQX46XTTBK7QMMB6VR4RAUNWOYVXXTSR\n[\/prism]\n\nSimply set **twofa_enabled** to `false` and save. You should now be able to access your site using just your username and password. Alternatively, you can use the **twofa_secret** to register your account on your authenticator app of choice.\n\n#### What if my 2FA secret is compromised?\n\nIf you believe your 2FA secret may be compromised, you can generate a new key and invalidate the old one by selecting the big red **Regenerate** button in your user profile settings from the Admin.\n"},{"title":"Flood Protection","date":"2017-09-22T19:56:21+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/security\/rate-limiting","taxonomy":{"categories":["docs"],"tags":[]},"media":["2fa_3.jpeg","login.gif"],"content":"![](login.gif?classes=shadow)\n\nBrute force attacks are a popular choice for website intruders. It could come in the form of someone you know trying to guess your password over and over until they are finally successful or a bot flooding your site with login attempts until eventually the password has been discovered.\n\nGrav's flood protection (also known as rate limiting) feature makes these kinds of attacks exceptionally difficult. It allows you to set a number of failed login attempts within a specific amount of time before the account gets temporarily locked out. Additionally, you can restrict the amount of password reset requests applied to accounts before locking this feature out.\n\n## What You'll Need\n\nThis feature is managed through the [**Login** plugin](https:\/\/github.com\/getgrav\/grav-plugin-login). You'll want to have **Login version 2.4** or above, in addition to **Grav 1.3.3** or above and **Admin Panel 1.6.0** or above.\n\n## How to Set it Up\n\n![](2fa_3.jpeg?classes=shadow)\n\nThe settings for Grav's flood protection are found in the Login plugin. Simply navigate to **Admin > Plugins > Login** and select the **Security** tab.\n\nHere, you can set the following:\n\n* Maximum number of password resets before lockout\n* Password reset maximum interval\n* Maximum failed logins before lockout\n* Maximum failed logins interval\n\nThis will enable you to determine how many failed password resets or logins are allowed in a set amount of time before lockout occurs. This log out is temporary and lasts as long as your set interval.\n\n"},{"title":"Security","date":"2017-09-22T19:54:31+00:00","url":"http:\/\/localhost\/docs\/admin-panel\/security","taxonomy":{"categories":["docs"],"tags":[]},"content":"Grav offers some extra powerful protection for your Administration Area, such as 2-Factor Authentication and Flood Protection."},{"title":"Administration Panel","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/admin-panel","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 5\n\n# Administration Panel\n\nThe **Grav Administration Panel** is a dynamic administrative interface that makes managing your site, creating new content, and updating its components a breeze.\n"},{"title":"Grav Lifecycle","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/plugins\/grav-lifecycle","taxonomy":{"categories":["docs"],"tags":[]},"content":"It is often useful to know how Grav processes in order to fully understand how best to extend Grav via plugins. This is the Grav lifecycle:\n\n<div class=\"level level-1\" markdown=1>\n### index.php\n1. Check PHP version to ensure we're running at least version **5.5.9**\n1. Class loader initialization\n1. Obtain Grav instances\n    <div class=\"level level-2\" markdown=1>\n    ### Grav.php\n    1. No instance exists, so call `load()`\n    1. Add `grav`\n    1. Initialize the debugger and add it to `debugger`\n    1. Register the `log` handler\n    1. Register the `error` handler\n    1. Add `uri`\n    1. Add `task`\n    1. Add `events`\n    1. Add `cache`\n    1. Add `session`\n    1. Add `plugins`\n    1. Add `themes`\n    1. Add `twig`\n    1. Add `taxonomy`\n    1. Add `language`\n    1. Add `pages`\n    1. Add `assets`\n    1. Add `page`\n    1. Add `output`\n    1. Add `browser`\n    1. Add `base_url_absolute`\n    1. Add `base_url_relative`\n    1. Add `base_url`\n    1. Register the `stream` handler\n    1. Register the `config` handler\n    <\/div>\n1. call `Grav::process()`\n    <div class=\"level level-2\" markdown=1>\n    ### Grav.php\n    1. Initialize the configuration\n    1. Initialize the Session\n    1. Initialize the Uri object\n    1. Initialize the error handler\n    1. Initialize the debugger\n    1. Start output buffering\n    1. Initialize the timezone\n    1. Initialize the `plugins`\n    1. Fire **onPluginsInitialized** event\n    1. Initialize the theme\n    1. Fire **onThemeInitialized** event\n    1. Fire **onTask[TASK]** event\n    1. Initialize `assets`\n    1. Fire **onAssetsInitialized** event\n    1. Initialize `twig`\n        <div class=\"level level-3\" markdown=1>\n        ### Twig.php\n        1. Set Twig template paths based on configuration\n        1. Handle language templates if available\n        1. Fire **onTwigTemplatePaths** event\n        1. Load Twig configuration and loader chain\n        1. Fire **onTwigInitialized** event\n        1. Load Twig extensions\n        1. Fire **onTwigExtensions** event\n        1. Set standard Twig variables (config, uri, taxonomy, assets, browser, etc)\n        <\/div>\n    1. Initialize `pages`\n        <div class=\"level level-3\" markdown=1>\n        ### Pages.php\n        1. Call `buildPages()`\n        1. Check if cache is good\n        1. If **cache is good** load pages date from cache\n        1. If **cache is not good** call `recurse()`\n        1. Fire **onBuildPagesInitialized** event in `recurse()`\n        1. If a `.md` file is found:\n            <div class=\"level level-4\" markdown=1>\n            ### Page.php\n            1. Call `init()` to load the file details\n            1. Set the `filePath`, `modified`, `id`\n            1. Call `header()` to initialize the header variables\n            1. Call `slug()` to set the URL slug\n            1. Call `visible()` to set visible state\n            1. Set `modularTwig()` status based on if folder starts with `_`\n            <\/div>\n        1. Fire **onPageProcessed** event\n        1. If a `folder` found `recurse()` the children\n        1. Fire **onFolderProcessed** event\n        1. Call `buildRoutes()`\n        1. Initialize `taxonomy` for all pages\n        1. Build `route` table for fast lookup\n        <\/div>\n    1. Fire **onPagesInitialized** event\n    1. Fire **onPageInitialized** event\n    1. Add the debugger CSS\/JS to the assets\n    1. Get Output with Twig's `processSite()` method\n        <div class=\"level level-3\" markdown=1>\n        ### Twig.php\n        1. Fire **onTwigSiteVariables** event\n        1. Get the page output\n        1. Fire **onTwigPageVariables**, also called for each modular subpage\n        1. If a page is not found or not routable, first fire the **onPageFallBackUrl** event to see if we have a fallback for a media asset and then fire **onPageNotFound** if not\n        1. Set all Twig variables on the Twig object\n        1. Set the template name based on file\/header\/extension information\n        1. Call `render()` method\n        1. Return resulting HTML\n        <\/div>\n    1. Fire **onOutputGenerated** event\n    1. Set the HTTP headers\n    1. Echo the output\n    1. Flush the output buffers to the page\n    1. Fire **onOutputRendered** event\n    1. Connection to client is closed\n    1. Fire **onShutdown** event\n    <\/div>\n<\/div>\n\nWhenever a page has its `content()` method called, the following lifecycle occurs:\n\n<div class=\"level level-1\" markdown=\"1\">\n### Page.php\n1. If content is **NOT** cached:\n    1. Fire **onPageContentRaw** event\n    1. Process the page according to Markdown and Twig settings. Fire **onMarkdownInitialized** event\n    1. Fire **onPageContentProcessed** event\n1. Fire **onPageContent** event\n<\/div>\n"},{"title":"Event Hooks","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/plugins\/event-hooks","taxonomy":{"categories":["docs"],"tags":[]},"media":["ongetpagetemplates.png"],"content":"In the previous [Plugin Tutorial](..\/plugin-tutorial) chapter, you might have noticed that our plugin logic was encompassed in two methods.  Each of these methods `onPluginsInitialized` and `onPageInitialized` correspond to **event hooks** that are available throughout the Grav life cycle.\n\nTo fully harness the power of Grav plugins you need to know which event hooks are available, in what order are these hooks called, and what is available during these calls.  The **event hooks** have a direct relationship to the overall [Grav Lifecycle](..\/..\/advanced\/grav-lifecycle) that we cover in the [Advanced](..\/..\/advanced) section later on.\n\n## Event Order\n\nMost events within Grav fire in a specific order and it is important to understand this order if you are creating plugins:\n\n1. [onFatalException](..\/event-hooks#onFatalException) _(no order, can occur anytime)_\n1. [onPluginsInitialized](..\/event-hooks#onPluginsInitialized)\n1. onThemeInitialized\n1. onRequestHandlerInit (1.6)\n1. onTask (1.6)\n  1. onTask.{task}\n1. onAction (1.6)\n  1. onAction.{action} (1.6)\n1. onBackupsInitialized\n1. onSchedulerInitialized (1.6)\n1. [onAssetsInitialized](..\/event-hooks#onAssetsInitialized)\n1. [onTwigTemplatePaths](..\/event-hooks#onTwigTemplatePaths)\n1. [onTwigLoader](..\/event-hooks#onTwigLoader)\n1. [onTwigInitialized](..\/event-hooks#onTwigInitialized)\n1. [onTwigExtensions](..\/event-hooks#onTwigExtensions)\n1. [onBuildPagesInitialized](..\/event-hooks#onBuildPagesInitialized) _(once when pages are reprocessed)_\n  1. [onPageProcessed](..\/event-hooks#onPageProcessed) _(each page not cached yet)_\n  1. onFormPageHeaderProcessed (1.6) _(each page not cached yet)_\n  1. [onFolderProcessed](..\/event-hooks#onFolderProcessed) _(for each folder found)_\n1. [onPagesInitialized](..\/event-hooks#onPagesInitialized)\n1. [onPageInitialized](..\/event-hooks#onPageInitialized)\n  1. [onPageContentRaw](..\/event-hooks#onPageContentRaw) _(each page not cached yet)_\n  1. [onMarkdownInitialized](..\/event-hooks#onMarkdownInitialized)\n  1. [onPageContentProcessed](..\/event-hooks#onPageContentProcessed) _(each page not cached yet)_\n  1. onPageContent _(called first time Page::content() is called even when cached)_\n1. [onPageNotFound](..\/event-hooks#onPageNotFound)\n1. onPageAction (1.6)\n  1. onPageAction.{action} (1.6)\n1. onPageTask (1.6)\n  1. onPageTask.{task} (1.6)\n1. [onTwigPageVariables](..\/event-hooks#onTwigPageVariables) _(each page not cached yet)_\n1. onHttpPostFilter (1.5.2)\n1. [onTwigSiteVariables](..\/event-hooks#onTwigSiteVariables)\n1. [onCollectionProcessed](..\/event-hooks#onCollectionProcessed) _(when collection is requested)_\n1. [onOutputGenerated](..\/event-hooks#onOutputGenerated)\n1. [onOutputRendered](..\/event-hooks#onOutputRendered)\n1. [onShutdown](..\/event-hooks#onShutdown)\n\nMisc events:\n\n1. [onBlueprintCreated](..\/event-hooks#onBlueprintCreated)\n1. onTwigTemplateVariables\n1. onTwigStringVariables\n1. [onBeforeDownload](..\/event-hooks#onBeforeDownload)\n1. [onPageFallBackUrl](..\/event-hooks#onPageFallBackUrl)\n1. [onMediaLocate](..\/event-hooks#onMediaLocate)\n1. [onGetPageBlueprints](..\/event-hooks#onGetPageBlueprints)\n1. [onGetPageTemplates](..\/event-hooks#onGetPageTemplates)\n1. onFlexObjectRender (1.6)\n1. onFlexCollectionRender (1.6)\n1. onBeforeCacheClear\n1. onImageMediumSaved (ImageFile)\n\n## Core Grav Event Hooks\n\nThere are several core Grav event hooks that are triggered during the processing of a page:\n\n<a name=\"onFatalException\"><\/a>\n\n#### onFatalException\n\nThis is an event that can be fired at any time if PHP throws a fatal exception. This is currently used by the `problems` plugin to handle displaying a list of potential reasons why Grav throws the fatal exception.\n\n<a name=\"onPluginsInitialized\"><\/a>\n\n#### onPluginsInitialized\n\nThis is the first plugin event available. At this point the following objects have been initiated:\n\n* Uri\n* Config\n* Debugger\n* Cache\n* Plugins\n\n!!!! A plugin will not be loaded at all if the `enabled: false` configuration option has been set for that particular plugin.\n\n<a name=\"onAssetsInitialized\"><\/a>\n#### onAssetsInitialized\n\nThe event indicates the assets manager has been initialized and is ready for assets to be added and managed.\n\n<a name=\"onPagesInitialized\"><\/a>\n#### onPagesInitialized\n\nThis event signifies that all the pages in Grav's `user\/pages` folder have been loaded as objects and are available in the **Pages object**.\n\n<a name=\"onPageNotFound\"><\/a>\n#### onPageNotFound\n\nThis is an event that can be fired if an expected page is not found. This is currently used by the `error` plugin to display a pretty 404 error page.\n\n<a name=\"onPageInitialized\"><\/a>\n#### onPageInitialized\n\nThe current page as requested by a URL has been loaded into the **Page object**.\n\n<a name=\"onOutputGenerated\"><\/a>\n#### onOutputGenerated\n\nThe output has been processed by the **Twig templating engine** and is now just a string of HTML.\n\n<a name=\"onOutputRendered\"><\/a>\n#### onOutputRendered\n\nThe output has been fully processed and sent to the display.\n\n<a name=\"onShutdown\"><\/a>\n#### onShutdown\n\nA new and very powerful event that lets you perform actions after Grav has finished processing and the connection to the client has been closed.  This is particularly useful for performing actions that don't need user interaction and potentially could impact performance.  Possible uses include user tracking and jobs processing.\n\n<a name=\"onBeforeDownload\"><\/a>\n#### onBeforeDownload\n\nThis new event passes in an event object that contains a `file`.  This event can be used to perform logging, or grant\/deny access to download said file.\n\n#### onGetPageTemplates\n\nThis event enables plugins to provide their own templates in addition to the ones gathered from the theme's directory structure and core. This is especially useful if you wish the plugin to provide its own template.\n\n**Example**\n\n[prism classes=\"language-twig line-numbers\"]\n\/**\n * Add page template types.\n *\/\npublic function onGetPageTemplates(Event $event)\n{\n    \/** @var Types $types *\/\n    $types = $event->types;\n    $types->register('downloads');\n}\n[\/prism]\n\nThis allows a plugin to register a template (that it might provide) so that it shows up in the dropdown list of page template types (like when editing a page). In the example above, a template type of `downloads` is added as there is a `downloads.html.twig` file in the `downloads` directory.\n\n![](ongetpagetemplates.png)\n\n#### onGetPageBlueprints\n\nThis event, like `onGetPageTemplates` enables the plugin to provide its own resources in addition to core and theme-specific ones. In this case, it's blueprints.\n\n**Example**\n\n[prism classes=\"language-twig line-numbers\"]\n$scanBlueprintsAndTemplates = function () use ($grav) {\n    \/\/ Scan blueprints\n    $event = new Event();\n    $event->types = self::$types;\n    $grav->fireEvent('onGetPageBlueprints', $event);\n\n    self::$types->scanBlueprints('theme:\/\/blueprints\/');\n\n    \/\/ Scan templates\n    $event = new Event();\n    $event->types = self::$types;\n    $grav->fireEvent('onGetPageTemplates', $event);\n\n    self::$types->scanTemplates('theme:\/\/templates\/');\n};\n[\/prism]\n\nIn this example, we are using both the `onGetPageTemplates` and `onGetPageBlueprints` hooks to make these plugin-provided resources (templates and blueprints) available to Grav for inheritance and other uses.\n\n## Twig Event Hooks\n\nTwig has its own set of event hooks.\n\n<a name=\"onTwigTemplatePaths\"><\/a>\n#### onTwigTemplatePaths\n\nThe base locations for template paths have been set on the **Twig object**.  If you need to add other locations where Twig will search for template paths, this is the event to use.\n\n<a name=\"onTwigInitialized\"><\/a>\n#### onTwigInitialized\n\nThe Twig templating engine is now initialized at this point.\n\n<a name=\"onTwigExtensions\"><\/a>\n#### onTwigExtensions\n\nThe core Twig extensions have been loaded, but if you need to add your own Twig extension, you can do so with this event hook.\n\n<a name=\"onTwigPageVariables\"><\/a>\n#### onTwigPageVariables\n\nWhere Twig processes a page directly, i.e. when you set `process: twig: true` in a page's YAML headers. This is where you should add any variables to Twig that need to be available to Twig during this process.\n\n<a name=\"onTwigSiteVariables\"><\/a>\n#### onTwigSiteVariables\n\nWhere Twig processes the full site template hierarchy.  This is where you should add any variables to Twig that need to be available to Twig during this process.\n\n## Collection Event Hooks\n\n<a name=\"onCollectionProcessed\"><\/a>\n#### onCollectionProcessed\n\nIf you need to manipulate a collection after it has been processed this is the time to do it.\n\n## Page Event Hooks\n\n<a name=\"onBuildPagesInitialized\"><\/a>\n#### onBuildPagesInitialized\n\nThis event is triggered once when pages are going to be reprocessed.  This typically happens if the cache has expired or needs refreshing.  This is a useful event to use for plugins that need to manipulate content and cache the results.\n\n<a name=\"onBlueprintCreated\"><\/a>\n#### onBlueprintCreated\n\nThis is used for processing and handling forms.\n\n<a name=\"onPageContentRaw\"><\/a>\n#### onPageContentRaw\n\nAfter a page has been found, header processed, but content **not** processed.  This is fired for **every page** in the Grav system.  Performance is not a problem because this event will not run on a cached page, only when the cache is cleared or a cache-clearing event occurs.\n\n<a name=\"onPageProcessed\"><\/a>\n#### onPageProcessed\n\nAfter a page is parsed and processed.  This is fired for **every page** in the Grav system.  Performance is not a problem because this event will not run on a cached page, only when the cache is cleared or a cache-clearing event occurs.\n\n<a name=\"onMarkdownInitialized\"><\/a>\n#### onMarkdownInitialized\n\nCalled when Markdown has been initialized. Allows to override the default Parsedown processing implementation. See [an usage example on the PR that introduced it](https:\/\/github.com\/getgrav\/grav\/pull\/747#issuecomment-206821370).\n\n<a name=\"onPageContentProcessed\"><\/a>\n#### onPageContentProcessed\n\nThis event is fired after the page's `content()` method has processed the page content.  This is particularly useful if you want to perform actions on the post-processed content but ensure the results are cached.  Performance is not a problem because this event will not run on a cached page, only when the cache is cleared or a cache-clearing event occurs.\n\n<a name=\"onFolderProcessed\"><\/a>\n#### onFolderProcessed\n\nAfter a folder is parsed and processed.  This is fired for **every folder** in the Grav system.  Performance is not a problem because this event will not run on a cached page, only when the cache is cleared or a cache-clearing event occurs.\n\n<a name=\"onPageFallBackUrl\"><\/a>\n#### onPageFallBackUrl\n\nIf a route is not recognized as a page, Grav tries to access a page media asset. The event is fired as soon as the procedure begins, so plugins can hook and provide additional functionality.\n\n#### onMediaLocate\n\nAdds support for custom media locations for excerpts.\n\n#### onTwigLoader\n\nAdds support for use of namespaces in conjunction with two new methods in Twig class: `Twig::addPath($path, $namespace)` and `Twig::prependPath($path, $namespace)`.\n"},{"title":"Plugin Tutorial","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/plugins\/plugin-tutorial","taxonomy":{"categories":["docs"],"tags":[]},"content":"Plugins are usually developed because there is a task that can not be completed with Grav's core functionality.\n\nIn this tutorial, we will create a plugin that helps Grav to deliver a random page to the user.  You have probably seen similar functionality on blog sites as a way to provide a random blog-post when you click a button.\n\n! Because there is already a plugin that performs this job named `Random`, we'll call this test plugin `Randomizer`.\n\nThis feature is not possible **out-of-the-box**, but is **easily** provided via a plugin.  As is the case with a great many aspects of Grav, there is no _one-way_ to do this. Instead, you have many options.  We will cover just one approach...\n\n## Randomizer Plugin Overview\n\nFor our plugin we will take the following approach:\n\n1. Activate the plugin if a URI matches our configured 'trigger route'. (e.g. `\/random`)\n\n2. Create a filter so that only configured taxonomies are in the pool of random pages.  (e.g. `category: blog`)\n\n3. Find a random page from our filtered pool, and tell Grav to use it for the page content.\n\nOK! This sounds simple enough, right? So, let us get cracking!\n\n\n## Step 1 - Install DevTools plugin\n\n!! Previous versions of this tutorial required creating a plugin manually.  This whole process can be skipped thanks to our new **DevTools Plugin**\n\nThe first step in creating a new plugin is to **install the DevTools Plugin**.  This can be done in two ways.\n\n#### Install via CLI GPM\n\n* Navigate in the command line to the root of your Grav installation\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm install devtools\n[\/prism]\n\n#### Install via Admin plugin\n\n* After logging in, simply navigate to the **Plugins** section from the sidebar.\n* Click the <i class=\"fa fa-plus\"><\/i> **Add** button in the top right.\n* Find **DevTools** in the list and click the <i class=\"fa fa-plus\"><\/i> **Install** button.\n\n## Step 2 - Create Randomizer plugin\n\nFor this next step you really do need to be in the [command line](\/cli-console\/command-line-intro) as the DevTools provide a couple of CLI commands to make the process of creating a new plugin much easier!\n\nFrom the root of your Grav installation enter the following command:\n\n[prism classes=\"language-bash command-line\"]\nbin\/plugin devtools new-plugin\n[\/prism]\n\nThis process will ask you a few questions that are required to create the new plugin:\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-9\"]\nbin\/plugin devtools new-plugin\nEnter Plugin Name: Randomizer\nEnter Plugin Description: Sends the user to a random page\nEnter Developer Name: Acme Corp\nEnter Developer Email: contact@acme.co\n\nSUCCESS plugin Randomizer -> Created Successfully\n\nPath: \/www\/user\/plugins\/randomizer\n[\/prism]\n\nThe DevTools command tells you where this new plugin was created. This created plugin is fully functional but will not automatically have the logic to perform the function we wish.  We will have to modify it to suite our needs.\n\n## Step 3 - Plugin basics\n\nNow we've created a new plugin that can be modified and developed. Let's break it down and have a look at what makes up a plugin.  If you look in the `user\/plugins\/randomizer` folder you will see:\n\n[prism classes=\"language-text\"]\n.\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 blueprints.yaml\n\u251c\u2500\u2500 randomizer.php\n\u2514\u2500\u2500 randomizer.yaml\n[\/prism]\n\nThis is a sample structure but some things are required:\n\n### Required items to function\n\nThese items are critical and your plugin will not function reliably unless you include these in your plugin.\n\n* **`blueprints.yaml`** - The configuration file used by Grav to get information on your plugin. It can also define a form that the admin can display when viewing the plugin details.  This form will let you save settings for the plugin. [This file is documented in the Forms section](\/forms\/blueprints).\n* **`randomizer.php`** - This file will be named according to your plugin, but can be used to house any logic your plugin needs.  You can use any [plugin event hook](\/plugins\/event-hooks) to perform logic at pretty much any point in [Grav's lifecycle](\/plugins\/grav-lifecycle).\n* **`randomizer.yaml`** - This is the configuration used by the plugin to set options the plugin might use. This should be named in the same way as the `.php` file.\n\n### Required items for release\n\nThis items are required if you wish to release your plugin via GPM.\n\n* **`CHANGELOG.md`** - A file that follows the [Grav Changelog Format](\/advanced\/grav-development#changelog-format) to show changes in releases.\n* **`LICENSE`** - a license file, should probably be MIT unless you have a specific need for something else.\n* **`README.md`** - A 'Readme' that should contain any documentation for the plugin.  How to install it, configure it, and use it.\n\n## Step 4 - Plugin configuration\n\nAs we described in the **Plugin Overview**, we need to have a few configuration options for our plugin, so the `randomizer.yaml` file should look something like this:\n\n[prism classes=\"language-yaml line-numbers\"]\nenabled: true\nactive: true\nroute: \/random\nfilters:\n    category: blog\n[\/prism]\n\nThis allows us to have multiple filters if we wish, but for now, we just want all content with the taxonomy `category: blog` to be eligible for the random selection.\n\nAll plugins must have the `enabled` option. If this is `false` in the site-wide configuration, your plugin \nwill never be initialized by Grav. All plugins also have the `active` option. If this is `false` in the site-wide \nconfiguration, each page will need to activate your plugin. Note that multiple plugins also support `enabled`\/`active` in\npage frontmatter by using `mergeConfig`, detailed below. \n\n!!!! The Grav default install has taxonomy defined for `category` and `tag` by default.  This configuration can be modified in your `user\/config\/site.yaml` file.\n\nOf course, as with all other configurations in Grav, it is advised not to touch this default configuration for day-to-day control. Rather, you should create an override in a file called `\/user\/config\/plugins\/randomizer.yaml` to house any custom settings.  This plugin-provided `randomizer.yaml` is really intended to set some sensible defaults for your plugin.\n\n## Step 5 - Base plugin structure\n\nThe base plugin class structure will already look something like this:\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Grav\\Plugin;\n\nuse Grav\\Common\\Plugin;\nuse RocketTheme\\Toolbox\\Event\\Event;\n\n\/**\n * Class RandomizerPlugin\n * @package Grav\\Plugin\n *\/\nclass RandomizerPlugin extends Plugin\n{\n ...\n}\n[\/prism]\n\nWe need to add a few `use` statements because we are going to use these classes in our plugin, and it saves space and makes the code more readable if we don't have to put the full namespace for each class inline.\n\nModify the `use` statements to look like this:\n\n[prism classes=\"language-php line-numbers\"]\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Page\\Collection;\nuse Grav\\Common\\Uri;\nuse Grav\\Common\\Taxonomy;\n[\/prism]\n\nThe two key parts of this class structure are:\n\n1. Plugins need to have `namespace Grav\\Plugin` at the top of the PHP file.\n2. Plugins should be named in **titlecase** based on the name of the plugin with the string `Plugin` appended to the end, and should extend `Plugin`, hence the class name `RandomizerPlugin`.\n\n## Step 6 - Subscribed events\n\nGrav uses a sophisticated event system, and to ensure optimal performance, all plugins are inspected by Grav to determine which events the plugin is subscribed to.\n\n[prism classes=\"language-php line-numbers\"]\npublic static function getSubscribedEvents()\n{\n    return [\n        'onPluginsInitialized' => ['onPluginsInitialized', 0]\n    ];\n}\n[\/prism]\n\nIn this plugin we are going to tell Grav we're subscribing to the `onPluginsInitialized` event.  This way we can use that event (which is the first event available to plugins) to determine if we should subscribe to other events.\n\n## Step 7 - Determine if the plugin should run\n\nThe next step is to add a method to our `RandomizerPlugin` class to handle the `onPluginsInitialized` event so it only activates when a user tries to go to the route we have configured in our `randomizer.yaml` file.  Replace the current 'sample' plugin logic with the following:\n\n\n[prism classes=\"language-twig line-numbers\"]\npublic function onPluginsInitialized()\n{\n    \/\/ Don't proceed if we are in the admin plugin\n    if ($this->isAdmin()) {\n        return;\n    }\n\n    $uri = $this->grav['uri'];\n    $route = $this->config->get('plugins.randomizer.route');\n\n    if ($route && $route == $uri->path()) {\n        $this->enable([\n            'onPageInitialized' => ['onPageInitialized', 0]\n        ]);\n    }\n}\n[\/prism]\n\nFirst, we get the **Uri object** from the **Dependency Injection Container**.  This contains all the information about the current URI, including the route information.\n\nThe **config object** is already part of the base **Plugin**, so we can simply use it to get the configuration value for our configured `route`.\n\nNext, we compare the configured route to the current URI path. If they are equal, we instruct the dispatcher that our plugin will also listen to a new event: `onPageInitialized`.\n\nBy using this approach, we ensure we do not run through any extra code if we do not need to.  Practices like these will ensure your site runs as fast as possible.\n\n## Step 8 - Display the random page\n\nThe last step of our plugin is to display the random page, and we can do that by adding the following method:\n\n[prism classes=\"language-php line-numbers\"]\n\/**\n * Send user to a random page\n *\/\npublic function onPageInitialized()\n{\n    $taxonomy_map = $this->grav['taxonomy'];\n\n    $filters = (array) $this->config->get('plugins.randomizer.filters');\n    $operator = $this->config->get('plugins.randomizer.filter_combinator', 'and');\n\n    if (count($filters)) {\n        $collection = new Collection();\n        $collection->append($taxonomy_map->findTaxonomy($filters, $operator)->toArray());\n        if (count($collection)) {\n            unset($this->grav['page']);\n            $this->grav['page'] = $collection->random()->current();\n        }\n    }\n}\n[\/prism]\n\nThis method is a bit more complicated, so we'll go over what's going on:\n\n1. First, we get the **Taxonomy object** from the **Grav DI Container** and assign it to a variable `$taxonomy_map`.\n\n2. Then we retrieve the array of filters from our plugin configuration.  In our configuration this is an array with 1 item: ['category' => 'blog'].\n\n3. Check to ensure we have filters, then create a new `Collection` in the `$collection` variable to store our pages.\n\n4. Append all pages that match the filter to our `$collection` variable.\n\n5. Unset the current `page` object that Grav knows about.\n\n6. Set the current `page` to a random item in the collection.\n\n\n## Step 9 - Cleanup\n\nThe example plugin that was created with the **DevTools** plugin, used an event called `onPageContentRaw()`. This event is not used in our new plugin, so we can safely remove the entire function.\n\n## Step 10 - Final plugin class\n\nAnd that is all there is to it! The plugin is now complete.  Your complete plugin class should look something like this:\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Grav\\Plugin;\n\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Page\\Collection;\nuse Grav\\Common\\Uri;\nuse Grav\\Common\\Taxonomy;\n\n\/**\n * Class RandomizerPlugin\n * @package Grav\\Plugin\n *\/\nclass RandomizerPlugin extends Plugin\n{\n    \/**\n     * @return array\n     *\n     * The getSubscribedEvents() gives the core a list of events\n     *     that the plugin wants to listen to. The key of each\n     *     array section is the event that the plugin listens to\n     *     and the value (in the form of an array) contains the\n     *     callable (or function) as well as the priority. The\n     *     higher the number the higher the priority.\n     *\/\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onPluginsInitialized' => ['onPluginsInitialized', 0]\n        ];\n    }\n\n    \/**\n     * Initialize the plugin\n     *\/\n    public function onPluginsInitialized()\n    {\n        \/\/ Don't proceed if we are in the admin plugin\n        if ($this->isAdmin()) {\n            return;\n        }\n\n        $uri = $this->grav['uri'];\n        $route = $this->config->get('plugins.randomizer.route');\n\n        if ($route && $route == $uri->path()) {\n            $this->enable([\n                'onPageInitialized' => ['onPageInitialized', 0]\n            ]);\n        }\n    }\n\n    \/**\n     * Send user to a random page\n     *\/\n    public function onPageInitialized()\n    {\n        $taxonomy_map = $this->grav['taxonomy'];\n\n        $filters = (array) $this->config->get('plugins.randomizer.filters');\n        $operator = $this->config->get('plugins.randomizer.filter_combinator', 'and');\n\n        if (count($filters)) {\n            $collection = new Collection();\n            $collection->append($taxonomy_map->findTaxonomy($filters, $operator)->toArray());\n            if (count($collection)) {\n                unset($this->grav['page']);\n                $this->grav['page'] = $collection->random()->current();\n            }\n        }\n    }\n}\n[\/prism]\n\nIf you followed along, you should have a fully functional **Randomizer** plugin enabled for your site.  Just point your browser to the `http:\/\/yoursite.com\/random`, and you should see a random page.  You can also download the original **Random**  plugin directly from the [Plugins Download](https:\/\/getgrav.org\/downloads\/plugins) section of the [getgrav.org](https:\/\/getgrav.org\/downloads\/plugins) site.\n\n## Merging Plugin and Page Configuration\n\nOne popular technique that is used in a variety of plugins is the concept of merging the plugin configuration (either default or overridden user config) with page-level configuration.  This means you can set **site-wide** configuration, and then have a specific configuration for a given page as needed.  This provides a lot of power and flexibility for your plugin.\n\nIn recent versions of Grav, a helper method was added to perform this functionality automatically rather than you having to code that logic yourself.  The **SmartyPants** plugin provides a good example of this functionality in action:\n\n[prism classes=\"language-php line-numbers\"]\npublic function onPageContentProcessed(Event $event)\n{\n    $page = $event['page'];\n    $config = $this->mergeConfig($page);\n\n    if ($config->get('process_content')) {\n        $page->setRawContent(\\Michelf\\SmartyPants::defaultTransform(\n            $page->getRawContent(),\n            $config->get('options')\n        ));\n    }\n}\n[\/prism]\n\n## Implementing CLI in your Plugin\n\nPlugins have also the capability of integrating with the `bin\/plugin` command line to execute tasks. You can follow the [advanced tutorial](\/advanced\/grav-cli-plugin) if you desire to implement such functionality.\n"},{"title":"Plugin Basics","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/plugins\/plugin-basics","taxonomy":{"categories":["docs"],"tags":[]},"content":"Grav was designed to be **simple** and **focused**, dealing with pages only.  The idea is that Grav itself is **super-lean**, providing just enough functionality to do the basics: routing, Markdown to HTML compiling, Twig templating, and caching.\n\nHowever, we knew that we wanted to ensure Grav could grow and provide powerful functionality when required, so we built **event hooks** throughout the system so that everything could be extended with **plugins**.\n\n## Powerful!\n\nAll the key objects in Grav are accessible through a powerful [Dependency Injection Container](http:\/\/en.wikipedia.org\/wiki\/Dependency_injection).  With Grav's event hooks throughout the entire life cycle, you can access anything that Grav knows about, and manipulate it as you need.  With this system you have complete control to add as much functionality as you need.\n\nThe plugins have proved so easy to write, and so flexible and powerful, that we can not stop creating them! We already have [over 200 freely downloadable plugins](https:\/\/getgrav.org\/downloads\/plugins#extras) that do everything from displaying a **sitemap**, providing **breadcrumbs**, displaying blog **archives**, a simple **search engine**, to providing a fully-functional JavaScript-powered **shopping cart**!\n\nThe best way to learn what can be done with plugins is to download some of these and look at what they are doing, and how they are doing it. In the next chapter we will [create a simple plugin from scratch](..\/plugin-tutorial)!\n\n## Essentials\n\nAll plugins are located in your `user\/plugins` folder.  With the base Grav install, there are only two plugins provided: `error` and `problems`.\n\nThe `error` plugin is used to handle HTTP errors, like **404 Page Not Found**.\n\nThe `problems` plugin is useful for new Grav installations because it detects any issues with your **hosting setup**, **missing folders**, or **permissions** that could cause problems with Grav.  Only the `error` plugin is really essential for proper operation.\n\nEvery plugin in the `user\/plugins` folder should have a unique name, and that name should closely define the function of the plugin.  Please do not use spaces, underscores, or capital letters in the plugin name.\n\n## Accessing Plugin Configuration Values via Twig\n\nTo access plugin configuration settings via Twig (i.e. within a Theme), the general format is:\n\n[prism classes=\"language-twig\"]\nconfig.plugins.pluginname.pluginproperty\n[\/prism]\n\nIf plugin name contains dashes you should refer to its properties using :\n\n[prism classes=\"language-twig\"]\nconfig.plugins['plugin-name'].pluginproperty\n[\/prism]\n"},{"title":"Plugins","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/plugins","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 4\n\n# Plugins\n\n**Grav** is fully extensible with a powerful **Plugin** architecture to allow you to extend the core functionality and add as much functionality as you like.\n"},{"title":"Customization","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/customization","taxonomy":{"categories":["docs"],"tags":[]},"content":"There are many ways to customize a theme, and Grav really doesn't limit your creativity regarding this. However, there are several features and some functionality that Grav provides to make this process easier.\n\n## Custom CSS\n\nThe simplest way to customize a theme is to provide your own `custom.css` file. The **Antimatter** default theme provides a reference to a `css\/custom.css` file via the **Asset Manager**. Luckily, the **Asset Manager** handles this for us, and if the file is not found, the reference is not added to the HTML.\n\nHowever, if you do provide a file called `custom.css` in Antimatter's `css\/` folder, this will get picked up and referenced. You just need to ensure that you provide CSS elements with enough [specificity](http:\/\/www.smashingmagazine.com\/2007\/07\/27\/css-specificity-things-you-should-know\/) to override the default CSS. For example:\n\n**custom.css**\n\n[prism classes=\"language-css line-numbers\"]\nbody a {\n    color: #CC0000;\n}\n[\/prism]\n\nThis will override the default link color and use a **red** color instead.\n\n## Custom SCSS\/LESS\n\nThe next step up from providing a custom CSS file is to use the `custom.scss` file (as provided in Antimatter). Antimatter is written using [SCSS](http:\/\/sass-lang.com\/), which is a CSS compatible preprocessor that enables you to write CSS more efficiently via the use of [variables, nested structures, partials, imports, operators and mix-ins](http:\/\/sass-lang.com\/guide).\n\nThis may sound a little daunting at first, but you can use as much or as little SCSS as you like, and once you start, you will have trouble going back to traditional CSS. Promise!\n\nTo make use of SCSS you need to use a SCSS compiler. Lucky these are [easily installed](http:\/\/sass-lang.com\/install) on any platform and come in a variety of forms including a command-line tool, and many GUI applications. Frankly, the command line is all you need.\n\nThe Antimatter theme has an `scss\/` folder that contains a variety of `.scss` files. These should be compiled into the `css-compiled\/` folder. Once installed, open your terminal application, navigate to the install folder `my-grav-install\/my-theme\/` and you can simply type:\n\n[prism classes=\"language-css\"]\nscss --watch scss:css-compiled\n[\/prism]\n\nThis command tells the SCSS compiler to **watch** the `scss` directory and compile any time there are updates saved into the `css-compiled` folder. Exactly what we want!\n\nThere is a file called `scss\/template\/_custom.scss` that is a great location for your custom SCSS code. There are several great benefits of putting your code in this file:\n\n1. The resulting changes will be compiled into the `css-compiled\/template.css` file along with all the other CSS.\n2. You have access to all the variables and mix-ins that are available to any of the other SCSS used in the theme.\n3. You have access to all the standard SCSS features and functionality to make development easier.\n\nAn example of this file would be:\n\n**_custom.scss**\n\n[prism classes=\"language-css line-numbers\"]\nbody {\n    a {\n        color: darken($core-accent, 30%);\n    }\n}\n[\/prism]\n\nThe downside to this approach is that this file is overwritten during any *theme upgrade*, so you should ensure you create a backup of any custom work you do.  This issue is resolved by using theme inheritance as described below.\n\n## Wellington SCSS\n\n[Wellington](https:\/\/github.com\/wellington\/wellington) is a native wrapper for [libsass](http:\/\/libsass.org\/) available for both Linux and MacOS. It provides a much faster solution for compiling SCSS than the default Ruby-based scss compiler.  By faster we mean about **20X faster!**. It's super easy to install (via brew):\n\n[prism classes=\"language-bash command-line\"]\nbrew install wellington\n[\/prism]\n\nTo take advantage of it to compile and `scss` folder into a `css-compiled` folder as in the example above you can [use this gist](https:\/\/gist.github.com\/rhukster\/bcfe030e419028422d5e7cdc9b8f75a8).\n\n!! Wellington is what we have been using for all _Team Grav_ themes and it's been working great!\n\n\n## Theme Inheritance\n\nThis is the preferred approach to modifying or customizing a theme, but it does require a little bit more setup.\n\nThe basic concept is that you define a theme as the **base-theme** that you are inheriting from, and provide **only the bits you wish to modify** and let the base theme handle the rest. The great benefit to this is that you can more easily keep the base theme updated and current without directly impacting your customized inherited theme.\n\nTo achieve this you need to follow these steps:\n\n1. Create a new folder: `user\/themes\/mytheme` to house your new theme.\n2. Copy the theme YAML file from the theme you're inheriting (or from the `user\/config\/themes` folder if you have customized it) to `\/user\/themes\/mytheme\/mytheme.yaml` and add the following content (replacing `user\/themes\/antimatter` with the name of the theme you are inheriting):\n   [prism classes=\"language-yaml line-numbers\"]\n   streams:\n     schemes:\n       theme:\n         type: ReadOnlyStream\n         prefixes:\n           '':\n             - user\/themes\/mytheme\n             - user\/themes\/antimatter\n   [\/prism]\n3. Create a `\/user\/themes\/mytheme\/blueprints.yaml` file that contains at least the basic elements required to define a theme:\n   [prism classes=\"language-yaml line-numbers\"]\n   name: MyTheme\n   version: 1.0.0\n   description: \"Extending Antimatter\"\n   icon: crosshairs\n   author:\n     name: Team Grav\n     email: devs@getgrav.org\n     url: https:\/\/getgrav.org\n   [\/prism]\n   You can provide more details including form definitions to control functionality of your form.  For more details on this you should examine the Antimatter theme's blueprint.yaml file\n\n4. Change your default theme to use your new **mytheme** by editing the `pages: theme:` option in your `user\/config\/system.yaml` configuration file:\n   [prism classes=\"language-yaml line-numbers\"]\n   pages:\n     theme: mytheme\n   [\/prism]\n\n5. Create a new theme Class file that can be used to add advanced event-driven functionality. Create a `user\/themes\/mytheme\/mytheme.php` file:\n   [prism classes=\"language-php line-numbers\"]\n   <?php\n   namespace Grav\\Theme;\n\n   class Mytheme extends Antimatter\n   {\n       \/\/ Some new methods, properties etc.\n   }\n   ?>\n   [\/prism]\n\nYou have now created a new theme called **mytheme** and set up the streams so that it will first look in the **mytheme** theme first, then try **antimatter**.  So in essence, Antimatter is the base-theme for this new theme.\n\nYou can then provide just the files you need, including **JS**, **CSS**, or even modifications to **Twig template files** if you wish.\nIn order to modify specific **SCSS** files, we need to use a little configuration magic for the SCSS compiler so it knows to look in your new `mytheme` location first, then `antimatter` second. This requires a couple of things.\n\n1. First, you need to copy over the main SCSS file from antimatter that contains all the `@import` calls for various sub files, including the `template\/_custom.scss`. So, copy the `template.scss` file from `antimatter\/scss\/` to `mytheme\/scss\/` folder.\n2. Run the SCSS compiler and provide it with a `load-path` that points to the `antimatter\/scss\/` folder that will contain the bulk of the SCSS files:\n   [prism classes=\"language-bash command-line\"]\n   scss --load-path ..\/antimatter\/scss --watch scss:css-compiled\n   [\/prism]\n3. The next step is to create a file located at `mytheme\/scss\/template\/_custom.scss`. This is where your modifications will go.\n\nWhen you make changes in your custom SCSS file, all the SCSS will be recompiled into `mytheme\/css-compiled\/template.css` and automatically referenced correctly by Grav.\n\nFor more information on this topic, please check out the blog post titled *[Theme Development with Inheritance](https:\/\/getgrav.org\/blog\/theme-development-with-inheritance)*.\n\n\n\n"},{"title":"Asset-manager","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/asset-manager","taxonomy":{"categories":[],"tags":[]}},{"title":"Theme Variables","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/theme-vars","taxonomy":{"categories":["docs"],"tags":[]},"content":"When you are designing a theme, Grav gives you access to all sorts of objects and variables from within your Twig templates.  The Twig templating framework provides powerful ways to read and manipulate these objects and variables.  This is [fully explained in their own documentation](http:\/\/twig.sensiolabs.org\/doc\/templates.html) as well as [summarized succinctly in our own documentation](..\/twig-primer).\n\n!!!! In Twig, you can call methods that take no parameters by just calling the method name, and omitting the parentheses `()`.  If you need to pass parameters, you also need to provide those after the method name.  `page.content` is equivalent to `page.content()`\n\n## Core Objects\n\nThere are several **core objects** that are available to a Twig template, and each object has a set of **variables** and **functions**.\n\n### base_dir variable\n\nThe `{{ base_dir }}` variable returns the base file directory of the Grav installation.\n\n### base_url variable\n\nThe `{{ base_url }}` returns the base URL to the Grav site, whether or not this shows the full URL is dependent on the `absolute_urls` [option in the system configuration](..\/..\/basics\/grav-configuration#system-configuration).\n\n### base_url_relative variable\n\nThe `{{ base_url_relative }}` returns the base URL to the Grav site, without the host information.\n\n### base_url_absolute variable\n\nThe `{{ base_url_absolute }}` returns the base URL to the Grav site, including the host information.\n\n### base_url_simple variable\n\nThe `{{ base_url_simple }}` returns the base URL to the Grav site, without the language code.\n\n### home_url variable\n\nThe `{{ home_url }}` is particularly useful to use to link back to the homepage of your site. It is similar to `base_url` but takes into account the situation when the this is empty.\n\n### html_lang variable\n\nThis will return the current active language if provided, else use the `site.default_lang` configured option, else fall back to `en`.\n\n### theme_dir variable\n\nThe `{{ theme_dir }}` variable returns the file directory folder of the current theme.\n\n### theme_url variable\n\nThe `{{ theme_url }}` returns the relative URL to the current theme.\n\n### html_lang variable\n\nThe `{{ html_lang }}` returns the active language.\n\n### language_codes variable\n\nThe `{{ language_codes }}` returns list of available languages of the site.\n\n\n!! When linking to assets like images or JavaScript and CSS files, it's recommended to use the `url()` function in combination with the `theme:\/\/` stream as described on the [Twig Filters & Functions](\/themes\/twig-filters-functions#url) page. For JavaScript and CSS, the [Asset Manager](\/themes\/asset-manager) is even easier to use but in some cases like dynamic or conditional loading of assets, it will not work.\n\n### config object\n\nYou can access any Grav configuration setting via the config object as set in the `configuration.yaml` file.  For example:\n\n[prism classes=\"language-twig\"]\n{{ config.system.pages.theme }}{# returns the currently configured theme #}\n[\/prism]\n\n### site object\n\nAn alias to the `config.site` object. This represents the configuration as set in the `site.yaml` file.\n\n### system object\n\nAn alias to the `config.system` object.  This represents the configuration in the main `system.yaml` file.\n\n### theme object\n\nAn alias to the `config.theme` object.  This represents the configuration for the current active theme.\n\n### page object\n\nBecause Grav is built using the structure defined in the `pages\/` folder, each page is represented by a **page object**.\n\nThe **page object** is probably _the_ most important object you will work with as it contains all the information about the current page you are currently on.\n\n!! The whole list of the Page object methods is available on the [API site](https:\/\/learn.getgrav.org\/api#class-gravcommonpagepage). Here's a list of the methods you'll find most useful.\n\n##### summary([size])\n\nThis returns a truncated or shortened version of your content.  You can provide an optional `size` parameter to specify the maximum length of the summary, in characters.  Alternatively, if no size is provided, the value can be obtained via the site-wide variable `summary.size` from your `site.yaml` configuration.\n\n[prism classes=\"language-twig\"]\n{{ page.summary }}\n[\/prism]\n\nor\n\n[prism classes=\"language-twig\"]\n{{ page.summary(50) }}\n[\/prism]\n\nA third option is to use a manual delimiter of `===` in your content.  Anything before the delimiter will be used for the summary.\n\n##### content()\n\nThis returns the entire HTML content of your page.\n\n[prism classes=\"language-twig\"]\n{{ page.content }}\n[\/prism]\n\n##### header()\n\nThis returns the page headers as defined in the YAML front-matter of the page.  For example a page with the following headers:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: My Page\nauthor: Joe Bloggs\n[\/prism]\n\ncould be used:\n\n[prism classes=\"language-twig\"]\nThe author of this page is: {{ page.header.author }}\n[\/prism]\n\n##### media()\n\nThis returns an array containing all the media associated with a page. These include **images**, **videos**, and other **files**.  You can access media methods as described in the [media documentation](..\/..\/content\/media) for content. Because it is an array, Twig filters and functions can be used. Note: .svg are treated as files, not images, because they can not be manipulated using twig image filters.\n\nGet a specific file or image:\n\n[prism classes=\"language-twig\"]\n{% set my_pdf = page.media['myfile.pdf'] %}\n[\/prism]\n\nGet the first image:\n\n[prism classes=\"language-twig\"]\n{% set first_image = page.media.images|first %}\n[\/prism]\n\nLoop over all images and output the HTML tag to display it:\n\n[prism classes=\"language-twig\"]\n{% for image in page.media.images %}\n   {{ image.html }}\n{% endfor %}\n[\/prism]\n\n##### title()\n\nThis returns the title of the page as set in the `title` variable of the YAML headers for the page itself.\n\n[prism classes=\"language-yaml\"]\ntitle: My Page\n[\/prism]\n\n##### menu()\n\nThis returns the value of the `menu` variable of the YAML headers of the page.  If none is provided, it defaults to the `title`.\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: My Page\nmenu: my-page\n[\/prism]\n\n##### visible()\n\nThis returns whether or not the page is visible.  By default pages with numeric value followed by a period are visible by default (`01.somefolder1`) while those without (`subfolder2`) are not considered visible. This can be overridden in the page headers:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: My Page\nvisible: true\n[\/prism]\n\n##### routable()\n\nThis returns whether or not a page is routable by Grav.  This means if you can point your browser to the page and receive content back.  Non-routable pages can be used in templates, plugins, etc, but cannot be reached directly. This can be set in the page headers:\n\n[prism classes=\"language-yaml line-numbers\"]\ntitle: My Page\nroutable: true\n[\/prism]\n\n##### slug()\n\nThis returns the direct name as displayed in the URL for this page, for example `my-blog-post`.\n\n##### url([include_host = false])\n\nThis returns the URL to the page, for example:\n\n[prism classes=\"language-twig\"]\n{{ page.url }} {# could return \/my-section\/my-category\/my-blog-post #}\n[\/prism]\n\nor\n\n[prism classes=\"language-twig\"]\n{{ page.url(true) }} {# could return http:\/\/mysite.com\/my-section\/my-category\/my-blog-post #}\n[\/prism]\n\n##### permalink()\n\nThis returns the URL with host information. Particularly useful when needing a quick link that can be accessed from anywhere.\n\n##### canonical()\n\nThis returns the URL that is the 'preferred' version or link to a particular page.  This value will default to the regular URL unless the page has overridden the `canonical:` page header option.\n\n##### route()\n\nThis returns the internal routing for a page.  This is primarily used for internal routing and dispatching of pages.\n\n##### home()\n\nThis returns `true` or `false` based on whether or not this page is configured as the **home** page.  This setting is found in the `system.yaml` file.\n\n##### root()\n\nThis returns `true` or `false` based on whether or not this page is the root page of the tree hierarchy.\nUsing: {{ page.parent.root() }}\n\n##### active()\n\nThis returns `true` or `false` based on whether or not this page is currently the page your browser is accessing.  This is particularly useful in navigation to know if the page you are on is the active page.\n\n##### modular()\n\nThis returns `true` or `false` based on whether or not this page is modular.\n\n##### activeChild()\n\nThis returns whether or not this URI's URL contains the URL of the active page. Or in other words, is this page's URL in the current URL. Again this is useful when building your navigation and you wish to know if the page you are iterating over is the parent of an active child page.\n\n##### find(url)\n\nThis returns a page object as specified by a route URL.\n\n[prism classes=\"language-twig\"]\n{% include 'modular\/author-detail.html.twig' with {'page': page.find('\/authors\/billy-bloggs')} %}\n[\/prism]\n\n##### collection()\n\nThis returns the collection of pages for this context as determined by the [collection page headers](..\/..\/content\/collections).\n\n[prism classes=\"language-twig line-numbers\"]\n{% for child in page.collection %}\n    {% include 'partials\/blog_item.html.twig' with {'page':child, 'truncate':true} %}\n{% endfor %}\n[\/prism]\n\n##### currentPosition()\n\nThis returns the index of the current page in relation to its siblings.\n\n##### isFirst()\n\nThis returns `true` or `false` based on whether this page is the first of its siblings.\n\n##### isLast()\n\nThis returns `true` or `false` based on whether this page is the last of its siblings.\n\n##### nextSibling()\n\nThis returns the next page from the array of siblings based on the current position.\n\n##### prevSibling()\n\nThis returns the previous page from the array of siblings based on the current position.\n\n!! nextSibling() and prevSibling() order pages in a stack-like structure. It works best in a blog situation, where the first blog post has nextSibling null and prevSibling is the previous blog post. If this ordering direction confuses you, we suggest using page.adjacentSibling(-1) to point to the next page instead of page.nextSibling() to reduce the confusion that the terminology might make. You can also define a constant in the theme and use that for better readability, like page.adjacentSibling(NEXT_PAGE)\n\n##### children()\n\nThis returns an array of child pages for the page as defined in the pages content structure.\n\n##### orderBy()\n\nThis returns the order type for any sorted children of the page. Values typically include: `default`, `title`, `date` and `folder`. This value is typically configured in page headers.\n\n##### orderDir()\n\nThis returns the order direction for any sorted children of the page.  Values can be either `asc` for ascending or `desc` for descending. This value is typically configured in page headers.\n\n##### orderManual()\n\nThis returns an array of manual page ordering for any children of the page. This value is typically configured in page headers.\n\n##### maxCount()\n\nThis returns the maximum number of children pages that are allowed to be returned. This value is typically configured in page headers.\n\n##### children.count()\n\nThis returns the number of child pages of the page.\n\n##### children.current()\n\nThis returns the current child item.  Can be used while iterating over the children.\n\n##### children.next()\n\nThis returns the next child in the array of children.\n\n##### children.prev()\n\nThis returns the previous child in the array of children.\n\n##### children.nth(position)\n\nThis returns the child identified by the `position` which is an integer from `0` to `children.count() - 1` in the array of children.\n\n##### children.sort(orderBy, orderDir)\n\nReorders the children based on an **orderBy** (`default`, `title`, `date` and `folder`) and **orderDir** (`asc` or `desc`)\n\n##### parent()\n\nThis returns the parent page object for this page. This is very useful when you need to navigate back up the nested tree structure of pages.\n\n\n\n##### isPage()\n\nThis returns `true` or `false` based on whether this page has an actual `.md` file associated with it rather than just a folder for routing.\n\n##### isDir()\n\nThis returns `true` or `false` based on whether this page is only a folder for routing.\n\n##### id()\n\nThis returns a unique identifier for the page.\n\n##### modified()\n\nThis returns a timestamp of when the page was last modified.\n\n##### date()\n\nThis returns the date timestamp for the page.  Typically this is set in the headers to represent the date of a page or post.  If no value is defined explicitly, the file modified timestamp is used.\n\n##### template()\n\nThis returns the name of the page template without the `.md` extension. For example `default`\n\n##### filePath()\n\nThis returns the full file path of the page. For example `\/Users\/yourname\/sites\/grav\/user\/pages\/01.home\/default.md`\n\n##### filePathClean()\n\nThis returns the relative path from the root of the Grav site.  For example `user\/pages\/01.home\/default.md`\n\n##### path()\n\nThis returns the full path to the directory containing the page.  For example `\/Users\/yourname\/sites\/grav\/user\/pages\/01.home`\n\n##### folder()\n\nThis returns the name of the folder for the page.  For example `01.home`\n\n##### taxonomy()\n\nThis returns an array of the taxonomy associated with a page.  These can be iterated over. This is particularly useful for displaying items such as tags:\n\n[prism classes=\"language-twig line-numbers\"]\n{% for tag in page.taxonomy.tag %}\n    <a href=\"search\/tag:{{ tag }}\">{{ tag }}<\/a>\n{% endfor %}\n[\/prism]\n\n### pages object\n\n!! The whole list of the Pages object methods is available on the [API site](https:\/\/learn.getgrav.org\/api#class-gravcommonpagepages). Here's a list of the methods you'll find most useful.\n\nThe **pages object** represents a nested tree of every **page object** that Grav knows about.  This is particularly useful for creating a **sitemap**, **navigation** or if you wish to find a particular **page**.\n\n##### children method\n\nThis returns the immediate child pages as an array of **page objects**. As the pages object represents the entire tree, you can fully recurse over every page in the Grav pages\/ folder.\n\nGet the top-level pages for a simple menu:\n\n[prism classes=\"language-twig line-numbers\"]\n<ul class=\"navigation\">\n    {% for page in pages.children %}\n        {% if page.visible %}\n            <li><a href=\"{{ page.url }}\">{{ page.menu }}<\/a><\/li>\n        {% endif %}\n    {% endfor %}\n<\/ul>\n[\/prism]\n\n### media object\n\nThere is a new object that allows you to access [media](..\/..\/content\/media) that is outside of Page objects via PHP streams from Twig. This works in a similar manner to [image linking in content](..\/..\/content\/image-linking#php-streams) by using streams to access images, and media processing to manipulate theme.\n\n`media['user:\/\/media\/bird.png'].resize(50, 50).rotate(90).html()`\n\n### uri object\n\n!! The whole list of the Uri object methods is available on the [API site](https:\/\/learn.getgrav.org\/api#class-gravcommonuri). Here's a list of the methods you'll find most useful.\n\nThe Uri object has several methods to access parts of the current URI. For the full URL `http:\/\/mysite.com\/grav\/section\/category\/page.json\/param1:foo\/param2:bar\/?query1=baz&query2=qux`:\n\n##### path()\n\nThis returns the path portion of the URL: (e.g. `uri.path` = `\/section\/category\/page`)\n\n##### paths()\n\nThis returns the array of path elements: (e.g. `uri.paths` = `[section, category, page]`)\n\n##### route([absolute = false][, domain = false])\n\nThis returns the route as either an absolute or relative URL.  (e.g. `uri.route(true)` = `http:\/\/mysite.com\/grav\/section\/category\/page` or `uri.route()` = `\/section\/category\/page`)\n\n##### params()\n\nThis returns the params portion of the URL: (e.g. `uri.params` = `\/param1:foo\/param2:bar`)\n\n##### param(id)\n\nThis returns the value of a particular param.  (e.g. `uri.param('param1')` = `foo`)\n\n##### query()\n\nThis returns the query portion of the URL: (e.g. `uri.query` = `query1=bar&query2=qux`)\n\n##### query(id)\n\nYou can also retrieve specfic query items: (e.g. `uri.query('query1')` = `bar`)\n\n##### url([include_host = true])\n\nThis returns the full URL with or without the host.  (e.g. `uri.url(false)` = `grav\/section\/category\/page\/param:foo?query=bar`)\n\n##### extension()\n\nThis returns the extension, or will return `html` if not provided: (e.g. `uri.extension` = `json`)\n\n##### host()\n\nThis returns the host portion of the URL. (e.g. `uri.host` = `mysite.com`)\n\n##### base()\n\nThis returns the base portion of the URL. (e.g. `uri.base` = `http:\/\/mysite.com`)\n\n##### rootUrl([include_host = true])\n\nThis returns the root url to the grav instance.  (e.g. `uri.rootUrl()` = `http:\/\/mysite.com\/grav`)\n\n##### referrer()\n\nThis returns the referrer information for this page.\n\n### header object\n\nThe header object is an alias for `page.header()` of the original page.  It's a convenient way to access the original page headers when you are looping through other `page` objects of child pages or collections.\n\n### content object\n\nThe content object is an alias for the `page.content()` of the original page.\n\n### taxonomy object\n\nThe global Taxonomy object that contains all the taxonomy information for the site.\n\n### browser object\n\n!! The whole list of the Browser object methods is available on the [API site](https:\/\/learn.getgrav.org\/api#class-grav-common-browser). Here's a list of the methods you'll find most useful.\n\nGrav has built-in support for programmatically determining the platform, browser, and version of the user.\n\n[prism classes=\"language-twig\"]\n{{ browser.platform}}   # macintosh\n{{ browser.browser}}    # chrome\n{{ browser.version}}    # 41\n[\/prism]\n\n### user object\n\nYou can access the current logged in user object indirectly via the Grav object.  This allows you to access such data as `username`, `fullname`, `title`, and `email`:\n\n[prism classes=\"language-twig\"]\n{{ grav.user.username }}  # admin\n{{ grav.user.fullname }}  # Billy Bloggs\n{{ grav.user.title }}     # Administrator\n{{ grav.user.email }}     # billy@bloggs.com\n[\/prism]\n\n## Adding Custom Variables\n\nYou can easily add custom variables in a variety of ways.  If the variable is a site-wide variable, you can put the variable in your `user\/config\/site.yaml` file and then access it via:\n\n[prism classes=\"language-twig\"]\n{{ site.my_variable }}\n[\/prism]\n\nAlternatively, if the variable is only needed for a particular page, you can add the variable to your page's YAML front-matter, and access it via the `page.header` object.  For example:\n\n[prism classes=\"language-twig\"]\ntitle: My Page\nauthor: Joe Bloggs\n[\/prism]\n\ncould be used as:\n\n[prism classes=\"language-twig\"]\nThe author of this page is: {{ page.header.author }}\n[\/prism]\n\n## Adding Custom Objects\n\nAn advanced way to add custom objects is to use a plugin to add objects to the Twig object.  This is an advanced topic and is covered in more detail in the [plugins chapter](..\/..\/plugins\/event-hooks).\n"},{"title":"Theme Configuration","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/theme-configuration","taxonomy":{"categories":["docs"],"tags":[]},"content":"As of Grav 1.1, you can easily access theme configuration and blueprint information from your Twig and PHP files.\n\n## Accessing Theme Blueprint Information\n\nInformation from the currently active theme's `blueprints.yaml` file can be had from the `grav.theme` object. Let's use the following `blueprints.yaml` file as an example:\n\n[prism classes=\"language-yaml line-numbers\"]\nname: Antimatter\nversion: 1.7.0\ndescription: \"Antimatter is the default theme included with **Grav**\"\nicon: empire\nauthor:\n  name: Team Grav\n  email: devs@getgrav.org\n  url: https:\/\/getgrav.org\nhomepage: https:\/\/github.com\/getgrav\/grav-theme-antimatter\ndemo: http:\/\/demo.getgrav.org\/blog-skeleton\nkeywords: antimatter, theme, core, modern, fast, responsive, html5, css3\nbugs: https:\/\/github.com\/getgrav\/grav-theme-antimatter\/issues\nlicense: MIT\n[\/prism]\n\nYou can reach any of these items via `grav.theme` by using the standard **dot-syntax**:\n\n[prism classes=\"language-twig line-numbers\"]\nAuthor Email: {{ grav.theme.author.email }}\nTheme License: {{ grav.theme.license }}\n[\/prism]\n\nYou can also reach these same values from a Grav plugin with PHP syntax:\n\n[prism classes=\"language-php line-numbers\"]\n$theme_author_email = $this->grav['theme']['author']['email'];\n$theme_license = $this->grav['theme']['license'];\n[\/prism]\n\n## Accessing Theme Configuration\n\nTheme's have configuration files, too. A theme's configuration file is named `<themename>.yaml`. The default file lives in the theme's root folder (`user\/themes\/<themename>`). \n\nIt is **strongly** recommended not to actually change the theme's default YAML file but to override the settings in the `user\/config` folder. This will ensure that the theme's original settings remain intact, allowing you to quickly access the changes and\/or revert back whenever necessary.\n\nFor example, let us consider the Antimatter theme.  By default, there is a file called `antimatter.yaml` in the theme's root folder. The contents of this configuration file look like this:\n\n[prism classes=\"language-yaml line-numbers\"]\nenabled: true\ncolor: blue\n[\/prism]\n\nThis is a simple file, but it provides you an idea of what you can do with theme configuration settings. Let us override these settings and add a new one.\n\nSo, create a file in the following location: `user\/config\/themes\/antimatter.yaml`.  In this file put the following contents:\n\n> *I note that `enabled` is not repeated here. If the config files are merged and not simply replaced, then that should be explicitly stated.*\n\n[prism classes=\"language-yaml line-numbers\"]\ncolor: red\ninfo: Grav is awesome!\n[\/prism]\n\nThen in your theme templates you can access these variables using the `grav.theme.config` object:\n\n```\n<h1 style=\"color:{{ grav.theme.config.color }}\">{{ grav.theme.config.info }}<\/h1>\n```\n\nThis should render out as:\n\n<h1 style=\"color:red\">Grav is awesome!<\/h1>\n\nIn PHP you can access the current theme's configuration with:\n\n[prism classes=\"language-php line-numbers\"]\n$color = $this->grav['theme']->config()['color'];\n[\/prism]\n\nSimple! The sky is the limit regarding the configuration of your themes.  You can use them for whatever you like! :)\n\n### Alternative Notation\n\nThe following aliases also work:\n\n[prism classes=\"language-twig line-numbers\"]\nTheme Color Option: {{ config.theme.color_option }}\n   or\nTheme Color Option: {{ theme.color_option }}\n   or\nTheme Color Option: {{ theme_var(color_option) }}\n   or\nTheme Color Option: {{ grav.themes.antimatter.color_option }} [AVOID!]\n[\/prism]\n\n**Even though `grav.themes.<themename>` is supported, it should be avoided because it makes it impossible to inherit the theme properly.**\n"},{"title":"Twig Tags","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/twig-tags","taxonomy":{"categories":["docs"],"tags":[]},"content":"Grav also provides a variety of custom Twig Tags that extend the already very capable Twig templating capabilities with some new tags that we've found useful.\n\n### Markdown\n\nThe Markdown tag provides a powerful new way to embedding markdown in Twig template.  You could use a variable and render that variable with the `|markdown` filter, but the `{% markdown %}` syntax makes creating blocks of markdown text even simpler.\n\n[prism classes=\"language-twig line-numbers\"]\n{% markdown %}\nThis is **bold** and this _underlined_\n\n1. This is a bullet list\n2. This is another item in that same list\n{% endmarkdown %}\n[\/prism]\n\n### Scripts\n\nThe Scripts tag is really a convenience tag that keeps your Twig more readable compared to the usual `{% do assets...%}` approach.  It's purely an alternative way of writing things.\n\n#### File\n\n[prism classes=\"language-twig line-numbers\"]\n{% script 'theme:\/\/js\/something.js' in 'bottom' priority: 20 with { defer: true, async: true } %}\n[\/prism]\n\n#### Inline\n\n[prism classes=\"language-twig line-numbers\"]\n{% script in 'bottom' priority: 20 %}\n    alert('Warning!');\n{% endscript %}\n[\/prism]\n\n### CSS Styles\n\n#### File\n\n[prism classes=\"language-twig line-numbers\"]\n{% style 'theme:\/\/css\/foo.css' priority: 20 %}\n[\/prism]\n\n#### Inline\n\n[prism classes=\"language-twig line-numbers\"]\n{% style priority: 20 with { media: 'screen' } %}\n    a { color: red; }\n{% endstyle %}\n[\/prism]\n\n### Switch\n\nIn most programming language, using a `switch` statement is a common way to make a bunch of `is else` statements cleaner and more readabile.  Also they may prove to be marginally faster.  We just provide a simple way of creating these as they were missing in the base Twig functionality.\n\n[prism classes=\"language-twig line-numbers\"]\n{% switch type %}\n  {% case 'foo' %}\n     {{ my_data.foo }}\n  {% case 'bar' %}\n     {{ my_data.bar }}\n  {% default %}\n     {{ my_data.default }}\n{% endswitch %}\n[\/prism]\n\n### Deferred Blocks\n\nA great new feature of Grav 1.6 is the power of deferred blocks.  With traditional blocks, once the block has been rendered, it cannot be manipulated.  Take the example of a `{% block scripts %}` that might hold some entries for JavaScript includes.  If you have a child Twig template, and you extend a base template where this block is defined, you can extend the block, and add your own custom JavaScript entries.  however, partial twig templates that are included from this page, cannot reach or interact with the block.\n\nThe deferred attribute on the block which is powered by the [Deferred Extension](https:\/\/github.com\/rybakit\/twig-deferred-extension), means that you can define this block in any Twig template, but it's rendering is deferred, so that it renders after everything else.  This means that you can add JavaScript references via the `{% do assets.addJs() %}` call from anywhere in your page, and because the rendering is deferred, the output will contain all the assets that Grav knows about, no matter when you added them.\n\n[prism classes=\"language-twig line-numbers\"]\n{% block myblock deferred %}\n    This will be rendered after everything else. \n{% endblock %}\n[\/prism]\n\n\n### Throw an Exception\n\nThere are certain situations where you need to manually throw an exception, so we have a tag for that too.\n\n[prism classes=\"language-twig line-numbers\"]\n{% throw 404 'Not Found' %}\n[\/prism]\n\n### Try \/ Catch Exceptions\n\nAlso it's useful to have more powerful PHP-style error handling in your Twig templates so we have a new `try\/catch` tag.\n\n[prism classes=\"language-twig line-numbers\"]\n{% try %}\n   <li>{{ user.get('name') }}<\/li>\n{% catch %}\n   User Error: {{ e.message }}\n{% endcatch %}\n[\/prism]\n \n### Render Object (Flex only)\n\nFlex Objects are slowly making their way into more and more elements of Grav.  These are self-aware objects that have an associated Twig template structure, so they know how to render themselves.  In order to use these, we have implemented a new `render` tag that takes an optional layout which in turn controls which of the template layouts the object should be rendered with.\n \n[prism classes=\"language-twig line-numbers\"]\n{% render object layout: 'default' with { variable: 'value' } %}\n[\/prism]\n"},{"title":"Twig Filters & Functions","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/twig-filters-functions","taxonomy":{"categories":["docs"],"tags":[]},"content":"Although Twig already provides an extensive list of [filters, functions, and tags](http:\/\/twig.sensiolabs.org\/documentation), Grav also provides a selection of useful additions to make the process of theming easier.\n\n!! For information about developing your own custom Twig Filters, check out the [Custom Twig Filter\/Function](\/cookbook\/twig-recipes\/#custom-twig-filter-function) example in the **Twig Recipes** section of the **Cookbook** chapter.\n\n\n## Grav Twig Filters\n\nTwig filters are applied to Twig variables by using the `|` character followed by the filter name.  Parameters can be passed in just like Twig functions using parenthesis.  \n\n#### Absolute URL\n\nTake a relative path and convert it to an absolute URL format including hostname\n\n`'<img src=\"\/some\/path\/to\/image.jpg\" \/>'|absolute_url` <i class=\"fa fa-long-arrow-right\"><\/i> `{{ '<img src=\"\/some\/path\/to\/image.jpg\" \/>'|absolute_url }}`\n\n#### Array Unique\n\nWrapper for PHP `array_unique()` that removes duplicates from an array.\n\n`['foo', 'bar', 'foo', 'baz']|array_unique` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ print_r(['foo', 'bar', 'foo', 'baz']|array_unique) }}**\n\n#### Base32 Encode\n\nPerforms a base32 encoding on variable\n`'some variable here'|base32_encode` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'some variable here'|base32_encode }}**\n\n#### Base32 Decode\n\nPerforms a base32 decoding on variable\n`'ONXW2ZJAOZQXE2LBMJWGKIDIMVZGK'|base32_decode` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'ONXW2ZJAOZQXE2LBMJWGKIDIMVZGK'|base32_decode }}**\n\n#### Base64 Encode\n\nPerforms a base64 encoding on variable\n`'some variable here'|base64_encode` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'some variable here'|base64_encode }}**\n\n#### Base64 Decode\n\nPerforms a base64 decoding on variable\n`'c29tZSB2YXJpYWJsZSBoZXJl'|base64_decode` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'c29tZSB2YXJpYWJsZSBoZXJl'|base64_decode }}**\n\n#### Basename\n\nReturn the basename of a path.\n\n`'\/etc\/sudoers.d'|basename` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ '\/etc\/sudoers.d'|basename }}**\n\n#### Camelize\n\nConverts a string into \"CamelCase\" format\n\n`'send_email'|camelize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'send_email'|camelize }}**\n\n[version=16]\n#### Chunk Split\n\nSplits a string into smaller chunks of a certain sizeOf\n\n`'ONXW2ZJAOZQXE2LBMJWGKIDIMVZGKA'|chunk_split(6, '-')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'ONXW2ZJAOZQXE2LBMJWGKIDIMVZGKA'|chunk_split(6, '-') }}**\n[\/version]\n\n#### Contains\n\nDetermine if a particular string contains another string\n\n`'some string with things in it'|contains('things')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'some string with things in it'|contains('things') }}**\n\n[version=16]\n#### Casting Values\n\nPHP 7 is getting more strict type checks, which means that passing a value of wrong type may now throw an exception. To avoid this, you should use filters which ensure that the value passed to a method is valid:  \n\n**|string**\n\nCast value to string.\n\n**|int**\n\nCast value to integer.\n\n**|bool**\n\nCast value to boolean.\n\n**|float**\n\nCast value to floating point number.\n\n**|array**\n\nCast value to an array.\n[\/version]\n\n#### Defined\n\nSometimes you want to check if some variable is defined, and if it's not, provide a default value.  For example:\n\n`set header_image_width  = page.header.header_image_width|defined(900)`\n\nThis will set the variable `header_image_width` to the value `900` if it's not defined in the page header.\n\n#### Dirname\n\nReturn the dirname of a path.\n\n`'\/etc\/sudoers.d'|dirname` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ '\/etc\/sudoers.d'|dirname }}**\n\n\n#### Ends-With\n\nTakes a needle and a haystack and determines if the haystack ends with the needle.  Also now works with an array of needles and will return `true` if **any** haystack ends with the needle.\n\n`'the quick brown fox'|ends_with('fox')` <i class=\"fa fa-long-arrow-right\"><\/i> {{  'the quick brown fox'|ends_with('fox') ? 'true' : 'false' }}\n\n#### FieldName\n\nFilters field name by changing dot notation into array notation\n\n`'field.name|fieldName`\n\n\n[version=16]\n#### Get Type\n\nGets the type of a variable:\n\n`page|get_type` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ page|get_type }}**\n[\/version]\n\n#### Humanize\n\nConverts a string into a more \"human readable\" format\n\n`'something_text_to_read'|humanize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'something_text_to_read'|humanize }}**\n\n#### Hyphenize\n\nConverts a string into a hyphenated version.\n\n`'Something Text to Read'|hyphenize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'Something Text to Read'|hyphenize }}**\n\n#### JSON Decode\n\nYou can decode JSON by simply applying this filter:\n\n`{\"first_name\": \"Guido\", \"last_name\":\"Rossum\"}|json_decode`\n\n#### Ksort\n\nSort an array map by each key\n\n`array|ksort` {% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set ritems = {'orange':1, 'apple':2, 'peach':3}|ksort %}\n{% for key, value in ritems %}{{ key }}:{{ value }}, {% endfor %}\n[\/prism]\n{% endverbatim %}\n\n{% set ritems = {'orange':1, 'apple':2, 'peach':3}|ksort %}\n[prism classes=\"language-twig line-numbers\"]\n{% for key, value in ritems %}{{ key }}:{{ value }}, {% endfor %}\n[\/prism]\n\n#### Left Trim\n\n`'\/strip\/leading\/slash\/'|ltrim('\/')` <i class=\"fa fa-long-arrow-right\"><\/i> {{ '\/strip\/leading\/slash\/'|ltrim('\/') }}\n\nRemoves trailing spaces at the beginning of a string. It can also remove other characters by setting the character mask (see [http:\/\/php.net\/manual\/en\/function.ltrim.php](http:\/\/php.net\/manual\/en\/function.ltrim.php))\n\n#### Markdown\n\nTake an arbitrary string containing markdown and convert it to HTML using the markdown parser of Grav\n\n`'something with **markdown** and [a link](http:\/\/www.cnn.com)'|markdown` <i class=\"fa fa-long-arrow-right\"><\/i> something with **markdown** and [a link](http:\/\/www.cnn.com)\n\n#### MD5\n\nCreates an md5 hash for the string\n\n`'anything'|md5` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'anything'|md5 }}**\n\n#### Modulus\n\nPerforms the same functionality as the Modulus `%` symbol in PHP. It operates on a number by passing in a numeric divider and an optional array of items to select from.\n\n`7|modulus(3, ['red', 'blue', 'green'])` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 7|modulus(3, ['red', 'blue', 'green']) }}**\n\n#### Monthize\n\nConverts an integer number of days into the number of months\n\n`'181'|monthize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ '181'|monthize }}**\n\n[version=16]\n#### NiceCron\n\nGets a human readable output for cron sytnax\n\n`\"2 * * * *\"|nicecron` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ '2 * * * *'|nicecron }}**\n\n#### NiceFilesize\n\nOutput a file size in a human readable nice size format\n\n`612394|nicefilesize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 612394|nicefilesize }}**\n\n#### NiceNumber\n\nOutput a number in a human readable nice number format\n\n`12430|nicenumber` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 12430|nicenumber }}**\n[\/version]\n\n#### NiceTime\n\nOutput a date in a human readable nice time format\n\n`page.date|nicetime(false)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ page.date|nicetime(false) }}**\n\n[version=16]\n#### Of Type\n\nChecks the type of a variable to the param:\n\n`page|of_type('string')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ page|of_type('string') ? 'true' : 'false' }}**\n[\/version]\n\n#### Ordinalize\n\nAdds an ordinal to the integer (such as 1st, 2nd, 3rd, 4th)\n\n`'10'|ordinalize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ '10'|ordinalize }}**\n\n#### Pad\n\nPads a string to a certain length with another character. This is a wrapper for the PHP [str_pad()](http:\/\/php.net\/manual\/en\/function.str-pad.php) function.\n\n`'foobar'|pad(10, '-')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'foobar'|pad(10, '-') }}**\n\n#### Pluralize\n\nConverts a string to the English plural version\n\n`'person'|pluralize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'person'|pluralize }}**\n\n[version=16]\n#### Print Variable\n\nPrints human-readable information about a variable\n\n`page.header|print_r`\n\n[prism classes=\"language-text\"]\n{{ page.header|print_r }}\n[\/prism]\n[\/version]\n\n#### Randomize\n\nRandomizes the list provided.  If a value is provided as a parameter, it will skip those values and keep them in order.\n\n`array|randomize` {% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set ritems = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']|randomize(2) %}\n{% for ritem in ritems %}{{ ritem }}, {% endfor %}\n[\/prism]\n{% endverbatim %}\n\n<strong>\n{% set ritems = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']|randomize(2) %}\n{% for ritem in ritems %}{{ ritem }}, {% endfor %}\n<\/strong>\n\n#### Regex Replace\n\nA helpful wrapper for the PHP [preg_replace()](http:\/\/php.net\/manual\/en\/function.preg-replace.php) method, you can perform complex Regex replacements on text via this filter:\n\n`'The quick brown fox jumps over the lazy dog.'|regex_replace(['\/quick\/','\/brown\/','\/fox\/','\/dog\/'], ['slow','black','bear','turtle'])` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'The quick brown fox jumps over the lazy dog.'|regex_replace(['\/quick\/','\/brown\/','\/fox\/','\/dog\/'], ['slow','black','bear','turtle']) }}**\n\n#### Right Trim\n\n`'\/strip\/trailing\/slash\/'|rtrim('\/')` <i class=\"fa fa-long-arrow-right\"><\/i> {{ '\/strip\/trailing\/slash\/'|rtrim('\/') }}\n\nRemoves trailing spaces at the end of a string. It can also remove other characters by setting the character mask (see [http:\/\/php.net\/manual\/en\/function.rtrim.php](http:\/\/php.net\/manual\/en\/function.rtrim.php))\n\n#### Singularize\n\nConverts a string to the English singular version\n\n`'shoes'|singularize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'shoes'|singularize }}**\n\n#### Safe Email\n\nThe safe email filter converts an email address into ASCII characters to make it harder for email spam bots to recognize and capture.\n\n`\"someone@domain.com\"|safe_email` <i class=\"fa fa-long-arrow-right\"><\/i> {{ \"someone@domain.com\"|safe_email }}\n\nUsage example with a mailto link:\n\n[prism classes=\"language-html line-numbers\"]\n<a href=\"mailto:{{'your.email@server.com'|safe_email}}\">\n  Email me\n<\/a>\n[\/prism]\n\nYou might not notice a difference at first, but examining the page source (not using the Browser Developer Tools, the actual page source) will reveal the underlying characters encoding.\n\n#### Sort by Key\n\nSort an array map by a particular key\n\n`array|sort_by_key` {% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set people = [{'email':'fred@yahoo.com', 'id':34}, {'email':'tim@exchange.com', 'id':21}, {'email':'john@apple.com', 'id':2}]|sort_by_key('id') %}\n{% for person in people %}{{ person.email }}:{{ person.id }}, {% endfor %}\n[\/prism]\n{% endverbatim %}\n\n<strong>\n{% set people = [{'email':'fred@yahoo.com', 'id':34}, {'email':'tim@exchange.com', 'id':21}, {'email':'john@apple.com', 'id':2}]|sort_by_key('id') %}\n{% for person in people %}{{ person.email }}:{{ person.id }}, {% endfor %}\n<\/strong>\n\n#### Starts-With\n\nTakes a needle and a haystack and determines if the haystack starts with the needle.  Also now works with an array of needles and will return `true` if **any** haystack starts with the needle.\n\n`'the quick brown fox'|starts_with('the')` <i class=\"fa fa-long-arrow-right\"><\/i> {{  'the quick brown fox'|starts_with('the') ? 'true' : 'false' }}\n\n#### Titleize\n\nConverts a string to \"Title Case\" format\n\n`'welcome page'|titleize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'welcome page'|titleize }}**\n\n\n#### Translate\n\nTranslate a string into the current language\n\n`'MY_LANGUAGE_KEY_STRING'|t` <i class=\"fa fa-long-arrow-right\"><\/i> 'Some Text in English'\n\nThis assumes you have these language strings translated in your site and have enabled multi-language support.  Please refer to the [multi-language documentation](..\/..\/content\/multi-language) for more detailed information.\n\n#### Translate Admin\n\nTranslate a string into the current language set in the admin interface user preferences\n\n`'MY_LANGUAGE_KEY_STRING'|tu` <i class=\"fa fa-long-arrow-right\"><\/i> 'Some Text in English'\n\nThis uses the language field set in the user yaml.\n\n#### Translate Array\n\nTranslates an array with a language use the `|ta` filter. See the [multi-language documentation](..\/..\/content\/multi-language) for a detailed example.\n\n`'MONTHS_OF_THE_YEAR'|ta(post.date|date('n') - 1)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ now|date('F') }}**\n\n#### Translate Language\n\nTranslates a string in a specific language. For more details check out the [multi-language documentation](..\/..\/content\/multi-language#complex-translations).\n\n`'SIMPLE_TEXT'|tl(['fr'])`\n\n#### Truncate a String\n\nYou can easily generate a shortened, truncated, version of a string by using this filter.  It takes a number of characters as the only required field, but has some other options:\n\n`'one sentence. two sentences'|truncate(5)` <i class=\"fa fa-long-arrow-right\"><\/i> {{ 'one sentence. two sentences'|truncate(5) }}\n\nSimply truncates to 5 characters.\n\n`'one sentence. two sentences'|truncate(5, true)` <i class=\"fa fa-long-arrow-right\"><\/i> {{ 'one sentence. two sentences'|truncate(5, true) }}\n\nTruncates to closest sentence-end after 5 characters.\n\nYou can also truncate HTML text, but should first use the `striptags` filter to remove any HTML formatting that could get broken if you end between tags:\n\n`'<p>one <strong>sentence<strong>. two sentences<\/p>'|striptags|truncate(5)` <i class=\"fa fa-long-arrow-right\"><\/i> {{ '<p>one <strong>sentence<strong>. two sentences<\/p>'|striptags|truncate(5) }}\n\n##### Specialized versions:\n\n**|safe_truncate**\n\nTruncate text by number of characters in a \"word-safe\" manner.\n\n**|truncate_html**\n\nTruncate HTML by number of characters. not \"word-safe\"!\n\n**|safe_truncate_html**\n\nTruncate HTML by number of characters in a \"word-safe\" manner.\n\n#### Underscoreize\n\nConverts a string into \"under_scored\" format\n\n`'CamelCased'|underscorize` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ 'CamelCased'|underscorize }}**\n\n[version=16]\n#### Yaml Encode\n\nDump\/Encode a variable into YAML syntax\n\n`{foo: [0,1,2,3], baz: 'qux' }|yaml_encode` \n\n[prism classes=\"language-twig\"]\n{{ {foo: [0,1,2,3], baz: 'qux' }|yaml_encode }}\n[\/prism]\n\n#### Yaml Decode\n\nDecode\/Parse a varible from YAML syntax\n\n{% verbatim %}\n`{% set yaml = \"foo: [0, 1, 2, 3]\\nbaz: qux\" %}`\n\n`yaml|yaml_decode` \n{% endverbatim %}\n\n{% set yaml = \"foo: [0, 1, 2, 3]\\nbaz: qux\" %}\n[prism classes=\"language-twig\"]\n{{ yaml|yaml_decode|var_dump}}\n[\/prism]\n[\/version]\n\n\n## Grav Twig Functions\n\nTwig functions are called directly with any parameters being passed in via parenthesis.\n\n#### Array\n\nCast a value to array\n\n`array(value)`\n\n#### Array Key Value\n\nThe `array_key_value` function allows you to add a key\/value pair to an associate array\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set my_array = {fruit: 'apple'} %}\n{% set my_array = array_key_value('meat','steak', my_array) %}\n{{ print_r(my_array)}}\n[\/prism]\n{% endverbatim %}\n\n{% set my_array = {fruit: 'apple'} %}\n{% set my_array = array_key_value('meat','steak', my_array) %}\noutputs: ** {{ print_r(my_array) }} **\n\n#### Array Key Exists\n\nWrapper for PHP's `array_key_exists` function that returns whether or not a key exists in an associative array.\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set my_array = {fruit: 'apple', meat: 'steak'} %}\n{{ array_key_exists('meat', my_array) }}\n[\/prism]\n{% endverbatim %}\n\n{% set my_array = {fruit: 'apple', meat: 'steak'} %}\noutputs: **{{ array_key_exists('meat', my_array) }}**\n\n#### Array Intersect\n\nThe `array_intersect` function provides the intersection of two arrays or Grav collections.\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set array_1 = {fruit: 'apple', meat: 'steak'} %}\n{% set array_2 = {fish: 'tuna', meat: 'steak'} %}\n{{ print_r(array_intersect(array_1, array_2)) }}\n[\/prism]\n{% endverbatim %}\n\n{% set array_1 = {fruit: 'apple', meat: 'steak'} %}\n{% set array_2 = {fish: 'tuna', meat: 'steak'} %}\n\noutputs: **{{ print_r(array_intersect(array_1, array_2)) }}**\n\n#### Array Unique\n\nWrapper for PHP `array_unique()` that removes duplicates from an array.\n\n`array_unique(['foo', 'bar', 'foo', 'baz'])` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ print_r(array_unique(['foo', 'bar', 'foo', 'baz'])) }}**\n\n#### Authorize\n\nAuthorizes an authenticated user to see a resource. Accepts a single permission string or an array of permission strings.\n\n`authorize(['admin.statistics', 'admin.super'])`\n\n[version=16]\n#### Body Class\n\nTakes an array of classes, and if they are not set on `body_classes` look to see if they are set in current theme configuration.\n\n`set body_classes = body_class(['header-fixed', 'header-animated', 'header-dark', 'header-transparent', 'sticky-footer'])`\n\n#### Cron\n\nCreate a \"Cron\" object from cron syntax\n\n`cron(\"3 * * * *\").getNextRunDate()|date(config.date_format.default)`\n\n[\/version]\n\n\n#### Dump\n\nTakes a valid Twig variable and dumps it out into the [Grav debugger panel](..\/..\/advanced\/debugging).  The debugger must be **enabled** to see the values in the messages tab.\n\n`dump(page.header)`\n\n#### Debug\n\nSame as `dump()`\n\n#### Evaluate\n\nThe evaluate function can be used to evaluate a string as Twig:\n\n`evaluate('grav.language.getLanguage')`\n\n#### Evaluate Twig\n\nSimilar to evaluate, but will evaluate and process with Twig\n\n{% verbatim %}\n`evaluate_twig({foo: 'bar'}, 'This is a twig variable: {{ foo }}')`)  <i class=\"fa fa-long-arrow-right\"><\/i> **This is a twig variable: bar**\n{% endverbatim %}\n\n#### EXIF\n\nOutput the EXIF data from an image based on its filepath. This requires that `media: auto_metadata_exif: true` is set in `system.yaml`. For example, in a Twig-template:\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set image = page.media['sample-image.jpg'] %}\n{% set exif = exif(image.filepath, true) %}\n{{ exif.MaxApertureValue }}\n[\/prism]\n{% endverbatim %}\n\nThis would write the `MaxApertureValue`-value set in the camera, for example \"40\/10\". You can always use `{% verbatim %}{{ dump(exif)}}{% endverbatim %}` to show all the available data in the debugger.\n\n#### Get Cookie\n\nRetrieve the value of a cookie with this function:\n\n`get_cookie('your_cookie_key')`\n\n[version=16]\n#### Get Type Function\n\nGets the type of a variable:\n\n`get_type(page)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ get_type(page) }}**\n[\/version]\n\n#### Gist\n\nTakes a Github Gist ID and creates appropriate Gist embed code\n\n`gist('bc448ff158df4bc56217')` <i class=\"fa fa-long-arrow-right\"><\/i> {{ gist('bc448ff158df4bc56217')}}\n\n[version=16]\n#### HTTP Response Code\n\nIf response_code is provided, then the previous status code will be returned. If response_code is not provided, then the current status code will be returned. Both of these values will default to a 200 status code if used in a web server environment.\n\n`http_response_code(404)`\n\n[\/version]\n\n#### Is Ajax Request\n\nthe `isajaxrequest()` function can be used to check if `HTTP_X_REQUESTED_WITH` header option is set:\n\n\n#### JSON Decode Function\n\nYou can decode JSON by simply applying this filter:\n\n`json_decode({\"first_name\": \"Guido\", \"last_name\":\"Rossum\"})`\n\n#### Media Directory\n\nReturns a media object for an arbitrary directory.  Once obtained you can manipulate images in a similar fashion to pages.\n\n`media_directory('theme:\/\/images')['some-image.jpg'].cropResize(200,200).html`\n\n[version=16]\n#### NiceFilesize Function\n\nOutput a file size in a human readable nice size format\n\n`nicefilesize(612394)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ nicefilesize(612394) }}**\n\n#### NiceNumber Function\n\nOutput a number in a human readable nice number format\n\n`nicenumnber(12430)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ nicenumber(12430)}}**\n\n#### NiceTime Function\n\nOutput a date in a human readable nice time format\n\n`nicetime(page.date)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ nicetime(page.date) }}**\n[\/version]\n\n#### Nonce Field\n\nGenerate a Grav security nonce field for a form with a required `action`:\n\n`nonce_field('action')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ nonce_field('action')|e }}**\n\n[version=16]\n#### Of Type Function\n\nChecks the type of a variable to the param:\n\n`of_type(page, 'string')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ of_type(page, 'string') ? 'true' : 'false' }}**\n[\/version]\n\n#### Pathinfo\n\nParses a path into an array.\n\n{% verbatim %}\n[prism classes=\"language-twig\"]\n{% set parts = pathinfo('\/www\/htdocs\/inc\/lib.inc.php') %}\n{{ print_r(parts) }}\n[\/prism]\n{% endverbatim %}\n\n{% set parts = pathinfo('\/www\/htdocs\/inc\/lib.inc.php') %}\n\noutputs: **{{ print_r(parts) }}**\n\n[version=16]\n#### Print Variable Function\n\nPrints a variable in a readable format\n\n`print_r(page.header)`\n\n[prism classes=\"language-twig\"]\n{{ print_r(page.header) }}\n[\/prism]\n\n[\/version]\n\n#### Random String Generation\n\nWill generate a random string of the required number of characters.  Particularly useful in creating a unique id or key.\n\n`random_string(10)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ random_string(10) }}**\n\n#### Range\n\nGenerates an array containing a range of elements, optionally stepped\n\n`range(25, 300, 50)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ print_r(range(25, 300, 50)) }}**\n\n[version=16]\n#### Read File\n\nSimple function to read a file based on a filepath and output it.\n\n`read_file('plugins:\/\/admin\/README.md')|markdown`\n\n[prism classes=\"language-markdown line-numbers\"]\n# Grav Standard Administration Panel Plugin\n\nThis **admin plugin** for [Grav](http:\/\/github.com\/getgrav\/grav) is an HTML user interface that provides a convenient way to configure Grav and easily create and modify pages...\n[\/prism]\n\n[\/version]\n\n#### Redirect Me\n\nRedirects to a URL of your choosing\n\n`redirect_me('http:\/\/google.com', 304)`\n\n[version=16]\n#### Regex Filter Function\n\nPerforms a `preg_grep` on an array with a regex pattern\n\n`regex_filter(['pasta', 'fish', 'steak', 'potatoes'], \"\/p.*\/\")` \n\n[prism classes=\"language-twig\"]\n{{ var_dump(regex_filter(['pasta', 'fish', 'steak', 'potatoes'], \"\/p.*\/\")) }}\n[\/prism]\n\n#### Regex Replace Function\n\nA helpful wrapper for the PHP [preg_replace()](http:\/\/php.net\/manual\/en\/function.preg-replace.php) method, you can perform complex Regex replacements on text via this filter:\n\n`regex_replace('The quick brown fox jumps over the lazy dog.', ['\/quick\/','\/brown\/','\/fox\/','\/dog\/'], ['slow','black','bear','turtle'])` \n\n[prism classes=\"language-twig\"]\n{{ regex_replace('The quick brown fox jumps over the lazy dog.', ['\/quick\/','\/brown\/','\/fox\/','\/dog\/'], ['slow','black','bear','turtle']) }}\n[\/prism]\n\n[\/version]\n\n#### Repeat\n\nWill repeat whatever is passed in a certain amount of times.\n\n`repeat('blah ', 10)` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ repeat('blah ', 10) }}**\n\n#### String\n\nReturns a string from a value. If the value is array, return it json encoded\n\n`string(23)` => `\"23\"`\n`string(['test' => 'x'])` => `{\"test\":\"x\"}`\n\n[version=16]\n#### Theme Variable\n\nGet a theme variable from the page header if it exists, else use the theme config:\n\n`theme_var('grid-size')`\n\nThis will first try `page.header.grid-size`, if that is not set, it will try `theme.grid-size` from the theme configuration file.  it can optionally take a default:\n\n`theme_var('grid-size', 1024)`\n\n[\/version]\n\n#### Translate Function\n\nTranslate a string, as the `|t` filter.\n\n`t('SITE_NAME')` <i class=\"fa fa-long-arrow-right\"><\/i> **Site Name**\n\n#### Translate Array Function\n\nFunction related to the `|ta` filter.\n\n#### Translate Language Function\n\nTranslates a string in a specific language. For more details check out the [multi-language documentation](..\/..\/content\/multi-language#complex-translations).\n\n`tl('SIMPLE_TEXT', ['fr'])`\n\n#### Url\n\nWill create a URL and convert any PHP URL streams into a valid HTML resources. A default value can be passed in in case the URL cannot be resolved.\n\n`url('theme:\/\/images\/logo.png')|default('http:\/\/www.placehold.it\/150x100\/f4f4f4')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ url('theme:\/\/images\/logo.png')|default('http:\/\/www.placehold.it\/150x100\/f4f4f4') }}**\n\n#### VarDump\n\nThe `vardump()` function outputs the current variable to the screen (rather than in the debugger as with `dump()`)\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% set my_array = {foo: 'bar', baz: 'qux'} %}\n{{ vardump(my_array)}}\n[\/prism]\n{% endverbatim %}\n\n{% set my_array = {foo: 'bar', baz: 'qux'} %}\n{{ vardump(my_array)}}\n\n[version=16]\n#### XSS\n\nAllow a manual check of a string for XSS vulnerabilities\n\n`xss('this string contains a <script>alert(\"hello\");<\/script> XSS vulnerability')` <i class=\"fa fa-long-arrow-right\"><\/i> **{{ xss('this string contains a <script>alert(\"hello\");<\/script> XSS vulnerability') }}**\n\n[\/version]\n"},{"title":"Twig Primer","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/twig-primer","taxonomy":{"categories":["docs"],"tags":[]},"content":"Twig is a quick, optimized template engine for PHP. It is designed from the ground up to make creating templates easier on both the developer and the designer.\n\nIts easy-to-follow syntax and straightforward processes make it a natural fit for anyone familiar with Smarty, Django, Jinja, Liquid, or Stencil.\n\nWe use it for our Grav templates in part because of its flexibility and inherent security. The fact that it is also one of the fastest template engines for PHP out there made choosing it for use in Grav a no brainer.\n\nTwig compiles templates down to plain PHP. This cuts the amount of PHP overhead down to a minimum, resulting in a faster, more streamlined user experience.\n\nIt is also a very flexible engine thanks to its *lexer* and *parser*. This enables the developer to create their own custom tags and filters. It also enables it to create its own [domain-specific language](http:\/\/en.wikipedia.org\/wiki\/Domain-specific_language) (DSL).\n\nWhen it comes to security, Twig doesn't cut any corners. It gives the developer a sandbox mode that enables them to examine any untrusted code. This gives you the ability to use Twig as a template language for applications while giving users the ability to modify the template design.\n\nBasically, it is a powerful engine that gives you control over the user interface. When combined with YAML for configuration, it makes for a powerful and simple system for any developer or site manager to work with.\n\n## How Does Twig Work?\n\nTwig works by taking all the hocus pocus out of template design. Templates are basically just text files that contain *variables* or *expressions* that are replaced by values as the template is evaluated.\n\n*Tags* are also an important part of a template file, as these control the logic of the template itself.\n\nTwig has two primary language constraints.\n\n* `{{ }}` prints the result of an expression evaluation;\n* `{% %}` executes statements.\n\nHere is a basic template created using Twig:\n\n[prism classes=\"language-html line-numbers\"]\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>All About Cookies<\/title>\n    <\/head>\n    <body>\n        My name is {{ name }} and I love cookies.\n        My favorite flavors of cookies are:\n        <ul>\n        {% for cookie in cookies %}\n            <li>{{ cookie.flavor }}<\/li>\n\t\t{% endfor %}\n        <\/ul>\n        <h1>Cookies are the best!<\/h1>\n    <\/body>\n<\/html>\n[\/prism]\n\nIn this example, we set the title of the site up as you would with any standard Web page. The difference is that we were able to use simple Twig syntax to present the author's name and create a dynamic list of types of items.\n\nA template is first loaded, then passed through the **lexer** where its source code is tokenized and broken up into small pieces. At this point, the **parser** takes the tokens and turns them into the abstract syntax tree.\n\nOnce this is done, the compiler turns this into PHP code that can then be evaluated and displayed to the user.\n\nTwig can also be extended to add additional tags, filters, tests, operators, global variables, and functions. More information about extending Twig can be found in its [official documentation](http:\/\/twig.sensiolabs.org\/doc\/advanced.html).\n\n## Twig Syntax\n\nA Twig template has several key components that help it to understand what it is you would like to do. These include tags, filters, functions, and variables.\n\nLet's take a closer look at these important tools and how they can help you build an incredible template.\n\n### Tags\n\nTags tell Twig what it needs to do. It allows you to set which code Twig should handle, and which code it should ignore during evaluation.\n\nThere are several different kinds of tags, and each has its own specific syntax that sets them apart.\n\n#### Comment Tags\n\nComment tags (`{# Insert Comment Here #}`) are used to set comments that exist within the Twig template file, but aren't actually seen by the end user. They are removed during evaluation, and are neither parsed nor output.\n\nA good use of these tags is to explain what a specific line of code or command does so that another developer or designer on your team can quickly read and understand.\n\nHere is an example of a comment tag as you would find it in a Twig template file:\n\n[prism classes=\"language-twig\"]\n{# Chocolate Chip Cookies are great! Don't tell anyone! #}\n[\/prism]\n\n#### Output Tags\n\nOutput tags (`{{ Insert Output Here }}`) will be evaluated and added to the generated output. This is where you would put anything you want to appear on the front end, or in some other generated content.\n\nHere is an example of output tags being used in a Twig template:\n\n[prism classes=\"language-twig\"]\nMy name is {{ name }} and I love cookies.\n[\/prism]\n\nThe variable `name` has been inserted into this line and will appear to the end user as `My name is Jake and I love cookies.` as `Jake` was the value of the name variable.\n\n#### Action Tags\n\nAction tags are the go-getters of the Twig world. These tags actually do something, as opposed to the others which either pass something along or sit idly in the source code waiting for a designer to read it.\n\nAction tags set variables, loop through arrays, and test conditionals. Your `for` and `if` statements are made using these tags.\n\nThis is what an action tag might look like in a Twig template:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set hour = now | date(\"G\") %}\n{% if hour >= 9 and hour < 17 %}\n    <p>Time for cookies!<\/p>\n{% else %}\n    <p>Time to bake more cookies!<\/p>\n{% endif %}\n[\/prism]\n\nThe initial action tag sets the hour as the current hour in a 24-hour clock. That value is then used to gauge whether it is between 9am and 5pm. If it is, `Time for cookies!` is displayed. If it isn't, `Time to bake more cookies!` is displayed, instead.\n\nIt is very important that tags not overlap one another. You can't put an output tag inside of an action tag, or vice versa.\n\n### Filters\n\nFilters are useful, especially when you are using the output tags to display data that might not be formatted the way you want it.\n\nLet's say the value of the `name` variable might include unwanted SGML\/XML tags. You can filter them out using the code below:\n\n[prism classes=\"language-twig\"]\n{{ name|striptags }}\n[\/prism]\n\n### Functions\n\nFunctions can generate content. They are typically followed by arguments, which appear within parenthesis placed directly after the function call. Even if no argument is present, the function will still have a `()` parenthesis placed directly after it.\n\n[prism classes=\"language-twig line-numbers\"]\n{% if date(cookie.created_at) < date('-2days') %}\n    {# Eat it! #}\n{% endif %}\n[\/prism]\n\n## Resources\n\n* [Official Twig Documentation](http:\/\/twig.sensiolabs.org\/documentation)\n* [Twig for Template Designers](http:\/\/twig.sensiolabs.org\/doc\/templates.html)\n* [Twig for Developers](http:\/\/twig.sensiolabs.org\/doc\/api.html)\n* [6 Minute Video Introduction to Twig](http:\/\/www.dev-metal.com\/6min-video-introduction-twig-php-templating-engine\/)\n* [Introduction to Twig](http:\/\/www.slideshare.net\/markstory\/introduction-to-twig)\n* [Twig: The Basics (free intro to paid course)](https:\/\/knpuniversity.com\/screencast\/twig\/basics)\n"},{"title":"Theme Tutorial","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/theme-tutorial","taxonomy":{"categories":["docs"],"tags":[]},"media":["pure-theme.png"],"content":"Often, the best way to learn a new thing is to use an example, and then try to build your own creation from it. We are going to use this same methodology for creating a new Grav theme.\n\n## Antimatter\n\nGrav comes with a clean and modern theme called **Antimatter** which uses a simple base set of CSS styling that we call **Nucleus**.\n\nNucleus is a lightweight CSS framework that contains the essential CSS resets and styling for layout and HTML markup without any over-bearing design.  Antimatter has some custom styling on top of the Nucleus framework to give it a unique look and feel.\n\nHowever, it's often better to start from something even simpler.\n\n## Pure.css\n\nFor the sake of this tutorial, we will create a theme that utilizes the popular [Pure.css framework](http:\/\/purecss.io\/)  developed by Yahoo!\n\nPure is a small, fast, and responsive CSS framework that contains the basics to get you developing your site without the overhead of larger frameworks such as [Bootstrap](http:\/\/getbootstrap.com\/css\/) or [Foundation](http:\/\/foundation.zurb.com\/). It contains several modules that can be used independently, but all together the resulting package is only **4.0KB minified and gzipped**!\n\nYou can read up on all the features Pure brings to the table on the [Pure.css project site](http:\/\/purecss.io\/).\n\n## Step 1 - Install DevTools Plugin\n\n!! Previous versions of this tutorial required creating a base theme by default.  This whole process can be skipped thanks to our new **DevTools Plugin**\n\nThe first step in creating a new theme is to **install the DevTools Plugin**.  This can be done in two ways.\n\n#### Install via CLI GPM\n\n* Navigate in the command line to the root of your Grav installation\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm install devtools\n[\/prism]\n\n#### Install via Admin Plugin\n\n* After logging in, simply navigate to the **Plugins** section from the sidebar.\n* Click the <i class=\"fa fa-plus\"><\/i> **Add** button in the top right.\n* Find **DevTools** in the list and click the <i class=\"fa fa-plus\"><\/i> **Install** button.\n\n## Step 2 - Create Base Theme\n\nFor this next step you really do need to be in the [command line](\/cli-console\/command-line-intro) as the DevTools provide a couple of CLI commands to make the process of creating a new theme much easier!\n\nFrom the root of your Grav installation enter the following command:\n\n[prism classes=\"language-bash command-line\"]\nbin\/plugin devtools new-theme\n[\/prism]\n\nThis process will ask you a few questions that are required to create the new theme:\n\n! We're going to use **pure-blank** to create a new theme, but you can create a simple **inheritance** style template that inherits from another base theme\n\n[prism classes=\"language-bash command-line\" cl-output=\"2-15\"]\nbin\/plugin devtools new-theme\n\nEnter Theme Name: MyTheme\nEnter Theme Description: My New Theme\nEnter Developer Name: Acme Corp\nEnter Developer Email: contact@acme.co\nPlease choose a template type\n  [pure-blank ] Basic Theme using Pure.css\n  [inheritance] Inherit from another theme\n  [copy       ] Copy another theme\n > pure-blank\n\nSUCCESS theme mytheme -> Created Successfully\n\nPath: \/www\/user\/themes\/my-theme\n[\/prism]\n\nThe DevTools command tells you where this new template was created. This created template is fully functional but also very simple.  You will want to modify this to suite your needs.\n\nIn order to see your new theme in action, you will need to change the default theme from `antimatter` to `my-theme`, so edit your `user\/config\/system.yaml` and change it:\n\n[prism classes=\"language-yaml line-numbers\"]\n...\npages:\n    theme: my-theme\n...\n[\/prism]\n\nReload your site in your browser and you should see the theme has now changed.\n\n## Step 3 - Theme Basics\n\nNow we've created a new basic theme that can be modified and developed, let's break it down and have a look at what makes up a theme.  If you look in the `user\/themes\/my-theme` folder you will see:\n\n[prism classes=\"language-text\"]\n.\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 blueprints.yaml\n\u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 custom.css\n\u251c\u2500\u2500 fonts\n\u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 js\n\u251c\u2500\u2500 my-theme.php\n\u251c\u2500\u2500 my-theme.yaml\n\u251c\u2500\u2500 screenshot.jpg\n\u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.html.twig\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 error.html.twig\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 partials\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 base.html.twig\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 header.html.twig\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 metadata.html.twig\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 navigation.html.twig\n\u2514\u2500\u2500 thumbnail.jpg\n[\/prism]\n\nThis is a sample structure but some things are required:\n\n### Required Items to Function\n\nThese items are critical and your theme will not function reliably unless you include these in your theme.\n\n* **`blueprints.yaml`** - The configuration file used by Grav to get information on your theme. It can also define a form that the admin can display when viewing the theme details.  This form will let you save settings for the theme. [This file is documented in the Forms section](\/forms\/blueprints).\n* **`my-theme.php`** - This file will be named according to your theme, but can be used to house any logic your theme needs.  You can use any [plugin event hook](\/plugins\/event-hooks) except `onPluginsInitialized()`, however there is a theme specific `onThemeInitialized()` hook specific for themes that you can use instead.\n* **`my-theme.yaml`** - This is the configuration used by the plugin to set options the theme might use.\n* **`templates\/`** - This is a folder that contains the Twig templates to render your pages.\n\n### Required Items for Release\n\nThese items are required if you wish to release your theme via GPM.\n\n* **`CHANGELOG.md`** - A file that follows the [Grav Changelog Format](\/advanced\/grav-development#changelog-format) to show changes in releases.\n* **`LICENSE`** - a license file, should probably be MIT unless you have a specific need for something else.\n* **`README.md`** - A 'Readme' that should contain any documentation for the theme.  How to install it, configure it, and use it.\n* **`screenshot.jpg`** - 1009px x 1009px screenshot of the theme.\n* **`thumbnail.jpg`** - 300px x 300px screenshot of the theme.\n\n\n## Step 4 - Base Template\n\nAs you know from the [previous chapter](..\/theme-basics), each item of content in Grav has a particular filename, e.g. `default.md`, which instructs Grav to look for a rendering Twig template called `default.html.twig`.  It is possible to put everything you need to display a page in this one file, and it would work fine. However, there is a better solution.\n\nUtilizing the Twig [Extends](http:\/\/twig.sensiolabs.org\/doc\/tags\/extends.html) tag you can define a base layout with [blocks](http:\/\/twig.sensiolabs.org\/doc\/tags\/block.html) that you define. This enables any twig template to **extend** the base template, and provides definitions for any **block** defined in the base.  So look at the `templates\/default.html.twig` file and examine its content:\n\n[prism classes=\"language-twig line-numbers\"]\n{% extends 'partials\/base.html.twig' %}\n\n{% block content %}\n    {{ page.content }}\n{% endblock %}\n[\/prism]\n\nThere are really two things going on here.\n\nFirst, the template extends a template located in `partials\/base.html.twig`.\n\n! You don't need to include `templates\/` within Twig templates as Twig is already looking in `templates\/` as the root level for any template.\n\nSecond, the block `content` is overridden from the base template, and the page's content is output in its place.\n\n!! For consistency, it's a good idea to use the `templates\/partials` folder to contain Twig templates that represent either little chunks of HTML, or are shared. We also use `templates\/modular` for modular templates, and `templates\/forms` for any forms.  You can create any sub-folders you like if you prefer to organize your templates differently.\n\nIf you look at the `templates\/partials\/base.html.twig` you will see the meat of the HTML layout:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set theme_config = attribute(config.themes, config.system.pages.theme) %}\n<!DOCTYPE html>\n<html lang=\"{{ grav.language.getActive ?: theme_config.default_lang }}\">\n<head>\n{% block head %}\n    <meta charset=\"utf-8\" \/>\n    <title>{% if header.title %}{{ header.title|e('html') }} | {% endif %}{{ site.title|e('html') }}<\/title>\n\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    {% include 'partials\/metadata.html.twig' %}\n\n    <link rel=\"icon\" type=\"image\/png\" href=\"{{ url('theme:\/\/images\/logo.png') }}\" \/>\n    <link rel=\"canonical\" href=\"{{ page.url(true, true) }}\" \/>\n\n    {% block stylesheets %}\n        {% do assets.addCss('http:\/\/yui.yahooapis.com\/pure\/0.6.0\/pure-min.css', 100) %}\n        {% do assets.addCss('https:\/\/maxcdn.bootstrapcdn.com\/font-awesome\/4.5.0\/css\/font-awesome.min.css', 99) %}\n        {% do assets.addCss('theme:\/\/css\/custom.css', 98) %}\n    {% endblock %}\n    {{ assets.css() }}\n\n    {% block javascripts %}\n        {% do assets.addJs('jquery', 100) %}\n    {% endblock %}\n    {{ assets.js() }}\n\n{% endblock head%}\n<\/head>\n<body id=\"top\" class=\"{{ page.header.body_classes }}\">\n\n{% block header %}\n    <div class=\"header\">\n        <div class=\"wrapper padding\">\n            <a class=\"logo left\" href=\"{{ base_url == '' ? '\/' : base_url }}\">\n                <i class=\"fa fa-rebel\"><\/i>\n                {{ config.site.title }}\n            <\/a>\n            {% block header_navigation %}\n            <nav class=\"main-nav\">\n                {% include 'partials\/navigation.html.twig' %}\n            <\/nav>\n            {% endblock %}\n        <\/div>\n    <\/div>\n{% endblock %}\n\n{% block body %}\n    <section id=\"body\">\n        <div class=\"wrapper padding\">\n        {% block content %}{% endblock %}\n        <\/div>\n    <\/section>\n{% endblock %}\n\n{% block footer %}\n    <div class=\"footer text-center\">\n        <div class=\"wrapper padding\">\n            <p><a href=\"https:\/\/getgrav.org\">Grav<\/a> was <i class=\"fa fa-code\"><\/i> with <i class=\"fa fa-heart\"><\/i> by <a href=\"http:\/\/www.rockettheme.com\">RocketTheme<\/a>.<\/p>\n        <\/div>\n    <\/div>\n{% endblock %}\n\n{% block bottom %}\n    {{ assets.js('bottom') }}\n{% endblock %}\n\n<\/body>\n[\/prism]\n\n## Step 5 - Breaking it Down\n\nPlease read over the code in the `base.html.twig` file to try to understand what is going on.  There are several key things to note:\n\n1. A `theme_config` variable is set with the theme configuration.  Because Twig doesn't work well with dashes retrieve variables with dashes (e.g. `config.themes.my-theme`), we use the `attribute()` Twig function to dynamically retrieve the `my-theme` data from `config.themes`.\n\n1. The `<html lang=...` item is set based on Grav's active language if enabled, else it uses the `default_lang` as set in the `theme_config`.\n\n1. The `{% block head %}{% endblock head %}` syntax defines an area in the base Twig template. Note that the use of `head` in the `{% endblock head %}` tag is not required, but is used here for readability. In this block we put things that are typically located in the HTML `<head>` tag.\n\n1. The `<title>` tag is dynamically set based on the page's `title` variable as set in the page header.  The `header.title` is a shortcut method but is equivalent to `page.header.title`.\n\n1. After a couple of standard meta tags are set, there is a reference to include `partials\/metadata.html.twig`.  This file contains a loop that loops over the page's metadata.  This is actually a merge of metadata from `site.yaml` and any page-specific overrides.\n\n1. The `<link rel=\"icon\"...` entry is set by pointing to a theme-specific image.  In this case it's located in theme directory under `images\/logo.png`.  The syntax for this is `{{ url('theme:\/\/images\/logo.png') }}`.\n\n1. The `<link rel=\"canonical\"...` entry sets a canonical URL for the page that is always set to the full URL of the page via `{{ page.url(true, true) }}`.\n\n1. Now we define a block called `stylesheets`, and in here we use the [Asset Manager](\/themes\/asset-manager) to add several assets.  The first one loads the Pure.css framework.  The second one loads [FontAwesome](http:\/\/fontawesome.io\/) to provide useful icons.  The last entry points to a `custom.css` file in the theme's `css\/` folder.  In here are a few useful styles to get you started, but you can add more here.  Also you can add other CSS file entries as needed.\n\n1. The `{{ assets.css() }}` call is what triggers the template to render all the CSS link tags.\n\n1. The `javascripts` block, like the `stylesheets` block is a good place to put your JavaScript files.  In this example, we only add the 'jquery' library which is already bundled with Grav, so you don't need to provide a path to it.\n\n1. The `{{ assets.js() }}` will render all the JavaScript tags.\n\n1. The `<body>` tag has a class attribute that will output anything you set in the `body_classes` variable of the page's frontmatter.\n\n1. The `header` block has a few things that output the HTML header of the page.  One important thing to note is the logo is hyperlinked to the `base_url` with the logic: `{{ base_url == '' ? '\/' : base_url }}`.  This is to ensure that if there is no subdirectory, the link is just `\/`.\n\n1. The title of the site is output as the logo in this example theme with `{{ config.site.title }}` but you could just replace this with a `<img>` tag to a logo if you wanted.\n\n1. The `<nav>` tag actually contains a link to `partials\/navigation.html.twig` that contains the logic to loop over any **visible** pages and display them as a menu.  By default it supports dropdown menus for nested pages, but this can be turned off via the theme's configuration.  Have a look in this navigation file to get an idea of how the menu is generated.\n\n1. The use of `{% block content %}{% endblock %}` provides a placeholder that allows us to provide content from a template that extends this one. Remember we overrode this in `default.html.twig` to output the page's content.\n\n1. The `footer` block contains a simple footer, you can easily modify this for your needs.\n\n1. Similar to the content block, the `{% block bottom %}{% endblock %}` is intended as a placeholder for templates to add custom JavaScript initialization or analytic codes. In this example, we output any JavaScript that was added to the `bottom` Asset Group.  Read more about this in the [Asset Manager](\/themes\/asset-manager) documentation.\n\n\n## Step 6 - Theme CSS\n\nYou might have noticed that in the `partials\/base.html.twig` file we made reference to a custom theme css via Asset Manager: `do assets.add('theme:\/\/css\/custom.css', 98)`.  This file will house any custom CSS we need to fill in the gaps not provided by the Pure.css framework.  As Pure is a very minimal framework, it provides the essentials but almost no styling.\n\n1. In your `user\/themes\/my-theme\/css` folder, view the `custom.css`:\n\n[prism classes=\"language-css line-numbers\"]\n\/* Core Stuff *\/\n* {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\nbody {\n    font-size: 1rem;\n    line-height: 1.7;\n    color: #606d6e;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    color: #454B4D;\n}\n\na {\n    color: #1F8CD6;\n    text-decoration: none;\n}\n\na:hover {\n    color: #175E91;\n}\n\npre {\n    background: #F0F0F0;\n    margin: 1rem 0;\n    border-radius: 2px;\n}\n\nblockquote {\n    border-left: 10px solid #eee;\n    margin: 0;\n    padding: 0 2rem;\n}\n\n\/* Utility Classes *\/\n.wrapper {\n    margin: 0 3rem;\n}\n\n.padding {\n    padding: 3rem 1rem;\n}\n\n.left {\n    float: left;\n}\n\n.right {\n    float: right\n}\n\n.text-center {\n    text-align: center;\n}\n\n.text-right {\n    text-align: right;\n}\n\n.text-left {\n    text-align: left;\n}\n\n\/* Content Styling *\/\n.header .padding {\n    padding: 1rem 0;\n}\n\n.header {\n    background-color: #1F8DD6;\n    color: #eee;\n}\n\n.header a {\n    color: #fff;\n}\n\n.header .logo {\n    font-size: 1.7rem;\n    text-transform: uppercase;\n}\n\n.footer {\n    background-color: #eee;\n}\n\n\/* Menu Settings *\/\n.main-nav ul {\n    text-align: center;\n    letter-spacing: -1em;\n    margin: 0;\n    padding: 0;\n}\n\n.main-nav ul li {\n    display: inline-block;\n    letter-spacing: normal;\n}\n\n.main-nav ul li a {\n    position: relative;\n    display: block;\n    line-height: 45px;\n    color: #fff;\n    padding: 0 20px;\n    white-space: nowrap;\n}\n\n.main-nav > ul > li > a {\n    border-radius: 2px;\n}\n\n\/*Active dropdown nav item *\/\n.main-nav ul li:hover > a {\n    background-color: #175E91;\n}\n\n\/* Selected Dropdown nav item *\/\n.main-nav ul li.selected > a {\n    background-color: #fff;\n    color: #175E91;\n}\n\n\/* Dropdown CSS *\/\n.main-nav ul li {position: relative;}\n\n.main-nav ul li ul {\n    position: absolute;\n    background-color: #1F8DD6;\n    min-width: 100%;\n    text-align: left;\n    z-index: 999;\n\n    display: none;\n}\n.main-nav ul li ul li {\n    display: block;\n}\n\n\/* Dropdown CSS *\/\n.main-nav ul li ul ul {\n    left: 100%;\n    top: 0;\n}\n\n\/* Active on Hover *\/\n.main-nav li:hover > ul {\n    display: block;\n}\n\n\/* Child Indicator *\/\n.main-nav .has-children > a {\n    padding-right: 30px;\n}\n.main-nav .has-children > a:after {\n    font-family: FontAwesome;\n    content: '\\f107';\n    position: absolute;\n    display: inline-block;\n    right: 8px;\n    top: 0;\n}\n\n.main-nav .has-children .has-children > a:after {\n    content: '\\f105';\n}\n\n[\/prism]\n\nThis is pretty standard CSS stuff and sets some basic margins, fonts, colors, and utility classes. There is some basic content styling and some more extensive styling required to render the drop-down menu.  Feel free to modify this file as you need, or even add new CSS files (just ensure you add a reference in the `head` block by following the example for `custom.css`).\n\n## Step 7 - Testing\n\nTo see your theme in action, open your browser, and point it to your Grav site.  You should see something like this:\n\n![](pure-theme.png?lightbox&resize=800,600)\n\nCongratulations, you have created your first theme!\n"},{"title":"Theme Basics","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/themes\/theme-basics","taxonomy":{"categories":["docs"],"tags":[]},"media":["theme-folders.png"],"content":"Themes in Grav are quite simple, and very flexible because they are built with the powerful [Twig Templating engine](https:\/\/twig.sensiolabs.org\/). Every theme is created with a combination of twig files (a mixture of twig-like PHP code and HTML), called templates, and CSS. We typically use [Sass CSS Extension](http:\/\/sass-lang.com) to generate our CSS files, but there is nothing stopping you from using [Less](http:\/\/lesscss.org\/), or even regular CSS. It simply comes down to your own personal preferences.\n\n## Content Pages & Twig Templates\n\nThe first thing to understand is the direct relationship between **pages** in Grav and the **Twig template files** that are provided in a theme.\n\nEach page you create references a specific template file, either by the name of the page file, or by setting the template header variable for the page.  For simpler maintenance, we advise using the page name rather than overriding it with the header variable, whenever possible.\n\nLet us work through a simple example.  If you have [installed the **Grav Base** package](..\/..\/basics\/installation) you will notice that in the `user\/pages\/01.home` folder, you have a file called `default.md` which contains the markdown-based content for the page.  The name of this file, i.e. `default` tells Grav that this page should be rendered with the Twig template called `default.html.twig` which is located in the theme's `templates\/` folder.\n\n!! Page templates must be lowercase, like \"default\", \"blog\", etc.\n\nIf you were to have a page file called `blog.md`, Grav would try to render it with the Twig template: `<your_theme>\/templates\/blog.html.twig`.\n\n!! The names of files in Grav do not appear on the frontend of Grav. Only the folder names do. Don't worry if all of your blog posts have the same file name. This is normal.\n\n## Theme Organization\n\n### Definition & Configuration\n\nEach theme should have a definition file called `blueprints.yaml` which has some information about the theme.  It can optionally provide **form** definitions to be used in the [**Administration Panel**](..\/..\/admin-panel\/introduction) to allow for editing of theme options.  The **Antimatter** theme has the following `blueprints.yaml` file:\n\n[prism classes=\"language-yaml line-numbers\"]\nname: Antimatter\nversion: 1.6.7\ndescription: \"Antimatter is the default theme included with **Grav**\"\nicon: empire\nauthor:\n  name: Team Grav\n  email: devs@getgrav.org\n  url: https:\/\/getgrav.org\nhomepage: https:\/\/github.com\/getgrav\/grav-theme-antimatter\ndemo: https:\/\/demo.getgrav.org\/blog-skeleton\nkeywords: antimatter, theme, core, modern, fast, responsive, html5, css3\nbugs: https:\/\/github.com\/getgrav\/grav-theme-antimatter\/issues\nlicense: MIT\n\nform:\n  validation: loose\n  fields:\n    dropdown.enabled:\n        type: toggle\n        label: Dropdown in navbar\n        highlight: 1\n        default: 1\n        options:\n          1: Enabled\n          0: Disabled\n        validate:\n          type: bool\n[\/prism]\n\nIf you want to use theme configuration options you should provide default settings in a file called `<your_theme>.yaml`.  For example:\n\n[prism classes=\"language-yaml line-numbers\"]\nenabled: true\ncolor: blue\n[\/prism]\n\n!! The `color: blue` configuration option does not actually do anything. It is merely used as an example of how to override a setting.\n\nTo know more about the available forms that you can create, refer to [chapter 6. Forms](..\/..\/forms). You should also provide a `300px` x `300px` image of your theme and call it `thumbnail.jpg` at the root of the theme. It will show up in the theme section of your admin panel.\n\n### Templates\n\nThere are **no set rules** regarding the structure of a Grav theme except that there must be appropriate Twig templates provided in the `templates\/` folder for each of the page types you use in your content.\n\n!! Because of this tight coupling between page content and Twig templates in a theme, it often makes sense to develop themes in conjunction with the content they are intended to be used with.  A good way to create _general_ themes is to support the template types used by the Skeleton packages that are available on our [downloads page](https:\/\/getgrav.org\/downloads). For example, support: **default**, **blog**, **error**, **item**, and **modular**.\n\nGenerally speaking, the root of the `templates\/` folder should be used to house the primary templates that are supported, then create a sub-folder called `partials\/` to contain parts, or smaller template _chunks_.\n\nIf you want to support **modular** templates in your theme, you should also create a sub-folder of templates called `modular\/` and store your modular Twig template files in there.\n\nThe story for supporting **forms** is the same. Create another sub-folder called `forms\/` and store any custom form templates in it.\n\n### SCSS \/ LESS \/ CSS\n\nAgain, there is nothing set in stone here, but a solid practice is to have a sub-folder called `scss\/` if you want to develop with Sass, or `less\/` if you prefer Less along with a `css\/` folder to put static CSS files, and a `css-compiled\/` folder for any automatically generated files from your Sass or Less compilations.\n\nHow you organize your files here is completely up to you.  Feel free to follow our example in the default **antimatter** theme provided with the Grav Base package for some ideas.  We are using the **scss** variant of Sass which is more CSS-like, and frankly more natural to write.\n\nTo install Sass on your computer, simply [follow the instructions on the sass-lang.com](http:\/\/sass-lang.com\/install) website.\n\n1. Execute the simple provided scss shell script by typing `$ .\/scss.sh` from the root of the theme.\n2. Running the command directly `$ scss --sourcemap --watch scss:css-compiled` which is the same thing.\n\nBy default, this will compile your scss files into the `css-compiled\/` folder.  You can then reference the resulting css file in your theme.\n\n### Blueprints\n\nThe `blueprints\/` folder is used to define forms for options and configuration for each of the template files. These are used by the **Administration Panel** and are optional. The theme is 100% functional without these, but they will not be editable via the administration panel, unless provided.\n\n### Theme and Plugin Events\n\nAnother powerful feature that is purely optional is the ability for a theme to interact with Grav via the **plugins** architecture. In short, during the initialization sequence of grav, there are several points in the sequence where you can \"hook\" your own piece of code. This can be useful, for example, to define extra path shortcuts in your theme when twig is initializing, so that you can use them in your twig templates. These hooks are available to you through a set of \"empty\" functions with names predefined by the Grav system, which you can fill at your convenience. [Chapter 4. Plugins](..\/..\/plugins) has more information about the plugin system and the available event hooks. To make use of this hooks in your theme, simply create a file called `mytheme.php` and use the following format:\n\n[prism classes=\"language-php line-numbers\"]\n<?php\nnamespace Grav\\Theme;\n\nuse Grav\\Common\\Theme;\n\nclass MyTheme extends Theme\n{\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onThemeInitialized' => ['onThemeInitialized', 0]\n        ];\n    }\n\n    public function onThemeInitialized()\n    {\n        if ($this->isAdmin()) {\n            $this->active = false;\n            return;\n        }\n\n        $this->enable([\n            'onTwigSiteVariables' => ['onTwigSiteVariables', 0]\n        ]);\n    }\n\n    public function onTwigSiteVariables()\n    {\n        $this->grav['assets']\n            ->addCss('plugin:\/\/css\/mytheme-core.css')\n            ->addCss('plugin:\/\/css\/mytheme-custom.css');\n\n        $this->grav['assets']\n            ->add('jquery', 101)\n            ->addJs('theme:\/\/js\/jquery.myscript.min.js');\n    }\n}\n[\/prism]\n\nAs you can observe, in order to use the event hooks you first need to register them in a list with the `getSubscribedEvents` function and then define them with your own code. If you subscribe an event for use, define it aswell. Otherwise you will get an error.\n\n### Other Folders\n\nWe recommend creating individual folders at the root of your theme for `images\/`, `fonts\/` and `js\/` to contain your custom theme images, any custom web fonts, and javascript files required.\n\n## Theme Example\n\nLet us use the default **antimatter** theme as an example, below you can see the overall structure of this theme:\n\n![Theme Folders](theme-folders.png)\n\nIn this example, the actual `css`, `css-compiled`, `fonts`, `images`, `js`, `scss`, and `templates` files have been ignored to make it more readable.  The important thing to note is the overall structure of the theme.\n\n"},{"title":"Themes","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/themes","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 3\n\n# Themes\n\nThe way your **Grav** site looks is controlled by the **Theme**.  Find out how themes work and how to easily edit or create your own.\n"},{"title":"Content Types","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/content\/content-types","taxonomy":{"categories":["docs"],"tags":[]},"content":"## Default Content Type\n\nAs is typical with most web platforms, Grav's default content type is **HTML**. This means that when a user requests a route in their browser, for example: `\/blog\/new-macbook-pros-soon`, because there is no file extension Grav assumes you are requesting an HTML page.  If your page was defined by a page with filename of  `blog-item.md`, Grav in turn looks for a Twig template called `blog-item.html.twig`  to render the page.\n\nIf the user requested the type explicitly via `\/blog\/new-macbook-pros-soon.html`, Grav would still look for that same `blog-item.html.twig` file.\n\n## Other Content Types\n\nGrav is a flexible platform however, and can actually serve up any content type you could wish for (`xml`, `rss`, `json`, `pdf`, etc.), you just have to provide a way to render it appropriately.\n\nIf you were to request a route with a `.xml` extension, for example: `\/blog.xml`,  instead of using the regular `blog.html.twig` template to render it,\nGrav look for a template called `blog.xml.twig`.  You would need to ensure that template output the appropriate XML structure.\n\n### Example with JSON files\n\nA particular common way to access files is via a `.json` extension.  This allows data to be requested via JSON files that are easily processed by JavaScript.\n\nSay you wanted the **frontmatter** and **content** of a particular page in JSON format, and that page was defined in a file called `item.md`.  All you would need to do is to provide a Twig template called `item.json.twig`.  You could put this in your theme's `templates\/` folder, or if you were using a plugin to load custom templates, you could add it there.\n\nThe contents of this `item.json.twig` file could look something like:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set payload = {frontmatter: page.header, content: page.content}  %}\n{{ payload|json_encode|raw }}\n[\/prism]\n\nAll this Twig file does is create an array with the page header as **frontmatter** and page **content**, then uses the Twig `json_encode` filter to encode it.\n\nWhen a user requests the url: `\/blog\/new-macbook-pros-soon.json` this new Twig file would be used and the output sent would be in the format:\n\n[prism classes=\"language-json line-numbers\"]\n{\n   \"frontmatter\":{\n      \"title\":\"New Macbook Pros Arriving Soon\",\n      \"date\": \"14:23 08\/01\/2016\",\n      \"taxonomy\":{\n         \"category\":[\n            \"blog\"\n         ],\n         \"tag\":[\n            \"apple\",\n            \"mbpr\",\n            \"laptops\"\n         ]\n      }\n   },\n   \"content\":\"<p>this has an -&gt; arrow here and <strong>bold<\/strong> here<\/p>\\n<blockquote>\\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ultricies tristique nulla et mattis. Phasellus id massa eget nisl congue blandit sit amet id ligula. Praesent et nulla eu augue tempus sagittis. Mauris faucibus nibh et nibh cursus in vestibulum sapien egestas. Curabitur ut lectus tortor. Sed ipsum eros, egestas ut eleifend non, elementum vitae eros.\\n-- <cite> Ronald Wade<\/cite><\/p>\\n<\/blockquote>\\n<p>Mauris felis diam, pellentesque vel lacinia ac, dictum a nunc. Mauris mattis nunc sed mi sagittis et facilisis tortor volutpat. Etiam tincidunt urna mattis erat placerat placerat ac eu tellus.<\/p>\\n<p>This is a new paragraph<\/p>\\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ultricies tristique nulla et mattis.<\/p>\"\n}\n[\/prism]\n\nThis is valid JSON that can easily be parsed and processed by JavaScript.  Easy Peasy!\n\n## Custom Content Types\n\nIn order to send the data with the appropriate content type, Grav needs to know the MIME type that the browser expects in order for it to render that content type.  Grav knows about most of the standard content types as defined in the `system\/config\/media.yaml` file.  If you wish to handle a content type that is not provided, you just need to add an entry to this file.\n\nFor example, if you wish to be able to render iCal calendar events, you would need to add this media type to the `media.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\n  ics:\n    type: iCal\n    thumb: media\/thumb.png\n    mime: text\/calendar\n[\/prism]\n\nThis defines the `.ics` file extension as an `iCal` file with mime type: `text\/calendar`.  Then all you need to do is provide the appropriate `.ical.twig` template to render any file you request of this type.\n"},{"title":"Multi-Language","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/content\/multi-language","taxonomy":{"categories":["docs"],"tags":[]},"media":["translations-settings.png"],"content":"Multi-Language support in Grav is a direct result of a great [community discussion](https:\/\/github.com\/getgrav\/grav\/issues\/170) on the subject. We will now break these down and provide examples on how you can setup your Grav site with multiple languages.\n\n## Single language different than English\n\nIf you just use one language, enable translations and add your language code in the `user\/config\/system.yaml` file:\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  translations: true\n  supported:\n    - fr\n[\/prism]\n\nor in the System configuration in the Admin:\n\n![Admin Translations Settings](translations-settings.png)\n\nThis will make sure Grav uses the correct language strings in the frontend.\nAlso, if the theme supports it, it will add your language code to the HTML tag.\n\n## Multi-Language Basics\n\nAs you should already be familiar with how Grav uses markdown files in folders to define architectural structure as well as setting important page options as well as content, we won't go into those mechanics directly.  However, be aware that by default Grav looks for a **single** `.md` file in a folder to represent the page.  With multi-language support enabled, Grav will look for the appropriate language based file, for example `default.en.md` or `default.fr.md`.\n\n### Language Configuration\n\nFor Grav do to this you must first setup some basic language configuration in your `user\/config\/system.yaml` file.\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  supported:\n    - en\n    - fr\n[\/prism]\n\nBy providing a `languages` block with a list of `supported` languages, you have effectively enabled multi-language support within Grav.\n\nIn this example you can see that two supported languages have been described (`en` and `fr`). These will allow you to support **English** and **French** languages.\n\nIf no language is explicitly asked for (via the URL or by code), Grav will use the order of the languages provided to select the correct language.  So in the example above, the **default** language is `en` or English. If you had `fr` first, French would be the default language.\n\n!! You can of course provide as many languages as you like and you may even use locale type codes such as `en-GB`, `en-US` and `fr-FR`.  If you use this locale based naming, you will have to replace all the short language codes with the locale versions.\n\n### Multiple Language Pages\n\nBy default in Grav, each page is represented by a markdown file, for example `default.md`. When you enable multi-language support, Grav will look for the appropriately named markdown file.  For example as English is our default language, it will first look for `default.en.md`.\n\nIf this file is not found, it will try the next language and look for `default.fr.md`.  If that file is not found, it will fall-back to the Grav default and look for `default.md` to provide information for the page.\n\nIf we had the most basic of Grav sites, with a single `01.home\/default.md` file, we could start by renaming `default.md` to `default.en.md`, and its contents might look like this:\n\n[prism classes=\"language-markdown line-numbers\"]\n---\ntitle: Homepage\n---\n\nThis is my Grav-powered homepage!\n[\/prism]\n\nThen you could create a new page located in the same `01.home\/` folder called `default.fr.md` with the contents:\n\n[prism classes=\"language-markdown line-numbers\"]\n---\ntitle: Page d'accueil\n---\n\nCeci est ma page d'accueil g\u00e9n\u00e9r\u00e9e par Grav !\n[\/prism]\n\nNow you have defined two pages for your current homepage in multiple languages.\n\n### Active Language via URL\n\nAs English is the default language, if you were to point your browser without specifying a language you would get the content as described in the `default.en.md` file, but you could also explicitly request English by pointing your browser to\n\n[prism classes=\"language-text line-numbers\"]\nhttp:\/\/yoursite.com\/en\n[\/prism]\n\nTo access the French version, you would of course, use\n\n[prism classes=\"language-text line-numbers\"]\nhttp:\/\/yoursite.com\/fr\n[\/prism]\n\n### Active Language via Browser\n\nMost browsers allow you to configure which languages you prefer to see content in. Grav has the ability to read this `http_accept_language` values and compare them to the current supported languages for the site, and if no specific language has been detected, show you content in your preferred language.\n\nFor this to function you must enable the option in your `user\/system.yaml` file in the `languages:` section:\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  http_accept_language: false\n[\/prism]\n\n### Set Locale to the Active Language\n\nThe boolean setting will set the PHP `setlocale()` method that controls things such as monetary values, dates, string comparisons, character classifications and other locale-specific settings to that of the active language.  This defaults to `false`, and then it will use the system locale, if you set this value to `true` it will override the locale with the current active language.\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n   override_locale: false\n[\/prism]\n\n### Default Language Prefix\n\nBy default, the default language code is prefixed in all URLs.  For example if you have support for English and French (`en` and `fr`), and the default is English.  A page route might look like `\/en\/my-page` in English and `\/fr\/ma-page` in French. However it's often preferrable to have the default language without the prefix, so you can just set this option to `false` and the English page would appear as `\/my-page`.\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n    include_default_lang: false\n[\/prism]\n\n### Multi-Language Routing\n\nGrav typically uses the names of the folders to produce a URL route for a particular page.  This allows for the site architecture to be easily understood and implemented as a nested set of folders.  However with a multi-language site you may wish to use a URL that makes more sense in that particular language.\n\nIf we had the following folder structure:\n\n[prism classes=\"language-yaml line-numbers\"]\n- 01.Animals\n  - 01.Mammals\n    - 01.Bats\n    - 02.Bears\n    - 03.Foxes\n    - 04.Cats\n  - 02.Reptiles\n  - 03.Birds\n  - 04.Insets\n  - 05.Aquatic\n[\/prism]\n\nThis would produce URLs such as `http:\/\/yoursite.com\/animals\/mammals\/bears`.  This is great for an English site, but if you wished to have a French version you would prefer these to be translated appropriately. The easiest way to achieve this is would be to add a custom [slug](..\/headers#slug) for each of the `fr.md` page files.  for example, the mammal page might look something like:\n\n[prism classes=\"language-markdown line-numbers\"]\n---\ntitle: Mammif\u00e8res\nslug: mammiferes\n---\n\nLes mammif\u00e8res (classe des Mammalia) forment un taxon inclus dans les vert\u00e9br\u00e9s, traditionnellement une classe, d\u00e9finie d\u00e8s la classification de Linn\u00e9. Ce taxon est consid\u00e9r\u00e9 comme monophyl\u00e9tique...\n[\/prism]\n\nThis combined with appropriate **slug-overrides** in the other files should result in a URL of `http:\/\/yoursite.com\/animaux\/mammiferes\/ours` which is much more French looking!\n\nAnother option is to make use of the new [page-level routes](..\/headers#routes) support and provide a full route alias for the page.\n\n### Language-Based Homepage\n\nIf you override the route\/slug for the homepage, Grav won't be able to find the homepage as defined by your `home.alias` option in your `system.yaml`. It will be looking for `\/homepage` and your French homepage might have a route of `\/page-d-accueil`.\n\nIn order to support multi-language homepages Grav has a new option that can be used instead of `home.alias` and that is simple `home.aliases` and it could look something like this:\n\n[prism classes=\"language-yaml line-numbers\"]\nhome:\n  aliases:\n    en: \/homepage\n    fr: \/page-d-accueil\n[\/prism]\n\nThis way Grav knows how to route your to the homepage if the active language is English or French.\n\n### Language-Based Twig Templates\n\nBy default, Grav uses the markdown filename to determine the Twig template to use to render.  This works with multi-language the same way.  For example, `default.fr.md` would look for a Twig file called `default.html.twig` in the appropriate Twig template paths of the current theme and any plugins that register Twig template paths.  With multi-language, Grav also adds the current active language to the path structure.  What this means is that if you need to have a language-specific Twig file, you can just put those into a root level language folder.  For example if your current theme is using a template located at `templates\/default.html.twig` you can create an `templates\/fr\/` folder, and put your French-specific Twig file in there: `templates\/fr\/default.html.twig`.\n\nAnother option which requires manual setup is to override the `template:` setting in the page headers. For example:\n\n[prism classes=\"language-yaml line-numbers\"]\ntemplate: default.fr\n[\/prism]\n\nThis will look for a template located at `templates\/default.fr.html.twig`\n\nThis provides you with two options for providing language specific Twig overrides.\n\n!! If no language-specific Twig template is provided, the default one will be used.\n\n\n\n### Translation via Twig\n\nThe simplest way to use these translation strings in your Twig templates is to use the `|t` Twig filter.  You can also use the `t()` Twig function, but frankly the filter is cleaner and does the same thing:\n\n[prism classes=\"language-twig line-numbers\"]\n<h1 id=\"site-name\">{{ \"SITE_NAME\"|t }}<\/h1>\n<section id=\"header\">\n    <h2>{{ \"HEADER.MAIN_TEXT\"|t }}<\/h2>\n    <h3>{{ \"HEADER.SUB_TEXT\"|t }}<\/h3>\n<\/section>\n[\/prism]\n\nUsing the Twig function `t()` the solution is similar:\n\n[prism classes=\"language-twig line-numbers\"]\n<h1 id=\"site-name\">{{ t(\"SITE_NAME\") }}<\/h1>\n<section id=\"header\">\n    <h2>{{ t(\"HEADER.MAIN_TEXT\") }}<\/h2>\n    <h3>{{ t(\"HEADER.SUB_TEXT\") }}<\/h3>\n<\/section>\n[\/prism]\n\nAnother new Twig filter\/function allows you to translate from an array.  This is particularly useful if you have a list of values such as months of the year, or days of the week.  For example, say you have this translation:\n\n[prism classes=\"language-yaml line-numbers\"]\nen:\n  MONTHS_OF_THE_YEAR: [January, February, March, April, May, June, July, August, September, October, November, December]\n[\/prism]\n\nYou could get the appropriate translation for a post's month with the following:\n\n[prism classes=\"language-twig line-numbers\"]\n{{ 'MONTHS_OF_THE_YEAR'|ta(post.date|date('n') - 1) }}\n[\/prism]\n\nYou can also use this as a Twig function with `ta()`.\n\n### Translations with Variables\n\nYou can also use variables in your Twig translations by using [PHP's sprintf](http:\/\/php.net\/sprintf) syntax:\n\n[prism classes=\"language-yaml line-numbers\"]\nSIMPLE_TEXT: There are %d monkeys in the %s\n[\/prism]\n\nAnd then you can populate those variables with the Twig:\n\n[prism classes=\"language-twig line-numbers\"]\n{{ \"SIMPLE_TEXT\"|t(12, \"London Zoo\") }} \n[\/prism]\n\nresulting in the translation:\n\n[prism classes=\"language-text line-numbers\"]\nThere are 12 monkeys in the London Zoo\n[\/prism]\n\n### Complex Translations\n\nSometimes it's required to perform complex translations with replacement in specific languages.  You can utilize the full power of the Language objects `translate()` method with the `tl` filter\/function.  For example:\n\n[prism classes=\"language-twig line-numbers\"]\n{{ [\"SIMPLE_TEXT\", 12, 'London Zoo']|tl(['fr']) }}\n[\/prism]\n\nWill translate the `SIMPLE_TEXT` string and replace the placeholders with `12` and `London Zoo` respectively.  Also there's an array passed with language translations to try in first-find-first-used order.  This will output the result in french:\n\n\n[prism classes=\"language-text line-numbers\"]\nIl y a 12 singes dans le Zoo de Londres\n[\/prism]\n\n### PHP Translations\n\nAs well as the Twig filter and functions you can use the same approach within your Grav plugin:\n\n[prism classes=\"language-php line-numbers\"]\n$translation = $grav['language']->translate(['HEADER.MAIN_TEXT']);\n[\/prism]\n\nYou can also specify a language:\n\n[prism classes=\"language-php line-numbers\"]\n$translation = $grav['language']->translate(['HEADER.MAIN_TEXT'], 'fr');\n[\/prism]\n\nTo translate a specific item in an array use:\n\n[prism classes=\"language-php line-numbers\"]\n$translation = $grav['language']->translateArray('MONTHS_OF_THE_YEAR', 3);\n[\/prism]\n\n### Plugin and Theme Language Translations\n\nYou can also provide your own translations in plugins and themes.  This is done by creating a `languages.yaml` file in the root of your plugin or theme (e.g. `\/user\/plugins\/error\/languages.yaml`, or `user\/themes\/antimatter\/languages.yaml`), and should contain all the supported languages prefixed by the language or locale code:\n\n[prism classes=\"language-yaml line-numbers\"]\nen:\n  PLUGIN_ERROR:\n    TITLE: Error Plugin\n    DESCRIPTION: The error plugin provides a simple mechanism for handling error pages within Grav.\nfr:\n  PLUGIN_ERROR:\n    TITLE: Plugin d'Erreur\n    DESCRIPTION: Le plugin d'erreur fournit un m\u00e9canisme simple de manipulation des pages d'erreur au sein de Grav.\n[\/prism]\n\n! The convention for plugins is to use PLUGIN_PLUGINNAME.* as a prefix for all language strings, to avoid any name conflict. Themes are less likely to introduce language strings conflicts, but it's a good idea to prefix with THEME_THEMENAME.* strings added in themes.\n\n### Translation Overrides\n\nIf you wish to override a particular translation, simply put the modified key\/value pair in an appropriate language file in your `user\/languages\/` folder.  For example a file called `user\/languages\/en.yaml` could contain:\n\n[prism classes=\"language-yaml line-numbers\"]\nPLUGIN_ERROR:\n  TITLE: My Error Plugin\n[\/prism]\n\nThis will ensure that you can always override a translation string without messing around with the plugins or themes themselves, and also will avoid overwriting a custom translation when updating them.\n\n## Advanced\n\n### Environment-Based Language Handling\n\nYou can take advantage of [Grav's Environment Configuration](..\/..\/advanced\/environment-config) to automatically route users to the correct version of your site based on URL.  For example, if you had a URL such as `http:\/\/french.mysite.com` that was an alias for your standard `http:\/\/www.mysite.com`, you could setup an environment configuration:\n\n`\/user\/french.mysite.com\/config\/system.yaml`\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  supported:\n    - fr\n    - en\n[\/prism]\n\nThis uses an **inverted language order** so the default language is now `fr` so the French language will show by default.\n\n### Language Alias Routes\n\nBecause each page can have its own custom route, it would be hard to switch between different language versions of the same page.  However, there is a new **Page.rawRoute()** method on the Page object that will get the same raw route for any of the various language translations of a single page.  All you would need to do is to put the lang code in front to get the proper route to a specific language version of a page.\n\nFor example, say you are on a page in English with a custom route of:\n\n[prism classes=\"language-text line-numbers\"]\n\/my-custom-english-page\n[\/prism]\n\nThe French page has the custom route of:\n\n[prism classes=\"language-text line-numbers\"]\n\/ma-page-francaise-personnalisee\n[\/prism]\n\nYou could get the raw page of the English page and that might be:\n\n[prism classes=\"language-text line-numbers\"]\n\/blog\/custom\/my-page\n[\/prism]\n\nThen just add the language you want and that is your new URL;\n\n[prism classes=\"language-text line-numbers\"]\n\/fr\/blog\/custom\/my-page\n[\/prism]\n\nThis will retrieve the same page as `\/ma-page-francaise-personnalisee`.\n\n## Translation Support\n\nGrav provides a simple yet powerful mechanism for providing translations in Twig and also via PHP for use in themes and plugins. This is enabled by default, and will use `en` language if no languages are defined.  To manually enable or disable translations, there is a setting in your `system.yaml`:\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  translations: true\n[\/prism]\n\nThe translations use the same list of languages as defined by the `languages: supported:` in your `system.yaml`.\n\nThe translation system works in a similar fashion to Grav configuration and there are several places and ways you can provide translations.\n\nThe first place Grav looks for translation files is in the `system\/languages` folder. Files are expected to be created in the format: `en.yaml`, `fr.yaml`, etc.  Each yaml file should contain an array or nested arrays of key\/values pairs:\n\n[prism classes=\"language-yaml line-numbers\"]\nSITE_NAME: My Blog Site\nHEADER:\n    MAIN_TEXT: Welcome to my new blog site\n    SUB_TEXT: Check back daily for the latest news\n[\/prism]\n\nFor ease of identification, Grav prefers the use of capitalized language strings as this helps to determine untranslated strings and also makes it clearer when used in Twig templates.\n\nGrav has the ability to fall-back through the supported languages to find a translation if one for the active language is not found.  This is enabled by default but can be disabled via the `translations_fallback` option:\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  translations_fallback: true\n[\/prism]\n\n!!! Help Grav reach a wider community of users by providing translations in **your language**. We use the [Crowdin Translation Platform](https:\/\/crowdin.com\/) to facilitate translating the [Grav Core](https:\/\/crowdin.com\/project\/grav-core) and [Grav Admin Plugin](https:\/\/crowdin.com\/project\/grav-admin). [Sign-up](https:\/\/crowdin.com\/join) and get started translating today!\n\n### Session-Based Active Language\n\nIf you wish to remember the active language independently from the URL, you can activate **session-based** storage of the active language.  To enable this, you must ensure you have `session: enabled: true` in [the system.yaml](..\/..\/basics\/grav-configuration).  Then you need to enable the language setting:\n\n[prism classes=\"language-yaml line-numbers\"]\nlanguages:\n  session_store_active: true\n[\/prism]\n\nThis will then store the active language in the session.\n\n### Language Switcher\n\nYou can download a simple **Language Switching** plugin via the Admin plugin, or through the GPM with:\n\n[prism classes=\"language-bash command-line\"]\nbin\/gpm install langswitcher\n[\/prism]\n\nThe [documentation for configuration and implementation can be found on GitHub](https:\/\/github.com\/getgrav\/grav-plugin-langswitcher).\n\n\n### Setup with language specific domains\n\nconfigure your site with [Environment-based language handling](#environment-based-language-handling) to assign default languages (the first language) to domains.\n\n\nmake sure the option\n\n[prism classes=\"language-yaml line-numbers\"]\npages.redirect_default_route: true\n[\/prism]\n\nis set to true in your system.yaml.\n\nAdd following to your .htaccess file and adopt the language slugs and domain names to your needs:\n\n[prism classes=\"language-htaccess line-numbers\"]\n# http:\/\/www.cheat-sheets.org\/saved-copy\/mod_rewrite_cheat_sheet.pdf\n# http:\/\/www.workingwith.me.uk\/articles\/scripting\/mod_rewrite\n\n# handle top level e.g. http:\/\/grav-site.com\/de\nRewriteRule ^en\/?$ \"http:\/\/grav-site.com\" [R=302,L]\nRewriteRule ^de\/?$ \"http:\/\/grav-site.de\" [R=302,L]\n\n# handle sub pages, exclude admin path\nRewriteCond %{REQUEST_URI} !(admin) [NC]\nRewriteRule ^en\/(.*)$ \"http:\/\/grav-site.com\/$1\" [R=302,L]\nRewriteCond %{REQUEST_URI} !(admin) [NC]\nRewriteRule ^de\/(.*)$ \"http:\/\/grav-site.de\/$1\" [R=302,L]\n[\/prism]\n\nif you know how to simplify the rewrite rules, please edit this page through the Github link in the upper left corner\n\n### Language Logic in Twig Templates\n\nThere is often a need to access Language state and logic from Twig templates.  For example if you need to access a certain image file that is different for a particular language and is named differently (`myimage.en.jpg` and `myimage.fr.jpg`).\n\nTo display the correct version of the image you would need to know the current active language.  This is possible in Grav by accessing the `Language` object via the `Grav` object, and calling the appropriate method. In the example above this could be achieved with the following Twig code:\n\n[prism classes=\"language-twig line-numbers\"]\n{{ page.media.images['myimage.'~grav.language.getActive~'.jpg'].html }}\n[\/prism]\n\nThe `getActive` call in the Twig is effectively calling `Language->getActive()` to return the current active language code.  A few useful Language methods include:\n\n* `getLanguages()` - Returns an array of all supported languages\n* `getLanguage()` - Returns current active, else returns default language\n* `getActive()` - Returns current active language\n* `getDefault()` - Returns the default (first) language\n\nFor a complete list of available methods, you can look in the `\\Grav\\Common\\Language\\Language.php` file.\n\n"},{"title":"Routing","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/content\/routing","taxonomy":{"categories":["docs"],"tags":[]},"content":"As we already described in the opening [Page -> Folders section](..\/content-pages#folders), **routing** in Grav is primarily controlled by the folder structure you use when you build your site content.\n\nThere are certain scenarios where you need more flexibility and Grav comes packed with a variety of tools and configuration options to make your life simpler in this regard.\n\nImagine if you moved your site from some other CMS platform to Grav, you have several choices on how to set up your new site:\n\n1. Try to replicate the URLs of your old site by building the folder structure to match.\n2. Build your new site the way you want, and then have your web server 'rewrite' old URLs to redirect clients to the new locations.\n3. Build your new site the way you want, and configure Grav to redirect clients from the old URLs to the new locations.\n\nThere are many other use cases where you may wish to have the Grav site respond to different URLs than the folder structure dictates, and Grav has the following capabilities to help you realize your objectives.\n\n## Page Level Route Overrides\n\nAs outlined in the [Headers -> Routes section](..\/headers#routes), you can provide explicit routing options for the **default route** as well as an array of **route aliases**:\n\n[prism classes=\"language-yaml line-numbers\"]\nroutes:\n  default: '\/my\/example\/page'\n  canonical: '\/canonical\/url\/alias'\n  aliases:\n    - '\/some\/other\/route'\n    - '\/can-be-any-valid-slug'\n[\/prism]\n\nThese are processed and cached per-page, and are available along with what we call the **raw route** which is the route based on the **slugs** of the page hierarchy (which is how Grav works out a route by default).  So even if you provide custom page routes, the **raw route** is still always valid too.\n\n## Site Level Routes and Redirects\n\nGrav has a powerful regex-based mechanism for handling **route aliases** and **redirects** from one page to another. This feature is particularly useful when you migrate a site to Grav and want to ensure the old URLs will still work with the new site. This is often best accomplished via **rewrite rules** using your web server, but sometimes it's more convenient and flexible just to let Grav handle them.\n\nThese are handled via the [Site Configuration](..\/..\/basics\/grav-configuration#site-configuration). Grav comes with a sample `system\/config\/site.yaml` but you can override or add any of your own settings by editing the `user\/config\/site.yaml` file.\n\n!! All redirect rules apply on the slug-path beginning after the language part (if you use multi-language pages)\n\n\n### Route Aliases\n\n#### Simple Aliases\n\nThe most basic kind of alias is a direct one-to-one mapping. In the `routes:` section of the `site.yaml`, you can create a list of mappings to indicate the alias and the actual route that should be used.\n\n!! It's important to note that these aliases are only used if no valid page is found with the route provided\n\n[prism classes=\"language-yaml line-numbers\"]\nroutes:\n  \/something\/else: '\/blog\/focus-and-blur'\n[\/prism]\n\nIf you requested a URL `http:\/\/mysite.com\/something\/else` and that was not a valid page, the routes definition would actually serve you the page located at `\/blog\/focus-and-blur`, assuming it exists. This does not actually **redirect** the user to the provided page, it simply displays the page when you request the alias.\n\n#### Regex-Based Aliases\n\nA more advanced type of alias redirect allows the use of a simple **regex** to map part of an alias to a route.  For example, if you had:\n\n[prism classes=\"language-yaml line-numbers\"]\nroutes:\n   \/another\/(.*): '\/blog\/$1'\n[\/prism]\n\nThis would route the wildcard from the alias to the route, so `http:\/\/mysite.com\/another\/focus-and-blur` would actually display the page found at the `\/blog\/focus-and-blur` route. This is a powerful way to map one set of URLs to another. Great for moving your site from WordPress to Grav :)\n\nYou can also perform the match to capture any alias, and map that to a specific route:\n\n[prism classes=\"language-yaml line-numbers\"]\nroutes:\n  \/one-ring\/(.*): '\/blog\/sunshine-in-the-hills'\n[\/prism]\n\nWith this route alias, any URL that confirms to the wildcard: `\/one-ring\/to-rule-them-all` or `\/one-ring\/is-mine.html` will both show the content from the page with the route `\/blog\/sunshine-in-the-hills`.\n\nYou can even get much more creative and map multiple items or use any regex syntax:\n\n[prism classes=\"language-yaml line-numbers\"]\nroutes:\n  \/complex\/(category|section)\/(.*): \/blog\/$1\/folder\/$2\n[\/prism]\n\nThis would match and rewrite the following:\n\n[prism classes=\"language-text line-numbers\"]\n\/complex\/category\/article-1      -> \/blog\/category\/folder\/article-1\n\/complex\/section\/article-2.html  -> \/blog\/section\/folder\/article-2.html\n[\/prism]\n\nThis route would not match anything that doesn't start with `complex\/category` or `complex\/section`.  For more information, [Regexr.com](http:\/\/regexr.com\/) is a fantastic resource to learn about and test regular expressions.\n\n### Redirects\n\nThe other corollary option to **route aliases** is provided by **redirects**. These are similar, but rather than keeping the URL and simply serving the content from the aliased route, Grav actually redirects the browser to the mapped page.\n\nThere are three system-level configuration options that affect Redirects:\n\n[prism classes=\"language-yaml line-numbers\"]\npages:\n  redirect_default_route: false\n  redirect_default_code: 302\n  redirect_trailing_slash: true\n[\/prism]\n\n* `redirect_default_route` enables Grav to automatically redirect to the page's default route.\n* `redirect_default_code` allows you to set the default HTTP redirect codes:\n    * **301**: Permanent redirect. Clients making subsequent requests for this resource should use the new URI. Clients should not follow the redirect automatically for POST\/PUT\/DELETE requests.\n    * **302**: Redirect for undefined reason. Clients making subsequent requests for this resource should not use the new URI. Clients should not follow the redirect automatically for POST\/PUT\/DELETE requests.\n    * **303**: Redirect for undefined reason. Typically, 'Operation has completed, continue elsewhere.' Clients making subsequent requests for this resource should not use the new URI. Clients should follow the redirect for POST\/PUT\/DELETE requests.\n    * **307**: Temporary redirect. Resource may return to this location at a later point. Clients making subsequent requests for this resource should use the old URI. Clients should not follow the redirect automatically for POST\/PUT\/DELETE requests.\n* `redirect_trailing_slash` option lets you redirect to a non-trailing slash version of the current URL\n\nFor example:\n\n[prism classes=\"language-yaml line-numbers\"]\nredirects:\n    \/jungle: '\/blog\/the-urban-jungle'\n[\/prism]\n\nYou can also explicitly pass the redirect code between square brackets `[]` as part of the URL:\n\n[prism classes=\"language-yaml line-numbers\"]\nredirects:\n    \/jungle: '\/blog\/the-urban-jungle[303]'\n[\/prism]\n\nIf you were to point your browser to `http:\/\/mysite.com\/jungle`, you would actually get redirected and end up on the page: `http:\/\/mysite.com\/blog\/the-urban-jungle`.\n\nThe same regular expression capabilities that exist for Route Aliases, also exist for Redirects.  For example:\n\n[prism classes=\"language-yaml line-numbers\"]\nredirects:\n    \/redirect-test\/(.*): \/$1\n    \/complex\/(category|section)\/(.*): \/blog\/$1\/folder\/$2\n[\/prism]\n\nThese look almost identical to the Route Alias version, but instead of transparently showing the new page, Grav actually redirects the browser and loads the new page specifically.\n\n## Hiding the Home Route\n\nWhen you set a certain page to be your site's home via the `system.yaml` file:\n\n[prism classes=\"language-yaml line-numbers\"]\nhome:\n  alias: '\/home'\n[\/prism]\n\nYou are effectively telling Grav to add a route of `\/` as an alias for that page.  This means that when Grav is requesting the page for the `\/` URL, it finds the page you have set.\n\nHowever, Grav really doesn't do anything special for pages that are beneath this homepage.  So if you have a page called `\/blog` that displays a list of your blog posts, and you set this to be your homepage, it will work as expected.  If however, you click on a blog post that sits beneath the `\/blog` folder, the URL could be `\/blog\/my-blog-post`.  This is expected behavior, but it might not be what you intend.  There is a new option available via the `system.yaml` that let's you hide this top level `\/blog` from the route if so enabled.\n\nYou can enable this behavior by toggling the following value:\n\n[prism classes=\"language-yaml line-numbers\"]\nhome:\n  hide_in_urls: true\n[\/prism]\n"},{"title":"Modular Pages","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/content\/modular","taxonomy":{"categories":["docs"],"tags":[]},"media":["modular-explainer-1.jpg","modular-explainer-2.jpg","modular-explainer-3.jpg"],"content":"The concept of **Modular Pages** is a little tricky to get your head around at first, but when you do you'll see how convenient they are to use. A **Modular Page** is a collection of pages stacked on top of each other to create a unified, single page. This lets you create a complex page-structure by using the **LEGO building-brick**-approach, and who doesn't love LEGO?!\n\n## What are Modular Pages and what are they not?\n\nIn Grav, [Pages](\/content\/content-pages) are a broad concept that captures almost any type of combination of elements that you can imagine going into a website. Importantly, Modular Pages are a subset of this concept but not the same as a regular Page. A regular Page is fairly standalone, in the sense that Grav will render and display it without depending on other content such as other pages or child-pages. A Modular page, however, does not have child-pages. This is illustrated by imagining a simple page-structure:\n\nA regular Page found at _domain.com\/books_ has some details about what books are for sale. Several child-pages exist for this Page, such as _domain.com\/books\/gullivers-travels_ and _domain.com\/books\/the-hobbit_. Their folders are named the same as the address that Grav renders: `\/pages\/books`, `\/pages\/books\/gullivers-travels`, and `\/pages\/books\/the-hobbit`. This structure would not work in a Modular Page.\n\nA Modular Page does not have child-pages in the same sense, rather, it has **Modules** that make up the parts of the page. So, rather than various books located beneath the top-level page, the modular page displays its modules on **the same page**. Gulliver's Travels and The Hobbit both appear in _domain.com\/books_, with the paths `\/pages\/books\/_gullivers-travels` and `\/pages\/books\/_the-hobbit`. Thus, Modular Pages are not directly compatible with regular Pages and have their own structure.\n\n## Example Folder Structure\n\nUsing our **One-Page Skeleton** as an example, we will explain how Modular Pages work in greater detail.\n\nThe **Modular Page** itself is assembled from pages that exist in subfolders found under the page's primary folder. In the case of our One-Page Skeleton, this page is located in the `01.home` folder. Within this folder is a single `modular.md` file which tells Grav which subpages to pull in to assemble the Modular Page, and which order to display them in. The name of this file is important because it instructs Grav to use the `modular.html.twig`-template from the current theme to render the page.\n\nThese subpages are in folders with names that begin with an underscore (`_`). By using an underscore, you are telling Grav that these are **Modules**, not standalone pages. For example, subpage-folders can be named `_features` or `_showcase`. These pages are **not routable** - they cannot be pointed to directly in a browser, and they are **not visible** - they do not show up in a menu.\n\nIn the case of our One-Page Skeleton, we have created the folder structure pictured below.\n\n{{ media['modular-explainer-2.jpg'].html('Listing Page','border') }}\n\nEach subfolder contains a Markdown-file which acts as a page.\n\nThe data within these Module-folders - including Markdown-files, images, etc. - is then pulled and displayed on the Modular page. This is accomplished by creating a primary page, defining a [Page Collection](\/content\/collections) in the primary page's YAML FrontMatter, then iterating over this Collection in a Twig-template to generate the combined HTML page. A theme should already have a `modular.html.twig` template that will do this and is used when you create a Modular Page type. Here's a simple example from a `modular.html.twig`:\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n{% for module in page.collection() %}\n    {{ module.content }}\n{% endfor %}\n[\/prism]\n{% endverbatim %}\n\nHere is an example of the resulting modular page, highlighting the different modular folders which are used.\n\n{{ media['modular-explainer-1.jpg'].html('Listing Page','border') }}\n\n## Setting Up the Primary Page\n\nAs you can see, each section pulls content from a different Module-folder. Determining which Module-folders are used, and in what order, happens in the primary Markdown-file in the parent folder of the Module. Here is the content of the `modular.md` file in the `01.home` folder.\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: One Page Demo Site\nmenu: Home\nonpage_menu: true\nbody_classes: \"modular header-image fullwidth\"\n\ncontent:\n    items: '@self.modular'\n    order:\n        by: default\n        dir: asc\n        custom:\n            - _showcase\n            - _highlights\n            - _callout\n            - _features\n---\n[\/prism]\n\nAs you can see, there is no actual content in this file. Everything is handled in the YAML FrontMatter in the header. The page's **Title**, **Menu** assignment, and other settings you would find in a typical page are found here. The [Content](\/content\/headers#ordering-options) instructs Grav to create the content based on a Collection of modular pages, and even provides a custom manual order for them to render.\n\n## Modules\n\n{{ media['modular-explainer-3.jpg'].html('Listing Page','border') }}\n\nThe Markdown-file for each Module can have its own template, settings, etc. For all intents and purposes, it has most of the features and settings of a regular page, it just isn't rendered as one. We recommend page-wide settings, such as **taxonomy**, be placed in the main Markdown-file that controls the whole page.\n\nThe Modular Pages themselves are handled just like regular Pages. Here is an example using the `text.md` file in the `_callout` page which appears in the middle of the Modular page.\n\n[prism classes=\"language-markdown line-numbers\"]\n---\ntitle: Homepage Callout\nimage_align: right\n---\n\n## Content Unchained\n\nNo longer are you a _slave to your CMS_. Grav **empowers** you to create anything from a [simple one-page site](#), a [beautiful blog](#), a powerful and feature-rich [product site](#), or pretty much anything you can dream up!\n[\/prism]\n\nAs you can see, the header of the page contains basic information you might find on a regular page. It has its own title that can be referenced, and [custom page options](\/content\/headers#custom-page-headers), such as the alignment of the image can be set here, just as it would on any other page.\n\nThe template file for the `text.md` file should be located in the `\/templates\/modular`-folder of your theme, and should be named `text.html.twig`. This file, like any Twig-template file for any other page, defines the settings, as well as any styling-differences between it and the base page.\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n<div class=\"modular-row callout\">\n    {% set image = page.media.images|first %}\n    {% if image %}\n        {{ image.cropResize(400,400).html('','','align-'~page.header.image_align) }}\n    {% endif %}\n{{ content }}\n<\/div>\n[\/prism]\n{% endverbatim %}\n\nGenerally, Modular Pages are very simple. You just have to get used to the idea that each section in your page is defined in a Module that has its own folder below the actual page. They are displayed all at once to your visitors, but organized slightly differently than regular pages. Feel free to experiment and discover just how much you can accomplish with a Modular Page in Grav.\n"},{"title":"Media","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/content\/media","taxonomy":{"categories":["docs"],"tags":[]},"media":["acronyms.txt","hal9000.mp3","retina.jpg","sample-animated.gif","sample-image.jpg","sample-trailer.mov","sample-vector.svg"],"content":"When creating content in **Grav**, you often need to display different types of media like **images**, **videos**, and various other **files**. These files are automatically found and processed by Grav and are made available to use by any page.  This is particularly handy because you can then use the built-in functionality of the page to leverage thumbnails, access metadata and modify the media dynamically (e.g. resizing images, setting the display size for videos, etc.) as you need them.\n\nGrav uses a **smart-caching** system that automatically creates in-cache copies of the dynamically generated media when necessary. This way all subsequent requests can use the cached version instead of having to generate the media all over again.\n\n## Supported Media Files\n\nThe following media file types are supported natively by Grav. Additional support for media files and streaming embeds may be added via plugins.\n\n[div class=\"table-keycol\"]\n| Media Type         | File Type                                                                                                                                                             |\n| :-----             | :-----                                                                                                                                                                |\n| Image              | jpg, jpeg, png                                                                                                                                                        |\n| Audio              | mp3, wav, wma, ogg, m4a, aiff, aif                                                                                                                                    |\n| Animated image     | gif                                                                                                                                                                   |\n| Vectorized image   | svg                                                                                                                                                                   |\n| Video              | mp4, mov, m4v, swf, flv, webm, ogv                                                                                                                                    |\n| Data \/ Information | txt, doc, docx, html, htm, pdf, zip, gz, 7z, tar, css, js, json, xml, xls, xlt, xlm, xlsm, xld, xla, xlc, xlw, xll, ppt, pps, rtf, bmp, tiff, mpeg, mpg, mpe, avi, wmv |\n[\/div]\n\nA full list of supported mimetypes can be found in the `system\/config\/media.yaml` file.  If there is a mimetype that is not currently supported, you can simply create your own `user\/config\/media.yaml` and add it in there.  Just ensure you follow the same format as the original `system` file.  The simplest approach is to copy the whole original file and make your edits.\n\n## Where to put your media files\n\nUsually you'll use a media file within a page, so just put the file in the page folder, and you can reference it in the Markdown of the page, for example:\n\n[prism classes=\"language-markdown\"]\n![my image](image.jpg)\n[\/prism]\n\nIf you want to put all your images in a single folder, you can put them in a `user\/pages\/images` folder. That way, in Twig, you can reach them via\n\n{% verbatim %}\n```twig\n{% set my_image = page.find('\/images').media['my-image.jpg'] %}\n```\n{% endverbatim %}\n\nand also you can find them easily via markdown and perform operations on them:\n\n```markdown\n![my image](\/images\/my-image.jpg?cropResize=300,300)\n```\n\nAlternatively you can put them in your theme, as that is easily accessible via CSS references or from a markdown file by using `theme:\/\/` stream:\n\n```markdown\n![my image](theme:\/\/images\/theme-image.jpg)\n```\n\nAnother option is `user\/images`, where you can use `image:\/\/` stream to access them:\n\n```markdown\n![my image](image:\/\/my-image.jpg)\n```\n\nYou can actually use any stream including any folder inside `user\/` via the `user:\/\/` stream:\n\n```markdown\n![my image](user:\/\/themes\/mytheme\/images\/my-image.jpg)\n```\n\nYou can also do these same kinds of things using the Twig `Media` object:\n\n{% verbatim %}\n```twig\n{{ media['user:\/\/themes\/mytheme\/images\/my-image.jpg'].html() }}\n```\n{% endverbatim %}\n\n!!!! Grav has a `\/images` folder. Do not put your own images in that folder, as it hosts Grav auto-generated, cached images.\n\nYou may also want to put all the media files into their own folder, so that they can all be accessed at one go. For instance you might want to keep all your MP3 files in a folder `user\/pages\/mp3s` (not visible) and put the name of the MP3 file associated with a particular page in a header field called `thistrack`. If you then wish to access the file for a partiular page and play it using the HTML5 audio element, you will need code like this:\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n<audio controls>\n  <source src=\"{{ page.find('\/mp3s').media[page.header.thistrack~'.mp3'] }}\">\n<\/audio>\n[\/prism]\n{% endverbatim %}\n\n## Display modes\n\nGrav provides a few different display modes for every kind of media object.\n\n[div class=\"table-keycol\"]\n| Mode      | Explanation                                                                     |\n| :-----    | :-----                                                                          |\n| source    | Visual representation of the media itself, i.e. the actual image, video or file |\n| text      | Textual representation of the media                                             |\n| thumbnail | The thumbnail image for this media object                                       |\n[\/div]\n\n!!!! **Data \/ Information** type media do not support `source` mode, they will default to `text` mode if another mode is not explicitly chosen.\n\n## Thumbnail Location\n\nThere are three locations Grav will look for your thumbnail.\n\n1. In the same folder as your media file: `[media-name].[media-extension].thumb.[thumb-extension]` where `media-name` and `media-extension` are respectively the name and extension of the original media file and `thumb-extension` is any extension that is supported by the `image` media type. Examples are `my_video.mp4.thumb.jpg` and `my-image.jpg.thumb.png`\n**For images only!** The image itself will be used as thumbnail.\n2. Your user folder: `user\/images\/media\/thumb-[media-extension].png` where `media-extension` is the extension of the original media file. Examples are `thumb-mp4.png` and `thumb-jpg.jpg`\n3. The system folder: `system\/images\/media\/thumb-[media-extension].png` where `media-extension` is the extension of the original media file. **The thumbnails in the system folders are pre-provided by Grav.**\n\n!! You can also manually select the desired thumbnail with the actions explained below.\n\n## Links and Lightboxes\n\nThe display modes above can also be used in combination with links and lightboxes, which are explained in more detail later. Important to note however is:\n\n!!!! Grav does not provide lightbox-functionality out of the box, you need a plugin for this. You can use the [FeatherLight Grav plugin](https:\/\/github.com\/getgrav\/grav-plugin-featherlight) to achieve this.\n\nWhen you use Grav's media functionality to render a lightbox, all Grav does is output an **anchor** tag that has some attributes for the lightbox plugin to read. If you are interested in using a lightbox library that is not in our plugin repository or you want to create your own plugin, you can use the table below as a reference.\n\n[div class=\"table-keycol\"]\n| Attribute   | Explanation                                                                                                  |\n| :-----      | :-----                                                                                                       |\n| rel         | A simple indicator that this is not a regular link, but a lightbox link. The value will always be `lightbox` |\n| href        | A URL to the media object itself                                                                             |\n| data-width  | The width the user requested this lightbox to be                                                             |\n| data-height | The height the user requested this lightbox to be                                                            |\n| data-srcset | In case of image media, this contains the `srcset` string. ([more info](..\/media#responsive-images))         |\n[\/div]\n\n## Actions\n\nGrav employs a **builder-pattern** when handling media, so you can perform **multiple actions** on a particular medium. Some actions are available for every kind of medium while others are specific to the medium.\n\n### General\n\nThese actions are available for all media types.\n\n#### url\n\n!! This method is only intended to be used in **Twig** templates, hence the lack of Markdown syntax.\n\nThis returns **raw url path** to the media.\n\n[ui-tabs]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].url }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n```html\n{{ page.media['sample-image.jpg'].url|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n\n#### html\n\n!! In Markdown this method is implicitly called when using the `![]` syntax.\n\nThe `html` action will output a valid HTML tag for the media based on the current display mode.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Some ALT text](sample-image.jpg \"My title\") {.myclass}\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].html('My title', 'Some ALT text', 'myclass') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n```html\n{{ page.media['sample-image.jpg'].html('My title', 'Some ALT text', 'myclass')|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n{{ page.media['sample-image.jpg'].html('My title', 'some ALT text', 'myclass') }}\n\n!! To use classes in Markdown, you need to enable Markdown Extra.\n\n\n#### display\n\nUse this action to switch between the various display modes that Grav provides. Once you switch display mode, all previous actions will be reset. The exceptions to this rule are the `lightbox` and `link` actions and any actions that have been used before those two.\n\nFor example, the thumbnail that results from calling `page.media['sample-image.jpg'].sepia().display('thumbnail').html()` will not have the `sepia()` action applied, but `page.media['sample-image.jpg'].display('thumbnail').sepia().html()` will.\n\n! Once you switch to thumbnail mode, you will be manipulating an image. This means that even if your current media is a video, you can use all the image-type actions on the thumbnail.\n\n#### link\n\nTurn your media object into a link. All actions that you call before `link()` will be applied to the target of the link, while any actions called after will apply to what's displayed on your page.\n\n!! After calling `link()`, Grav will automatically switch the display mode to **thumbnail**.\n\nThe following example will display a textual link (`display('text')`) to a sepia version of the `sample-image.jpg` file:\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Image link](sample-image.jpg?sepia&link&display=text)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].sepia().link().display('text').html('Image link') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n```html\n{{ page.media['sample-image.jpg'].sepia().link().display('text').html('Image link')|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n{{ page.media['sample-image.jpg'].sepia().link().display('text').html('Image link') }}\n\n#### lightbox\n\nThe lightbox action is essentially the same as the link action but with a few extras. Like explained above, the lightbox action will not do anything more than create a link with some extra attributes. It differs from the link action in that it adds a `rel=\"lightbox\"` attribute and accepts a `width` and `height` attribute.\n\nIf possible (currently only in the case of images), Grav will resize your media to the requested width and height. Otherwise it will simply add a `data-width` and `data-height` attribute to the link.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?lightbox=600,400&resize=200,200)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].lightbox(600,400).resize(200,200).html('Sample Image') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n```html\n{{ page.media['sample-image.jpg'].lightbox(600,400).resize(200,200).html('Sample Image')|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?lightbox=600,400&resize=200,200)\n\n#### thumbnail\n\nManually choose the thumbnail Grav should use. You can choose between `page` and `default` for any type of media as well as `media` for image media if you want to use the media object itself as your thumbnail.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?thumbnail=default&display=thumbnail)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].thumbnail('default').display('thumbnail').html('Sample Image') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n```html\n{{ page.media['sample-image.jpg'].thumbnail('default').display('thumbnail').html('Sample Image')|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?thumbnail=default&display=thumbnail)\n\n## Image Actions\n\n#### resize\n\nResizing does exactly what you would expect it to do.  `resize` lets you create a new image based on the `width` and the `height`.  The aspect ratio is maintained and the new image will contain blank areas in the color of the **optional** background color provided as a `hex value`, e.g. `0xffffff`. The background parameter is optional, and if not provided will default to **transparent** if the image is a PNG, or **white** if it is a JPEG.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?resize=400,200)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].resize(400, 200).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?resize=400,200)\n\n#### forceResize\n\nResizes the image to the `width` and `height` as provided.  `forceResize` will not respect original aspect-ratio and will stretch the image as needed to fit the new image size.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?forceResize=200,300)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].forceResize(200, 300).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?forceResize=200,300)\n\n#### cropResize\n\n`cropResize` resizes an image to a smaller or larger size based on the `width` and the `height`.  The aspect ratio is maintained and the new image will be resized to fit in the bounding-box as described by the `width` and `height` provided. In other words, any background area you would see in a regular `resize` is cropped.\n\nFor example, if you have an image that is `640` x `480` and you perform a `cropResize(100, 100)` action upon it, you will end up with an image that is `100` x `75`.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropResize=300,300)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropResize(300, 300).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropResize=300,300)\n\n#### crop\n\n`crop` will not resize the image at all, it will merely crop the original image so that only the portion of the bounding box as described by the `width` and the `height` originating from the `x` and `y` location is used to create the new image.\n\nFor example, an image that is `640` x `480` that has the `crop(0, 0, 400, 100)` action upon it, will simply get the width and height both cropped so that the resulting image is an image with a width of `400` and a height of `100` originated from the top-left corner as described by `0, 0`.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?crop=100,100,300,200)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].crop(100,100,300,200).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?crop=100,100,300,200)\n\n#### cropZoom\n\nSimilar to regular `cropResize`, `cropZoom` also takes a `width` and a `height` but will **resize and crop** the image to ensure the resulting image is the exact size you requested.  The aspect ratio is maintained but parts of the image may be cropped, however the resulting image is centered.\n\n!! The primary difference between **cropResize** and **cropZoom** is that in cropResize, the image is resized maintaining aspect ratio so that the entire image is shown, and any extra space is considered background.\n\nWith **cropZoom**, the image is resized so that there is no background visible, and the extra image area of the image outside of the new image size is cropped.\n\nFor example if you have an image that is `640` x `480` and you perform a `cropZoom(400, 100)` action, the resulting image will be resized to `400` x `300` and then the height is cropped resulting in a `400` x `100` image.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=600,200)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(600,200).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n!! Folks familiar with using `zoomCrop` for this purpose will find that it also works in Grav.\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=600,200)\n\n#### quality\n\nDynamically allows the setting of a **compression percentage** `value` for the image between `0` and `100`. A lower number means less quality, where `100` means maximum quality.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&quality=25)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).quality(25).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&quality=25)\n\n#### negate\n\nApplies a **negative filter** to the image where colors are inverted.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&negate)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).negate.html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&negate)\n\n#### brightness\n\nApplies a **brightness filter** to the image with a `value` from `-255` to `+255`. Larger negative numbers will make the image darker, while larger positive numbers will make the image brighter.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&brightness=-100)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).brightness(-100).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&brightness=-100)\n\n#### contrast\n\nThis applies a **contrast filter** to the image with a `value` from `-100` to `+100`. Larger negative numbers will increase the contrast, while larger positive numbers will reduce the contrast.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&contrast=-50)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).contrast(-50).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&contrast=-50)\n\n#### grayscale\n\nThis processes the image with a **grayscale filter**.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&grayscale)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).grayscale.html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&grayscale)\n\n#### emboss\n\nThis processes the image with an **embossing filter**.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&emboss)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).emboss.html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&emboss)\n\n#### smooth\n\nThis applies a **smoothing filter** to the image based on smooth `value` setting from `-10` to `10`.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&smooth=5)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).smooth(5).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&smooth=5)\n\n#### sharp\n\nThis applies a **sharpening filter** on the image.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&sharp)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).sharp.html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&sharp)\n\n#### edge\n\nThis applies an **edge finding filter** on the image.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&edge)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).edge.html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&edge)\n\n#### colorize\n\nYou can colorize the image based on adjusting the `red`, `green`, and `blue` values for the image from `-255` to `+255` for each color.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&colorize=100,-100,40)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).colorize(100,-100,40).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&colorize=100,-100,40)\n\n#### sepia\n\nThis applies a **sepia filter** on the image to produce a vintage look.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&sepia)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).sepia.html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&sepia)\n\n#### gaussianBlur\n\n**blurs** the image by an Factor, that defines how often the blur filter is applied to the image. Default is 1 time.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?gaussianBlur=3)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].gaussianBlur(3).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result: \n\n![Sample Image](sample-image.jpg?gaussianBlur=3)\n\n#### rotate\n\n**rotates** the image by `angle` degrees counterclockwise, negative values rotate clockwise.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&rotate=-90)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).rotate(-90).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&rotate=-90)\n\n#### flip\n\n**flips** the image in the given directions. Both params can be `0|1`.  Both `0` is equivalent to no flipping in either direction.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?cropZoom=300,200&flip=0,1)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].cropZoom(300,200).flip(0,1).html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?cropZoom=300,200&flip=0,1)\n\n#### fixOrientation\n\nFixes the orientation of the image when rotation is made via EXIF data (applies to jpeg images taken with phones and cameras).\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?fixOrientation)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].fixOrientation }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n\n## Animated \/ Vectorized Actions\n\n#### resize\n\nBecause PHP cannot handle dynamically resizing these types of media, the resize action will only make sure that a `width` and `height` or `data-width` and `data-height` attribute are set on your `<img>`\/`<video>` or `<a>` tag respectively. This means your image or video will be displayed in the requested size, but the actual image or video file will not be converted in any way.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Trailer](sample-trailer.mov?resize=400,200)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-trailer.mov'].resize(400, 200).html('Sample Trailer') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n```html\n{{ page.media['sample-trailer.mov'].resize(400, 200).html('Sample Trailer')|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n\n#### examples\n\nSome examples of this:\n\n[ui-tabs]\n[ui-tab title=\"Vector Image\"]\n```markdown\n![Sample Vector](sample-vector.svg?resize=300,300)\n```\n![Sample Vector](sample-vector.svg?resize=300,300)\n[\/ui-tab]\n[ui-tab title=\"Animated Image\"]\n```markdown\n![Animated Gif](sample-animated.gif?resize=300,300)\n```\n![Animated Gif](sample-animated.gif?resize=300,300)\n[\/ui-tab]\n[ui-tab title=\"Video\"]\n```markdown\n![Sample Trailer](sample-trailer.mov?resize=400,200)\n```\n![Sample Trailer](sample-trailer.mov?resize=400,200)\n[\/ui-tab]\n[\/ui-tabs]\n\n## Audio Actions\n\nAudio media will display an HTML5 audio link:\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Hal 9000: I'm Sorry Dave](hal9000.mp3)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['hal9000.mp3'].html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Hal 9000: I'm Sorry Dave](hal9000.mp3)\n\n#### controls\n\nAllows explicitly setting or removing the HTML5 default controls. Passing `0` hides browser's controls for playback, volume, etc..\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Hal 9000: I'm Sorry Dave](hal9000.mp3?controls=0)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['hal9000.mp3'].controls(0) }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n```html\n{{ page.media['hal9000.mp3'].controls(0) }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n#### preload\n\nAllows setting of `preload` property, which defaults to `auto`. Permitted params are `auto`, `metadata`, and `none`.\n\n!! <q cite=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\/audio#attr-preload\">If not set, its default value is browser-defined (i.e. each browser may have its own default value). The spec advises it to be set to <code>metadata<\/code>.<\/q>\n\n!! The `preload` attribute is ignored if `autoplay` is present.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Hal 9000: I'm Sorry Dave](hal9000.mp3?preload=metadata)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['hal9000.mp3'].preload('metadata') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n#### autoplay\n\nAllows setting whether audio will `autoplay` upon page load. Defaults to `false` by omission if not set.\n\n!! If `autoplay` and `preload` are both present on a given `audio` element, `preload` will be ignored.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Hal 9000: I'm Sorry Dave](hal9000.mp3?autoplay=1)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['hal9000.mp3'].autoplay(1) }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n\n#### controlsList\n\nAllows setting of `controlsList` property, which takes one or more of three possible values: `nodownload`, `nofullscreen`, and `noremoteplayback`.\n\n!! If setting more than one parameter in markdown, separate each with a dash (`-`). These will be replaced by spaces in the output HTML. \n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Hal 9000: I'm Sorry Dave](hal9000.mp3?controlsList=nodownload-nofullscreen-noremoteplayback)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['hal9000.mp3'].controlsList('nodownload nofullscreen noremoteplayback') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n#### muted\n\nAllows setting whether audio is `muted` on load. Defaults to `false` by omission if not set.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Hal 9000: I'm Sorry Dave](hal9000.mp3?muted=1)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['hal9000.mp3'].muted(1) }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n#### loop\n\nAllows setting whether audio will `loop` upon playing through completion. Defaults to `false` by omission if not set.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Hal 9000: I'm Sorry Dave](hal9000.mp3?loop=1)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['hal9000.mp3'].loop(1) }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n## File Actions\n\nGrav does not provide any custom actions on files at this point in time and there are no plans to add any. Should you think of something, please contact us.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n[View Text File](acronyms.txt)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n<a href=\"{{ page.media['acronyms.txt'].url() }}\">View Text File<\/a>\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n[View Text File](acronyms.txt)\n\n### Combinations\n\nAs you can see: Grav provides some powerful image manipulation functionality that makes it really easy to work with images!  The real power comes when you combine multiple effects and produce some very sophisticated dynamic image manipulations.  For example, this is totally valid:\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Sample Image](sample-image.jpg?negate&lightbox&cropZoom=200,200)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['sample-image.jpg'].negate.lightbox.cropZoom(200,200) }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Sample Image](sample-image.jpg?negate&lightbox&cropZoom=200,200)\n\n#### Resetting multiple calls to the same image\n\nWhen you access the same image multiple times in a single page, actions you have provided to the image are not reset by default.  So if you resize an image, and output the HTML, then later in the same page, simply output the image URL, you will also get the URL to the resized image. You were probably expecting the URL to the original image.\n\nTo combat this, you can reset the actions on the images by passing `false` to the `url()` method:\n\n{% verbatim %}\n```twig\n{% for item in page.header.gallery %}\n    {% set image = page.media[item.src].cropZoom(800, 600).quality(70) %}\n    <a href=\"{{ image.url(false) }}\">\n      <img src=\"{{ image.url }}\" alt=\"{{ item.alt }}\" title=\"{{ item.title }}\" \/>\n    <\/a>\n{% endfor %}\n```\n{% endverbatim %}\n\n### Responsive images\n\n#### Higher density displays\n\nGrav has built-in support for responsive images for higher density displays (e.g. **Retina** screens). Grav accomplishes this by implementing `srcset` from the [Picture element HTML proposal](https:\/\/html.spec.whatwg.org\/multipage\/embedded-content.html#the-picture-element). A good article to read if you want to understand this better is [this blog post by Eric Portis](http:\/\/ericportis.com\/posts\/2014\/srcset-sizes\/).\n\n!! Grav sets the `sizes` argument mentioned in the posts above to full viewport width by default. Use the `sizes` action showcased below to choose yourself.\n\nTo start using responsive images, all you need to do is add higher density images to your pages by adding a suffix to the file name. If you only provide higher density images, Grav will automatically generate lower quality versions for you. Naming works as follows: `[image-name]@[density-ratio]x.[image-extension]`, so for example adding `sample-image@3x.jpg` to your page will result in Grav creating a `2x` and a `1x` (regular size) version by default.\n\n! These files generated by Grav will be stored in the `images\/` cache folder, not your page folder.\n\nLet's assume you have a file called `retina@2x.jpg`, you would actually reference this in your links as `retina.jpg`, and then Grav will not find this image, and start looking for retina image sizes.  It will find `retina@2x.jpg` and then realize it needs to make a `@1x` variant and display the appropriate `srcset` output:\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Retina Image](retina.jpg?sizes=80vw)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['retina.jpg'].sizes('80vw').html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n{% set code_sample %}\n![Retina Image](retina.jpg?sizes=80vw)\n{% endset %}\n```html\n{{ code_sample|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Retina Image](retina.jpg?sizes=80vw)\n\n!!!! Depending on your display and your browser's implementation and support for `srcset`, you might never see a difference. We included the HTML markup in the third tab so you can see what's happening behind the screens.\n\n##### Sizes with media queries\n\nGrav also has support for media queries inside the `sizes` attribute, allowing you to use different widths depending on the device's screen size. In contrast to the first method, you don't have to create multiple images; they will get created automatically. The fallback image is the current image, so a browser without support for `srcset`, will display the original image.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Retina Image](retina.jpg?sizes=%28max-width%3A26em%29+100vw%2C+50vw)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['retina.jpg'].sizes('(max-width:26em) 100vw, 50vw').html('Retina Image') }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n{% set code_sample %}\n![Retina Image](retina.jpg?sizes=%28max-width%3A26em%29+100vw%2C+50vw)\n{% endset %}\n```html\n{{ code_sample|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Retina Image](retina.jpg?sizes=%28max-width%3A26em%29+100vw%2C+50vw)\n\n!!!! Depending on your display and your browser's implementation and support for `srcset`, you might never see a difference. We included the HTML markup in the fourth tab so you can see what's happening behind the screens.\n\n##### Sizes with media queries using derivatives\n\nIf you want to customize the sizes of the automatically created files, you can use the `derivatives()` method (as shown below). The first parameter is the width of the smallest of the generated images. The second is the maximum width of the generated images. The third, and only optional parameter, dictates the intervals with which to generate the photos (default is 200). For example, if you set the first parameter to be `320` and the third to be `100`, Grav will generate an image for 320, 420, 520, 620, and so on until it reaches its set maximum.\n\nIn our example, we set the maximum to `1600`. This will result in increments of 300 being met from `320` to `1520` as `1620` would be above the threshold.\n\n!! For the moment it does not work inside markdown, only in your ```twig``` files.\n\n[ui-tabs]\n[ui-tab title=\"Markdown\"]\n```markdown\n![Retina Image](retina.jpg?derivatives=320,1600,300&sizes=%28max-width%3A26em%29+100vw%2C+50vw)\n```\n[\/ui-tab]\n[ui-tab title=\"Twig\"]\n{% verbatim %}\n```twig\n{{ page.media['retina.jpg'].derivatives(320,1600,300).sizes('(max-width:26em) 100vw, 50vw').html() }}\n```\n{% endverbatim %}\n[\/ui-tab]\n[ui-tab title=\"HTML Code\"]\n{% set code_sample %}\n![Retina Image](retina.jpg?derivatives=320,1600,300&sizes=%28max-width%3A26em%29+100vw%2C+50vw)\n{% endset %}\n```html\n{{ code_sample|e }}\n```\n[\/ui-tab]\n[\/ui-tabs]\n\n##### Result:\n\n![Retina Image](retina.jpg?derivatives=320,1600,300&sizes=%28max-width%3A26em%29+100vw%2C+50vw)\n\n!!!! Depending on your display and your browser's implementation and support for `srcset`, you might never see a difference. We included the HTML markup in the fourth tab so you can see what's happening behind the screens.\n\n\n#### Manual size definition\n\nInstead of letting Grav generate the sizes in even steps between given boundaries, you may manually define which sizes Grav should generate:\n\n```markdown\n![Retina Image](retina.jpg?derivatives=[360,720,1200])\n```\n\nThis will generate downsizes versions of the `retina.jpg` image in three widths: 360, 720 and 1200px.\n\n## Metafiles\n\nEvery medium that you reference in Grav, e.g. `image1.jpg`, `sample-trailer.mov`, or even `archive.zip` has the ability to have variables set or even overridden via a **metafile**.  These files take the format of `<filename>.meta.yaml`.  For example, for an image with the filename `image1.jpg` you could create a metafile called `image1.jpg.meta.yaml`.\n\nYou can add just about any setting or piece of metadata you would like using this method.\n\nThe contents of this file should be in YAML syntax, an example could be:\n\n```yaml\nimage:\n    filters:\n        default:\n            - [cropResize, 300, 300]\n            - sharp\nalt_text: My Alt Text\n```\n\nIf you are using this method to add file-specific styling or meta tags for a single file, you will want to put the YAML file in the same folder as the referenced file. This will ensure that the file is pulled along with the YAML data. It's a handy way to even set file-specific metadata as you are unable to do so from the page itself.\n\nLet's say you wanted to just pull the `alt_text` value listed for the image file `sample-image.jpg`. You would then create a file called `sample-image.jpg.meta.yaml` and place it in the folder with the referenced image file. Then, insert the data used in the example above and save that YAML file. In the markdown file for the page, you can display this data by using the following line:\n\n{% verbatim %}\n```yaml\n{{ page.media['sample-image.jpg'].meta.alt_text }}\n```\n{% endverbatim %}\n\nThis will pull up the example phrase `My Alt Text` instead of the image. This is just a basic example. You can use this method for a number of things, including creating a gallery with multiple unique data points you want to have referenced for each image. Your images, in essence, have a set of data unique to them that can be easily referenced and pulled as needed.\n\n## Video Options\n\nIn-line video control options are another capability baked into Grav. These options, added in-line with the file name, give you the ability to determine an embedded video's `autoplay`, `controls`, and `loop` settings.\n\nHere is an example:\n\n```markdown\n![video.mov](video.mov?loop=1&controls=0&autoplay=1)\n```\n\nThe options are as follows:\n\n[div class=\"table-keycol\"]\n| Attribute   | Explanation                                                                               |\n| :-----      | :-----                                                                                    |\n| autoplay    | Enables (`1`) or Disables (`0`) autoplay for the video on pageload.                       |\n| controls    | Enables (`1`) or Disables (`0`) media controls for the embedded video.                    |\n| loop        | Enables (`1`) or Disables (`0`) automatic looping for the video, replaying it as it ends. |\n[\/div]\n\n\n"},{"title":"Page Collections","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/content\/collections","taxonomy":{"categories":["docs"],"tags":[]},"content":"Collections have grown considerably since the early betas of Grav. We started off with a very limited set of page-based collections, but with the help of our community, we have increased these capabilities to make them even more powerful!  So much so that they now have their own section in the documentation.\n\n## Basics of Grav Collections\n\nIn Grav, the most common type of collection is a list of pages that can be defined either in the page's frontmatter or in the twig itself. The most common is to define a collection in the frontmatter. With a collection defined, it is available in the Twig of the page to do with as you wish. By using page collection methods or looping through each [page object](https:\/\/learn.getgrav.org\/themes\/theme-vars#page-object) and using the page methods or properties you can do powerful things. Common examples of this include displaying a list of blog posts or displaying modular sub-pages to render a complex page design.\n\n## Collection Object\n\nWhen you define a collection in the page header, you are dynamically creating a [Grav Collection](https:\/\/github.com\/getgrav\/grav\/blob\/develop\/system\/src\/Grav\/Common\/Page\/Collection.php) that is available in the page's Twig.  This Collection object is **iterable** and can be treated like an **array** which allows you to do things such as:\n\n[prism classes=\"language-twig line-numbers\"]\n{{ dump(page.collection[page.path]) }}\n[\/prism]\n\n## Example Collection Definition\n\nAn example collection defined in the page's frontmatter:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.children'\n    order:\n        by: date\n        dir: desc\n    limit: 10\n    pagination: true\n[\/prism]\n\nThe `content.items` value in the page's frontmatter tells Grav to gather up a collection of items and information passed to this defines how the collection is to be built.\n\nThis definition creates a collection for the page that consists of the all **child pages** sorted by **date** in **descending** order with **pagination** showing **10 items** per-page.\n\n## Accessing Collections in Twig\n\nWhen this collection is defined in the header, Grav creates a collection **page.collection** that you can access in a twig template with:\n\n[prism classes=\"language-twig line-numbers\"]\n{% for p in page.collection %}\n<h2>{{ p.title }}<\/h2>\n{{ p.summary }}\n{% endfor %}\n[\/prism]\n\nThis simply loops over the [pages](https:\/\/learn.getgrav.org\/themes\/theme-vars#page-object) in the collection displaying the title and summary.\n\nYou can also include an order parameter to change the default ordering of pages:\n\n[prism classes=\"language-twig line-numbers\"]\n{% for p in page.collection.order('folder','asc') %}\n<h2>{{ p.title }}<\/h2>\n{{ p.summary }}\n{% endfor %}\n[\/prism]\n\n## Collection Headers\n\nTo tell Grav that a specific page should be a listing page and contain child-pages, there are a number of variables that can be used:\n\n### Summary of collection options\n\n[div class=\"table-keycol\"]\n|                   String                  |                           Result                          |\n|-------------------------------------------|-----------------------------------------------------------|\n| `'@root'`                                   | Get the root children                                     |\n| `'@root.children'`                          | Get the root children (alternative)                       |\n| `'@root.descendants'`                       | Get the root and recurse through ALL children             |\n|                                           |                                                           |\n| `'@self.parent'`                            | Get the parent of the current page                        |\n| `'@self.siblings'`                          | A collection of all other pages on this level             |\n| `'@self.modular'`                           | Get only the modular children                             |\n| `'@self.children'`                          | Get the non-modular children                              |\n| `'@self.descendants'`                       | Recurse through all the non-modular children              |\n|                                           |                                                           |\n| `'@page': '\/fruit'`                         | Get all the children of page `\/fruit`                     |\n| `'@page.children': '\/fruit'`                | Alternative to above                                      |\n| `'@page.self': '\/fruit'`                    | Get a collection with only the page `\/fruit`              |\n| `'@page.page': '\/fruit'`                    | Alternative to above                                      |\n| `'@page.descendants': '\/fruit'`             | Get and recurse through all the children of page `\/fruit` |\n| `'@page.modular': '\/fruit'`                | Get a collection of all modular subpages of `\/fruit`      |\n|                                           |                                                           |\n| `'@taxonomy.tag': photography`              | taxonomy with tag=`photography`                           |\n| `'@taxonomy': {tag: birds, category: blog}` | taxonomy with tag=`birds` && category=`blog`              |\n[\/div]\n\n! This document outlines the use of `@page`, `@taxonomy.category` etc, but a more YAML-safe alternative format is `page@`, `taxonomy@.category`.  All the `@` commands can be written in either prefix or postfix format.\n\nWe will cover these more in detail. \n\n## Root Collections\n\n##### @root - Top level children\n\nThis can be used to retrieve the top\/root level **published non-modular children** of a site. Particular useful for getting the items that make up the primary navigation for example:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@root'\n[\/prism]\n\nan alias is also valid:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@root.children'\n[\/prism]\n\n##### @root - Top level children + all descendants\n\nThis will effectively get every page in your site as it recursively navigates through all the children from the root page down, and builds a collection of **all** the **published non-modular children** of a site.\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@root.descendants'\n[\/prism]\n\n## Self Collections\n\n##### @self.children - Children of the current page\n\nThis is used to list the **published non-modular children** of the current page:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.children'\n[\/prism]\n\n##### @self.descendants - Non-modular children + all descendants of the current page\n\nSimilar to `.children`, the `.descendants` collection will retrieve all the **published non-modular children** but continue to recurse through all their children.\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.descendants'\n[\/prism]\n\n##### @self.modular - Modular children of the current page\n\nThe inverse of `.children`, this method retrieves only **published modular children** of the current page (`_features`, `_showcase`, etc.)\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.modular'\n[\/prism]\n\n##### @self.parent - The parent page of the current page\n\nThis is a special case collection because it will always return just the one **parent** of the current page\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.parent'\n[\/prism]\n\n##### @self.siblings - All the sibling pages\n\nThis collection will collect all the **published** Pages at the same level of the current page, excluding the current page.\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.siblings'\n[\/prism]\n\n## Page Collections\n\n##### @page or @page.children - Collection of children of a specific page\n\nThis collection takes a slug route of a page as an argument and will return all the **published non-modular** children of that page\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items:\n      '@page': '\/blog'\n[\/prism]\n\nalternatively:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items:\n      '@page.children': '\/blog'\n[\/prism]\n\n##### @page.self or @page.page - Collection of just the specific page\n\nThis collection takes a slug route of a page as an argument and will return collection containing that page (if it is **published and non-modular**)\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items:\n      '@page.self': '\/blog'\n[\/prism]\n\n##### @page.descendants - Collection of children + all descendants of a specific page\n\nThis collection takes a slug route of a page as an argument and will return all the **published non-modular** children and all their descendants of that page\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items:\n      '@page.descendants': '\/blog'\n[\/prism]\n\n##### @page.modular - Collection of modular children of a specific page\n\nThis collection takes a slug route of a page as an argument and will return all the **published modular** children of that page\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items:\n      '@page.modular': '\/blog'\n[\/prism]\n\n\n## Taxonomy Collections\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n   items:\n      '@taxonomy.tag': foo\n[\/prism]\n\nUsing the `@taxonomy` option, you can utilize Grav's powerful taxonomy functionality.  This is where the `taxonomy` variable in the [Site Configuration](..\/..\/basics\/grav-configuration#site-configuration) file comes into play. There **must** be a definition for the taxonomy defined in that configuration file for Grav to interpret a page reference to it as valid.\n\nBy setting `@taxonomy.tag: foo`, Grav will find all the **published pages** in the `\/user\/pages` folder that have themselves set `tag: foo` in their taxonomy variable.\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items:\n       '@taxonomy.tag': [foo, bar]\n[\/prism]\n\nThe `content.items` variable can take an array of taxonomies and it will gather up all pages that satisfy these rules. Published pages that have **both** `foo` **and** `bar` tags will be collected.  The [Taxonomy](..\/taxonomy) chapter will cover this concept in more detail.\n\n!! If you wish to place multiple variables inline, you will need to separate sub-variables from their parents with `{}` brackets. You can then separate individual variables on that level with a comma. For example: `'@taxonomy': {category: [blog, featured], tag: [foo, bar]}`. In this example, the `category` and `tag` sub-variables are placed under `@taxonomy` in the hierarchy, each with listed values placed within `[]` brackets. Pages must meet **all** these requirements to be found.\n\nIf you have multiple variables in a single parent to set, you can do this using the inline method, but for simplicity, we recommend using the standard method. Here is an example.\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n  items:\n    '@taxonomy':\n      category: [blog, featured]\n      tag: [foo, bar]\n[\/prism]\n\nEach level in the hierarchy adds two whitespaces before the variable. YAML will allow you to use as many spaces as you want here, but two is standard practice. In the above example, both the `category` and `tag` variables are set under `@taxonomy`.\n\n### Complex Collections\n\nYou can also provide multiple complex collection definitions and the resulting collection will be the sum of all the pages found from each of the collection definitions. For example:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n  items:\n    - '@self.children'\n    - '@taxonomy':\n         category: [blog, featured]\n[\/prism]\n\nAdditionally, you can filter the collection by using `filter: type: value`. The type can be any of the following: `published`, `non-published`, `visible`, `non-visible`, `modular`, `non-modular`, `routable`, `non-routable`, `type`, `types`, `access`. These correspond to the [Collection-specific methods](#collection-object-methods), and you can use several to filter your collection. They are all either `true` or `false`, except for `type` which takes a single template-name, `types` which takes an array of template-names, and `access` which takes an array of access-levels. For example:\n\n[prism classes=\"language-yaml line-numbers\"]\n content:\n  items: '@self.siblings'\n  filter: \n    published: true\n    type: 'blog'\n[\/prism]\n\n### Ordering Options\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    order:\n        by: date\n        dir: desc\n    limit: 5\n    pagination: true\n[\/prism]\n\nOrdering of sub-pages follows the same rules as ordering of folders, the available options are:\n\n[div class=\"table-keycol\"]\n| Ordering     | Details                                                                                                                                            |\n| :----------  | :----------                                                                                                                                        |\n| `default`    | The order based on the file system, i.e. `01.home` before `02.advark`                                                                              |\n| `title`      | The order is based on the title as defined in each page                                                                                            |\n| `basename`   | The order is based on the alphabetic folder name after it has been processed by the `basename()` PHP function                                      |\n| `date`       | The order based on the date as defined in each page                                                                                                |\n| `modified`   | The order based on the modified timestamp of the page                                                                                              |\n| `folder`     | The order based on the folder name with any numerical prefix, i.e. `01.`, removed                                                                  |\n| `header.x`   | The order based on any page header field. i.e. `header.taxonomy.year`. Also a default can be added via a pipe. i.e. `header.taxonomy.year|2015`    |\n| `manual`     | The order based on the `order_manual` variable                                                                                                     |\n| `random`     | The order is randomized                                                                                                                            |\n| `custom`     | The order is based on the `content.order.custom` variable                                                                                                                             |\n| `sort_flags` | Allow to override sorting flags for page header-based or default ordering. If the `intl` PHP extension is loaded, only [these flags](https:\/\/secure.php.net\/manual\/en\/collator.asort.php) are available. Otherwise, you can use the PHP [standard sorting flags](https:\/\/secure.php.net\/manual\/en\/array.constants.php). |\n[\/div]\n\nThe `content.order.dir` variable controls which direction the ordering should be in. Valid values are either `desc` or `asc`.\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    order:\n        by: default\n        custom:\n            - _showcase\n            - _highlights\n            - _callout\n            - _features\n    limit: 5\n    pagination: true\n[\/prism]\n\nIn the above configuration, you can see that `content.order.custom` is defining a **custom manual ordering** to ensure the page is constructed with the **showcase** first, **highlights** section second etc. Please note that if a page is not specified in the custom ordering list, then Grav falls back on the `content.order.by` for the unspecified pages.\n\nIf a page has a custom slug, you must use that slug in the `content.order.custom` list.\n\nThe `content.pagination` is a simple boolean flag to be used by plugins etc to know if **pagination** should be initialized for this collection. `content.limit` is the number of items displayed per-page when pagination is enabled.\n\n### Date Range\n\nNew as of **Grav 0.9.13** is the ability to filter by a date range:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.children'\n    dateRange:\n        start: 1\/1\/2014\n        end: 1\/1\/2015\n[\/prism]\n\nYou can use any string date format supported by [strtotime()](http:\/\/php.net\/manual\/en\/function.strtotime.php) such as `-6 weeks` or `last Monday` as well as more traditional dates such as `01\/23\/2014` or `23 January 2014`. The dateRange will filter out any pages that have a date outside the provided dateRange.  Both **start** and **end** dates are optional, but at least one should be provided.\n\n### Multiple Collections\n\nWhen you create a collection with `content: items:` in your YAML, you are defining a single collection based on a several conditions.  However, Grav does let you create an arbitrary set of collections per page, you just need to create another one:\n\n[prism classes=\"language-yaml line-numbers\"]\ncontent:\n    items: '@self.children'\n    order:\n        by: date\n        dir: desc\n    limit: 10\n    pagination: true\n\nfruit:\n    items:\n       '@taxonomy.tag': [fruit]\n[\/prism]\n\nThis sets up **2 collections** for this page, the first uses the default `content` collection, but the second one defines a taxonomy-based collection called `fruit`.  To access these two collections via Twig you can use the following syntax:\n\n[prism classes=\"language-yaml line-numbers\"]\n{% set default_collection = page.collection %}\n{% set fruit_collection = page.collection('fruit') %}\n[\/prism]\n\n## Collection Object Methods\n\nStandard methods Iterable methods include:\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| `Collection::append($items)` | Add another collection or array |\n| `Collection::first()` | Get the first item in the collection |\n| `Collection::last()` | Get the last item in the collection |\n| `Collection::random($num)` | Pick `$num` random items from the collection |\n| `Collection::reverse()` | Reverse the order of the collection |\n| `Collection::shuffle()` | Randomize the entire collection |\n| `Collection::slice($offset, $length)` | Slice the list |\n[\/div]\n\nAlso has several useful Collection-specific methods:\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| `Collection::addPage($page)` | You can append another page to this collection |\n| `Collection::copy()` | Creates a copy of the current collection |\n| `Collection::current()` | gets the current item in the collection |\n| `Collection::key()` | Returns the current slug of the the current item |\n| `Collection::remove($path)` | Removes a specific page in the collection, or current if `$path = null` |\n| `Collection::order($by, $dir, $manual)` | Orders the current collection |\n| `Collection::intersect($collection2)` | Merge two collections, keeping items that occur in both collections (like an \"AND\" condition) |\n| `Collection::isFirst($path)` | Determines if the page identified by path is first |\n| `Collection::isLast($path)` | Determines if the page identified by path is last |\n| `Collection::prevSibling($path)` | Returns the previous sibling page if possible |\n| `Collection::nextSibling($path)` | Returns the next sibling page if possible |\n| `Collection::currentPosition($path)` | Returns the current index |\n| `Collection::dateRange($startDate, $endDate, $field)` | Filters the current collection with dates |\n| `Collection::visible()` | Filters the current collection to include only visible pages |\n| `Collection::nonVisible()` | Filters the current collection to include only non-visible pages |\n| `Collection::merge($collection2)` | Merge two collections, keeping items that occur in either collection (like an \"OR\" condition) |\n| `Collection::modular()` | Filters the current collection to include only modular pages |\n| `Collection::nonModular()` | Filters the current collection to include only non-modular pages |\n| `Collection::published()` | Filters the current collection to include only published pages |\n| `Collection::nonPublished()` | Filters the current collection to include only non-published pages |\n| `Collection::routable()` | Filters the current collection to include only routable pages |\n| `Collection::nonRoutable()` | Filters the current collection to include only non-routabe pages |\n| `Collection::ofType($type)` | Filters the current collection to include only pages where template = `$type` |\n| `Collection::ofOneOfTheseTypes($types)` | Filters the current collection to include only pages where template is in the array `$types` |\n| `Collection::ofOneOfTheseAccessLevels($levels)` | Filters the current collection to include only pages where page access is in the array of `$levels` |\n[\/div]\n\nHere is an example taken from the **Learn2** theme's **docs.html.twig** that defines a collection based on taxonomy (and optionally tags if they exist) and uses the `Collection::isFirst` and `Collection::isLast` methods to conditionally add page navigation:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set tags = page.taxonomy.tag %}\n{% if tags %}\n    {% set progress = page.collection({'items':{'@taxonomy':{'category': 'docs', 'tag': tags}},'order': {'by': 'default', 'dir': 'asc'}}) %}\n{% else %}\n    {% set progress = page.collection({'items':{'@taxonomy':{'category': 'docs'}},'order': {'by': 'default', 'dir': 'asc'}}) %}\n{% endif %}\n\n{% block navigation %}\n        <div id=\"navigation\">\n        {% if not progress.isFirst(page.path) %}\n            <a class=\"nav nav-prev\" href=\"{{ progress.nextSibling(page.path).url }}\"> <i class=\"fa fa-chevron-left\"><\/i><\/a>\n        {% endif %}\n\n        {% if not progress.isLast(page.path) %}\n            <a class=\"nav nav-next\" href=\"{{ progress.prevSibling(page.path).url }}\"><i class=\"fa fa-chevron-right\"><\/i><\/a>\n        {% endif %}\n        <\/div>\n{% endblock %}\n[\/prism]\n\n`nextSibling()` is up the list and `prevSibling()` is down the list, this is how it works:\n\nAssuming you have the pages:\n\n[prism classes=\"language-txt line-numbers\"]\nProject A\nProject B\nProject C\n[\/prism]\n\nYou are on Project A, the previous page is Project B.\nIf you are on Project B, the previous page is Project C and next is Project A\n\n\n## Programmatic Collections\n\nYou can take full control of collections directly from PHP in Grav plugins, themes, or even from Twig.  This is a more hard-coded approach compared to defining them in your page frontmatter, but it also allows for more complex and flexible collections logic.\n\n### PHP Collections\n\nYou can perform advanced collection logic with PHP, for example:\n\n[prism classes=\"language-php line-numbers\"]\n$collection = new Collection($pages);\n$collection->setParams(['taxonomies' => ['tag' => ['dog', 'cat']]])->dateRange('01\/01\/2016', '12\/31\/2016')->published()->ofType('blog-item')->order('date', 'desc');\n\n$titles = [];\n\nforeach ($collection as $page) {\n    $titles[] = $page->title();\n}\n[\/prism]\n\nThe `order()`-function can also, in addition to the `by`- and `dir`-parameters, take a `manual`- and `sort_flags`-parameter. These are [documented above](#ordering-options). You can also use the same `evaluate()` method that the frontmatter-based page collections make use of:\n\n[prism classes=\"language-php line-numbers\"]\n$page = Grav::instance()['page'];\n$collection = $page->evaluate(['@page.children' => '\/blog', '@taxonomy.tag' => 'photography']);\n$ordered_collection = $collection->order('date', 'desc');\n[\/prism]\n\nAnd another example of custom ordering would be:\n\n[prism classes=\"language-php line-numbers\"]\n$ordered_collection = $collection->order('header.price','asc',null,SORT_NUMERIC);\n[\/prism]\n\nYou can also do similar directly in **Twig Templates**:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set collection = page.evaluate([{'@page.children':'\/blog', '@taxonomy.tag':'photography'}]) %}\n{% set ordered_collection = collection.order('date','desc') %}\n[\/prism]\n\n#### Advanced Collections\n\nBy default when you call `page.collection()` in the Twig of a page that has a collection defined in the header, Grav looks for a collection called `content`.  This allows the ability to define [multiple collections](#multiple-collections), but you can even take this a step further.\n\nIf you need to programatically generate a collection, you can do so by calling `page.collection()` and passing in an array in the same format as the page header collection definition.  For example:\n\n[prism classes=\"language-twig line-numbers\"]\n{% set options = { items: {'@page.children': '\/my\/pages'}, 'limit': 5, 'order': {'by': 'date', 'dir': 'desc'}, 'pagination': true } %}\n{% set my_collection = page.collection(options) %}\n\n<ul>\n{% for p in my_collection %}\n<li>{{ p.title }}<\/li>\n{% endfor %}\n<\/ul>\n[\/prism]\n\nGenerating menu for the whole site (you need to set *menu* property in the page's frontmatter):\n\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Home\nmenu: Home\n---\n[\/prism]\n\n[prism classes=\"language-twig line-numbers\"]\n{% set options = { items: {'@root.descendants':''}, 'order': {'by': 'folder', 'dir': 'asc'}} %}\n{% set my_collection = page.collection(options) %}\n\n{% for p in my_collection %}\n{% if p.header.menu %}\n\t<ul>\n\t{% if page.slug == p.slug %}\n\t\t<li class=\"{{ p.slug }} active\"><span>{{ p.menu }}<\/span><\/li>\n\t{% else %}\n\t\t<li class=\"{{ p.slug }}\"><a href=\"{{ p.url }}\">{{ p.menu }}<\/a><\/li>\n\t{% endif %}\n\t<\/ul>\n{% endif %}\n{% endfor %}\n[\/prism]\n"},{"title":"Headers \/ Frontmatter","date":"2019-04-05T22:59:57+00:00","url":"http:\/\/localhost\/docs\/content\/headers","taxonomy":{"categories":["docs"],"tags":[]},"content":"The headers (alternatively known as frontmatter) at the top of a page are completely optional, you do not need them at all for a page to display within Grav. There are 3 primary types of pages (**Standard**, **Listing**, and **Modular**) within Grav, and each has relevant headers.\n\n! Headers are also known as **Page Frontmatter** and are commonly referred to as such so as not to be confused with HTTP Headers.\n\n## Basic Page Headers\n\nThere are a number of basic header options available.\n\n### Cache Enable\n\n```yaml\ncache_enable: false\n```\n\nBy default, Grav will cache the contents of the page file to ensure things run as fast as possible.  There are advanced scenarios where you do not want the page to be cached.\n\nAn example of this is when you are using dynamic Twig variables in your content. The `cache_enable` variable allows this behavior to be overridden.  We will cover Twig Content variables in a later chapter. Valid values are `true` or `false`.\n\n### Date\n\n```yaml\ndate: 01\/01\/2014 3:14pm\n```\n\nThe `date` variable allows you to specifically set a date associated with this page.  This is often used to indicate when a post was created and can be used for display or sort-order purposes.  If not set, this defaults to the last **modified time** of the page.\n\n! Dates in the `m\/d\/y` or `d-m-y` formats are disambiguated by looking at the separator between the various components: if the separator is a slash (`\/`), then the **American** `m\/d\/y` is assumed; whereas if the separator is a dash (`-`) or a dot (`.`), then the **European** `d-m-y` format is assumed.\n\n### Menu\n\n```yaml\nmenu: My Page\n```\n\nThe `menu` variable lets you set the text to be used in the navigation. There are several layers of fall-backs for the menu, so if no `menu` variable is set, Grav will try to use the `title` variable.\n\n### Published\n\n```yaml\npublished: true\n```\n\nBy default, a page is **published** unless you explicitly set `published: false` or via a `publish_date` being in the future, or `unpublish_date` in the past. Valid values are `true` or `false`.\n\n### Slug\n\n```yaml\nslug: my-page-slug\n```\n\nThe `slug` variable allows you to specifically set the page's portion of the URL. For example: `http:\/\/yoursite.com\/my-page-slug` would be the URL if you set the `slug` above.  If the `slug` is not set in the page, Grav falls back to using the folder name (without any numerical prefixes).\n\n[Slugs](http:\/\/en.wikipedia.org\/wiki\/Semantic_URL#Slug) are generally entirely lowercase, with accented characters replaced by letters from the English alphabet and whitespace characters replaced by a dash or an underscore. While future versions of Grav will support spaces in slugs, having blank spaces or capital lettering is not recommended.\n\nFor example: If a blog post's title is `Blog Post Example`, the recommended slug would be `blog-post-example`.\n\n### Taxonomy\n\n```yaml\ntaxonomy:\n    category: blog\n    tag: [sample, demo, grav]\n```\n\nA very useful header variable, `taxonomy` lets you assign values to **taxonomy** you defined as valid types in the [Site Configuration](..\/..\/basics\/grav-configuration#site-configuration) file.\n\nIf the taxonomy is not defined in that file, it will be ignored.  In this example, the page is defined as being in the `blog` category, and has the tags: `sample`, `demo`, and `grav`.  These taxonomies can be used to find these pages from other pages, plugins and even themes. The [Taxonomy](..\/taxonomy) chapter will cover this concept in more detail.\n\n### Title\n\nIf you have no headers at all, you will not have any control over the title of the page as it shows in the browser and search engines.  For this reason, it is recommended to _at least_ put the `title` variable in the header of the page:\n\n```yaml\ntitle: Title of my Page\n```\n\nIf the `title` variable is not set, Grav has a fallback solution, and will try to use the capitalized `slug` variable.\n\n## Advanced Headers\n\nThese are still important but less commonly used. They can be used to provide advanced functionality within your page.\n\n### Append URL extension\n\n```yaml\nappend_url_extension: '.json'\n```\n\nAllows the page to override the default extension and set one programatically.  It will also set the appropriate header attributes for the response.\n\n### Cache-control\n\n```yaml\ncache_control: max-age=604800\n```\n\nCan be blank for no setting, or a [valid](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Headers\/Cache-Control) `cache-control` text value\n\n### Date Format\n\n```yaml\ndateformat: 'Y-m-d H:i:s'\n```\n\nOverrides the default Grav configuration for date formats and lets it be set at the page level. You can use any of the [PHP date formats](http:\/\/php.net\/manual\/en\/datetime.formats.date.php) available.\n\n### Debugger\n\nWhen you enable the debugger via the `system.yaml` configuration file, the debugger will display on every page.  There are cases where this may not be desirable or may cause conflicts with the output.  Such an example is when you are requesting a page that is intended to return rendered HTML to an Ajax call.  This should not have the debugger injected into the resulting data.  To disable the debugger on this page you can use the `debugger` page header:\n\n```yaml\ndebugger: false\n```\n\n### ETag\n\n```yaml\netag: true\n```\n\nEnable or disable on a page level whether or not to display an ETag header variable with a unique value. False by default unless overridden in your `system.yaml`.\n\n### Expires\n\n```yaml\nexpires: 604800\n```\n\nPage expires time in seconds (604800 seconds = 7 days) (`no cache` is also possible).\n\n### External Url\n\n```yaml\nexternal_url: https:\/\/www.mysite.com\/foo\/bar\n```\n\nAllows you to override the dynamically generated URL with one you explicitly provide.\n\n\n### HTTP Response Code\n\n```yaml\nhttp_response_code: 404\n```\n\nAllows the dynamic setting of an HTTP Response Code.\n\n### Language\n\n```yaml\nlanguage: fr\n```\n\nThis allows you to override the language for a paritcular page\n\n### LastModified\n\n```yaml\nlast_modified: true\n```\n\nEnable or disable on a page level whether or not to display a Last Modified header variable with modified date. False by default unless overridden in your `system.yaml`.\n\n### Lightbox\n\n```yaml\nlightbox: true\n```\n\nAlthough strictly speaking this is not a standard page header, it is a common way to enable the loading of a standard lightbox JavaScript and CSS for a page.  By default the core `antimatter` theme does not load the prerequisites to enable lightbox capabilities of images, be sure to install a lightbox plugin such as **Featherlight**, which is available via GPM.\n\n### Login Redirect Here\n\n```yaml\nlogin_redirect_here: false\n```\n\nThe `login_redirect_here` header enables you to determine whether or not someone is kept on that page after logging in through the [Grav Login Plugin](https:\/\/github.com\/getgrav\/grav-plugin-login). Setting this header to `false` will forward someone to the prior page after a successful login.\n\nA `true` setting here will enable the person to stay on the current page after a successful login. This is also the default setting, which applies if there is no `login_redirect_here` header in the frontmatter.\n\nYou can override this default behavior by forcing a standard location by specifying an explicit option in your Login configuration YAML:\n\n```yaml\nredirect_after_login: '\/profile'\n```\n\nThis will always take you to the `\/profile` route after a successful login.\n\n### Markdown\n\n```yaml\n  markdown:\n    extra: false\n    auto_line_breaks: false\n    auto_url_links: false\n    escape_markup: false\n    special_chars:\n      '>': 'gt'\n      '<': 'lt'\n```\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **extra:** | Enable support for Markdown Extra support (GFM by default) |\n| **auto_line_breaks:** | Enable automatic line breaks |\n| **auto_url_links:** | Enable automatic HTML links |\n| **escape_markup:** | Escape markup tags into entities |\n| **special_chars:** | List of special characters to automatically convert to |\n[\/div]\n\nYou can enable these globally via your `user\/config\/system.yaml` configuration file, or you can override this global setting _per-page_ with this `markdown` header option.\n\n### Never Cache Twig\n\n```yaml\nnever_cache_twig: true\n```\n\nEnabling this will allow you to add a processing logic that can change dynamically on each page load, rather than caching the results and storing it for each page load. This can be enabled\/disabled site-wide in the **system.yaml**, or on a specific page. Can be set `true` or `false`.\n\nThis is a subtle change, but one that is especially useful in modular pages as it keeps you from having to constantly disable caching when you're working with it. The page is still cached, but not the Twig. The Twig is processed after the cached content is retrieved. For modular forms, it now works with just this setting rather than having to disable the modular page cache.\n\n!! This is not compatible with `twig_first: true` currently because all processing is happening in the one Twig call.\n\n### Process\n\n```yaml\nprocess:\n\tmarkdown: false\n\ttwig: true\n```\n\nProcessing of the page is another advanced capability. By default Grav will process `markdown` but will **not** process `twig` in a page.  This choice to not process Twig by default is purely for performance reasons as this is not a commonly needed feature.  The `process` variable allows you to override this behavior.\n\nYou may want to disable `markdown` on a particular page if you want to use 100% HTML in your page and not have the markdown process run at all.  Also it allows a plugin to process content in another manner completely. Valid values are `true` or `false`.\n\nThere are situations when you want to use Twig templating functionality in your content, and this is accomplished by setting the `twig` variable to true.\n\n### Process Twig First\n\n```yaml\ntwig_first: false\n```\n\nIf set to `true` Twig processing will occur before any Markdown processing. This can be particularly useful if your Twig generates markdown that needs to be available in order to be processed by the Markdown compiler.  One thing to note, if have `cache_enable: false` **and** `twig_first: true` page caching is effectively disabled.\n\n### Publish Date\n\n```yaml\npublish_date: 01\/23\/2015 13:00\n```\n\nOptional field, but can provide a date to automatically trigger publication. Valid values are any string date values that [strtotime()](http:\/\/php.net\/manual\/en\/function.strtotime.php) supports.\n\n### Redirect\n\n```yaml\nredirect: '\/some\/custom\/route'\n```\n\nor\n\n```yaml\nredirect: 'http:\/\/someexternalsite.com'\n```\n\nYou can redirect to another internal or external page right from a page header.  Of course this means this page will not be displayed, but the page can still be in a collection, menu, etc because it will exist as a page within Grav.\n\nYou can also append a redirect code to a URL by using square brackets:\n\n```yaml\nredirect: '\/some\/custom\/route[303]'\n```\n\n### Routes\n\n```yaml\nroutes:\n  default: '\/my\/example\/page'\n  canonical: '\/canonical\/url\/alias'\n  aliases:\n    - '\/some\/other\/route'\n    - '\/can-be-any-valid-slug'\n```\n\nYou can now provide a **default route** that overrides the standard route structure as defined by the folder structure.\n\nYou can also specify a specific **canonical route** that can be used in themes to output a canonical link:\n\n```html\n<link rel=\"canonical\" href=\"https:\/\/yoursite\/dresses\/green-dresses-are-awesome\" \/>\n```\n\nLastly, you can specify an array of **route aliases** that can be used as alternative routes for a particular page.\n\n### Routable\n\n```yaml\nroutable: false\n```\n\nBy default, all pages are **routable**.  This means that they can be reached by pointing your browser to the URL of the page.  However, you may need to create a page that is created to hold specific content, but it is meant to be called directly by a plugin, other content, or even a theme directly.  A good example of this is a `404 Error` page.\n\nGrav automatically looks for a page with the route `\/error` if another page cannot be found.  With this being an actual page within Grav, you would have complete control over what this page looks like.  You probably do not want people accessing this page directly in their browser, however, so this page commonly has its `routable` variable set to false. Valid values are `true` or `false`.\n\n### SSL\n\n```yaml\nssl: true\n```\n\nYou can now enable a specific page to be forced with SSL **on** or **off**.  This **only works** with the `absolute_urls: true` option set in the `system.yaml` configuration.  This is because to be able to switch back and forth between SSL and non-SSL pages, you must be using full URLs with the protocol and host included.\n\n### Summary\n\n```yaml\nsummary:\n  enabled: true\n  format: short | long\n  size: int\n```\n\nThe **summary** option configures what the `page.summary()` method returns.  This is most often used in a blog-listing type scenario, but can be used anytime you need a synopsis or summary of the page content.  The scenarios are as follows:\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **enabled:** | Switch off page summary (the summary returns the same as the page content) |\n| **format:** | <ul><li>`long` = Any summary delimiter of the content will be ignored<li>`short` = Detect and truncate content up to summary delimiter position<\/ul> |\n[\/div]\n\nThe `size` attribute has different meanings when the format is set to `short` and `long`:\n\n[div class=\"table-keycol\"]\n| Short Size | Description |\n| -------- | ----------- |\n| **size: 0** | If no summary delimiter is found, the summary equals the page content, otherwise the content will be truncated up to summary delimiter position |\n| **size:** `int` | Always truncate the content after **int** chars. If a summary delimiter was found, then truncate content up to summary delimiter position |\n[\/div]\n\n[div class=\"table-keycol\"]\n| Long Size | Description |\n| -------- | ----------- |\n| **size: 0** | Summary equals the entire page content |\n| **size:** `int` | The content will be truncated after **int** chars, independent of summary delimiter position |\n[\/div]\n\n### Template\n\n```yaml\ntemplate: custom\n```\n\nAs explained in [the previous chapter](..\/content-pages), the template from the theme that is used to render a page is based on the filename of the `.md` file.\n\nSo a file called `default.md`, will use the `default` template in the active theme.  You can, of course, override this behavior by simply setting the `template` variable in the header and choosing a different template.\n\nIn the example above, the page will use the `custom` template from the theme.  This variable exists because you may need to change the template of a page programmatically from a plugin.\n\n### Template Format\n\n```yaml\ntemplate_format: xml\n```\n\nTraditionally, if you want a page to output a specific format (ie: xml, json, etc.) you needed to append the format to the url. For example, entering `http:\/\/example.com\/sitemap.xml` would tell the browser to render the content using the `xml` twig template ending in `.xml.twig`. This is all well and good, because we love doing things simply in Grav.\n\nUsing the `template_format` page header, we can tell the browser how to render the page without any need for extensions in the URL. By entering `template_format: xml` in our `sitemap` page, we can make `http:\/\/example.com\/sitemap` work for us without having to append `.xml` to the end of it.\n\nWe [used this method](https:\/\/github.com\/getgrav\/grav-plugin-sitemap\/commit\/00c23738bdbfe9683627bf0f99bda12eab9505d5#diff-190081f40350c0272970d9171f3437a2) with the [Grav Sitemap Plugin](https:\/\/github.com\/getgrav\/grav-plugin-sitemap).\n\n### Unpublish Date\n\n```yaml\nunpublish_date: 05\/17\/2015 00:32\n```\n\nOptional field, but can provide a date to automatically trigger un-publication. Valid values are any string date values that [strtotime()](http:\/\/php.net\/manual\/en\/function.strtotime.php) supports.\n\n### Visible\n\n```yaml\nvisible: false\n```\n\nBy default, a page is **visible** in the **navigation** if the surrounding folder has a numerical prefix, i.e. `\/01.home` is visible, while `\/error` is **not visible**. This behavior can be overwritten by setting the `visible` variable in the header. Valid values are `true` or `false`.\n\n## Custom Page Headers\n\nOf course, you can create your own custom page headers using any valid YAML syntax.  These would be page-specific and be available for any plugin, or theme to make use of. A good example of this would be to set some variable specific to a sitemap plugin, such as:\n\n[prism classes=\"language-yaml line-numbers\"]\nsitemap:\n    changefreq: monthly\n    priority: 1.03\n[\/prism]\n\nThe significance of these headers is that Grav does not use them by default. They are only read by the **sitemap plugin** to determine how often this particular page is modified and what its priority should be.\n\nAny page header such as this should be documented, and generally, there will be some default value that will be used if the page does not provide it.\n\nAnother example would be to store page-specific data that could then be used by Twig in the content of the page.\n\nFor example, you might have want to associate some author reference for the page. If you added these YAML settings to the page header:\n\n[prism classes=\"language-yaml line-numbers\"]\nauthor:\n    name: Sandy Johnson\n    twitter: @sandyjohnson\n    bio: Sandy is a freelance journalist and author of several publications on open source CMS platforms.\n[\/prism]\n\nYou could then access them from Twig:\n\n[prism classes=\"language-twig line-numbers\"]\n<section id=\"author-details\">\n    <h2>{{ page.header.author.name }}<\/h2>\n    <p>{{ page.header.author.bio }}<\/p>\n    <span>Contact: <a href=\"https:\/\/twitter.com\/{{ page.header.author.twitter }}\"><i class=\"fa fa-twitter\"><\/i><\/a><\/span>\n<\/section>\n[\/prism]\n\n## Meta Page Headers\n\nMeta headers allow you to set the [standard set of HTML **<meta> tags**](http:\/\/www.w3schools.com\/tags\/tag_meta.asp) for each page as well as [OpenGraph](http:\/\/ogp.me\/), [Facebook](https:\/\/developers.facebook.com\/docs\/sharing\/best-practices), and [Twitter](https:\/\/dev.twitter.com\/cards\/overview).\n\n#### Standard Metatag examples\n\n[prism classes=\"language-yaml line-numbers\"]\nmetadata:\n    refresh: 30\n    generator: 'Grav'\n    description: 'Your page description goes here'\n    keywords: 'HTML, CSS, XML, JavaScript'\n    author: 'John Smith'\n    robots: 'noindex, nofollow'\n    my_key: 'my_value'\n[\/prism]\n\nThis will produce the HTML:\n\n[prism classes=\"language-twig line-numbers\"]\n<meta name=\"generator\" content=\"Grav\" \/>\n<meta name=\"description\" content=\"Your page description goes here\" \/>\n<meta http-equiv=\"refresh\" content=\"30\" \/>\n<meta name=\"keywords\" content=\"HTML, CSS, XML, JavaScript\" \/>\n<meta name=\"author\" content=\"John Smith\" \/>\n<meta name=\"robots\" content=\"noindex, nofollow\" \/>\n<meta name=\"my_key\" content=\"my_value\" \/>\n[\/prism]\n\nAll HTML5 metatags are supported.\n\n#### OpenGraph Metatag examples\n\n[prism classes=\"language-yaml line-numbers\"]\nmetadata:\n    'og:title': The Rock\n    'og:type': video.movie\n    'og:url': http:\/\/www.imdb.com\/title\/tt0117500\/\n    'og:image': http:\/\/ia.media-imdb.com\/images\/rock.jpg\n[\/prism]\n\nThis will produce the HTML:\n\n[prism classes=\"language-html line-numbers\"]\n<meta name=\"og:title\" property=\"og:title\" content=\"The Rock\" \/>\n<meta name=\"og:type\" property=\"og:type\" content=\"video.movie\" \/>\n<meta name=\"og:url\" property=\"og:url\" content=\"http:\/\/www.imdb.com\/title\/tt0117500\/\" \/>\n<meta name=\"og:image\" property=\"og:image\" content=\"http:\/\/ia.media-imdb.com\/images\/rock.jpg\" \/>\n[\/prism]\n\nFor a full outline of all OpenGraph metatags that can be used, please consult the [official documentation](http:\/\/ogp.me\/).\n\n#### Facebook Metatag examples\n\n[prism classes=\"language-yaml line-numbers\"]\nmetadata:\n    'fb:app_id': your_facebook_app_id\n[\/prism]\n\nThis will produce the HTML:\n\n[prism classes=\"language-html line-numbers\"]\n<meta name=\"fb:app_id\" property=\"fb:app_id\" content=\"your_facebook_app_id\" \/>\n[\/prism]\n\nFacebook mostly uses OpenGraph metatags, but there are some Facebook-specific tags and these are support automatically by Grav.\n\n#### Twitter Metatag examples\n\n[prism classes=\"language-yaml line-numbers\"]\nmetadata:\n    'twitter:card' : summary\n    'twitter:site' : @flickr\n    'twitter:title' : Your Page Title\n    'twitter:description' : Your page description can contain summary information\n    'twitter:image' : https:\/\/farm6.staticflickr.com\/5510\/14338202952_93595258ff_z.jpg\n[\/prism]\n\nThis will produce the HTML:\n\n[prism classes=\"language-twig line-numbers\"]\n<meta name=\"twitter:card\" property=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:site\" property=\"twitter:site\" content=\"@flickr\" \/>\n<meta name=\"twitter:title\" property=\"twitter:title\" content=\"Your Page Title\" \/>\n<meta name=\"twitter:description\" property=\"twitter:description\" content=\"Your page description can contain summary information\" \/>\n<meta name=\"twitter:image\" property=\"twitter:image\" content=\"https:\/\/farm6.staticflickr.com\/5510\/14338202952_93595258ff_z.jpg\" \/>\n[\/prism]\n\nFor a full outline of all Twitter metatags that can be used, please consult the [official documentation](https:\/\/dev.twitter.com\/cards\/overview).\n\nThis really provides a lot of flexibility and power.\n\n## Collection Headers\n\nCollections have grown up! All [Collection Header information](..\/collections) is now broken out into [their own separate section](..\/collections).\n\n## Frontmatter.yaml\n\nAn advanced feature that can come in handy for some power users is the ability to use common frontmatter values via a `frontmatter.yaml` file located in the page folder.  This is particular useful when working with multi-language sites where you may wish to share a portion of the frontmatter between all the language versions of a given page.\n\nTo take advantage of this, simply create a `frontmatter.yaml` file alongside your page's `.md` file and add any valid frontmatter values.  For example:\n\n[prism classes=\"language-yaml line-numbers\"]\nmetadata:\n    generator: 'Super Grav'\n    description: Give your page a powerup with Grav!\n[\/prism]\n\n!!!! Utilizing frontmatter.yaml is a file-side feature and is **not supported** by the admin plugin.\n"},{"title":"Taxonomy","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/content\/taxonomy","taxonomy":{"categories":["docs"],"tags":[]},"content":"With **Grav**, the ability to group or tag pages is baked right into the system with **Taxonomy**.\n\n> **Taxonomy (general),** the practice and science (study) of classification of things or concepts, including the principles that underlie such classification.\n>\n> <cite>Wikipedia<\/cite>\n\nThere are a couple of key parts to using taxonomy in your site:\n\n1. Define a list of Taxonomy types in your [`site.yaml`](..\/..\/basics\/grav-configuration)\n2. Assign your pages to the appropriate `taxonomy` types with values.\n\n## Taxonomy Example\n\nThis concept is best explained with an example. Let us say you want to create a simple blog. In that blog, you will create posts that you might want to assign to certain tags to provide a **tag cloud** display. Also, you could have several authors, and you might want to assign each post to that author.\n\nAccomplishing this in Grav is a simple procedure. Grav provides a default `site.yaml` file that is located in the `system\/config` folder. By default that configuration defines two taxonomy types of `category` and `tag`:\n\n```yaml\ntaxonomies: [category,tag]\n```\n\nAs `tag` is already defined, you just need to add `authors`. To do this simply create a new `site.yaml` file in your `user\/config` folder and add the following line:\n\n```yaml\ntaxonomies: [category,tag,author]\n```\n\nThis will override the taxonomies that Grav knows about so that pages can be assigned to any of these three taxonomies.\n\nThe next step is to create some pages that makes use of these taxonomy types. For example, you could have a page that looks like this:\n\n[prism classes=\"language-markdown line-numbers\"]\n---\ntitle: Post 1\ntaxonomy:\n    tag: [animal, dog]\n    author: ksmith\n---\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\nconsequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\ncillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\nproident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n[\/prism]\n\n...and another page that looks like:\n\n[prism classes=\"language-markdown line-numbers\"]\n---\ntitle: Post 2\ntaxonomy:\n    tag: [animal, cat]\n    author: jdoe\n---\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\nconsequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\ncillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\nproident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n[\/prism]\n\n\nAs you can see in the YAML configuration, each page is assigning **values** to the **taxonomy types** we defined in our user `site.yaml` configuration. This information is used by Grav when the pages are processed and creates an internal **taxonomy map** which can be used to find pages based on the taxonomy you defined.\n\n!!!! Your pages do not have to use every taxonomy you define in your `site.yaml`, but you must define any taxonomy you use.\n\nIn your theme, you can easily display a list of pages that are written by `ksmith` by using `taxonomy.findTaxonomy()` to find them and iterate over them:\n\n[prism classes=\"language-twig line-numbers\"]\n<h2>Kevin Smith's Posts<\/h2>\n<ul>\n{% for post in taxonomy.findTaxonomy({'author':'ksmith'}) %}\n    <li>{{ post.title }}<\/li>\n{% endfor %}\n<\/ul>\n[\/prism]\n\nYou can also do sophisticated searches based on multiple taxonomies by using arrays\/hashes, for example:\n\n[prism classes=\"language-twig line-numbers\"]\n{% for post in taxonomy.findTaxonomy({'tag':['animal','cat'],'author':'jdoe'}) %}\n[\/prism]\n\nThis will find all posts with `tag` set to `animal` **and** `cat` **and** `author` set to `jdoe`. Basically, this will specifically find **Post 2**.\n\nIf you need a collection which includes one term **or** the other, just add the `'or'` parameter after the array, example:\n\n[prism classes=\"language-twig line-numbers\"]\n{% for post in taxonomy.findTaxonomy({'tag':['dog','cat']},'or') %}\n[\/prism]\n\nThis will find all posts with `tag` set to `dog` **or** `cat`.\n\n\n## Taxonomy based Collections\n\nWe covered this in an earlier chapter, but it is important to remember that you can also use taxonomies in the [page headers](..\/headers) to filter a collection of pages associated with a parent page. If you need a refresher on this subject, please refer back to that [chapter on taxonomy collection headers](..\/collections).\n\n## Adding Custom Taxonomy Values in Default and Options\n\nYou can use the format below in blueprints to override the `Default` and\/or `Options` taxonomies. An important note here is that if you are using this method to override both of these attributes, you should add `validate: type: commalist`, otherwise it may not function as desired.\n\n[prism classes=\"language-yaml line-numbers\"]\ntaxonomies:\n  fields:\n    header.taxonomy:\n      default:\n        category: ['blog','page']\n        tag: ['test']\n      options:\n        category: ['grav']\n      validate:\n        type: commalist\n[\/prism]\n"},{"title":"Image Linking","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/content\/image-linking","taxonomy":{"categories":["docs"],"tags":[]},"media":["pages.png"],"content":"Grav has a variety of flexible linking options that allow you to link images from one page to another, and even from remote sources. If you have ever linked files using HTML or worked with a file system using a command line, a lot of this should be elementary to pick up.\n\nWe will run to some easy examples using this very basic, trimmed down model of what a Grav site's **Pages** directory might look like.\n\n![Pages Directory](pages.png)\n\nUsing this directory structure as an example, we will take a look at the different types of links you can use to display media files in your content. We have image files in every folder, including one image for each blog post, and three images in a special `\/images` directory which acts as a page but contains only media files.\n\nThe use of the `\/images` folder serves as an example of how you can maintain a simple, centralized image directory to store files that are frequently used by multiple pages. This simplifies the linking process in these cases.\n\n!!!! If you decide to use a centralized image directory, be advised that this directory should exist within the `\/pages` folder as this folder is intended for front-end content.\n\nTo get us started, here is a quick look at some of the standard components of a Grav markdown-based image tag.\n\n```markdown\n![Alt Text](..\/path\/image.ext)\n```\n\n[div class=\"table-keycol\"]\n| String | Description                                                                                                              |\n| :----- | :-----                                                                                                                   |\n| `!`    | When placed at the beginning of a traditional markdown link tag, it indicates this is an image tag.                      |\n| `[]`   | The square bracket is used to wrap the **optional** alt-text for the image.                                              |\n| `()`   | The parenthesis is used to surround the reference to the image itself. This is placed directly after the square bracket. |\n| `..\/`  | When used in the link, it indicates a move up a directory.                                                               |\n[\/div]\n\n!!! You can combine a regular page link and an image link like to wrap an image in a link: `[![Alt text](\/path\/to\/img.jpg)](http:\/\/example.net\/)`\n\n### Slug Relative\n\n**Relative** image links use destinations set relative to the current page. This can be as simple as linking to another file in the current directory, such as an image file associated with the current page, or as complex as going up several directory levels and then back down to the specific folder\/file where an image may reside.\n\nWith relative links, the location of the source file is every bit as important as that of the destination. If either file in the mix is moved, changing the path between them, the link can be broken.\n\nThe advantage of this type of linking structure is that you can quickly switch between a local development server and a live server with a different domain name and as long as the file structure remains consistent, the links should work without a problem.\n\nA file link points to a particular file by name, rather than its directory or slug. If you were creating an image link in `pages\/01.blog\/test-post-1\/item.md` to `\/pages\/01.blog\/test-post-3\/test-image-3.jpg` you would use the following command.\n\n```markdown\n![Test Image 3](..\/test-post-3\/test-image-3.jpg)\n```\n\nThis link moves up one folder, as indicated by `..\/`, and then down one folder, pointing directly to `test-image-3.jpg` as the destination.\n\nIf we want to load `blog-header.jpg` from the `01.blog` directory, we would do the following:\n\n```markdown\n![Blog Header](..\/..\/blog\/blog-header.jpg)\n```\n\n! You do not need to include ordering numerals (`01.`) for slug relative links.\n\nGrav has integrated support for slugs in the header of the page's primary markdown file. This slug supersedes the folder name for the page, and any media files contained within.\n\nFor example, **Test Post 2** has a slug set through its markdown file (`\/pages\/01.blog\/test-post-2\/item.md`). The header of this file contains the following:\n\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Test Post 2\nslug: test-slug\ntaxonomy:\n    category: blog\n---\n[\/prism]\n\nYou will notice the slug `test-slug` has been set. Slugs set this way are completely optional, and do not have to be present. As mentioned in the last chapter, they do provide an easy way of linking. If a slug is set, then any link you make to a media file within that folder will have to be either **Slug Relative** or **Absolute** with a full URL set for the link.\n\nIf we want to link `test-image-2.jpg` from **Test Post 2**, we would enter the following:\n\n```markdown\n![Test Image 2](..\/test-slug\/test-image-2.jpg)\n```\n\nYou will notice that we navigated up one directory using (`..\/`) and then down into the `test-slug` page folder using the slug which was set in `\/pages\/01.blog\/test-post-2\/item.md` file.\n\n### Directory relative\n\n**Directory Relative** image links use destinations set relative to the current page. The main difference between a slug relative, and directory relative link, is that rather than using the URL slugs, you reference via the full path with folder names.\n\nAn example of this would be something like:\n\n```markdown\n![Test Image 3](..\/..\/01.blog\/02.my_folder\/test-image-3.jpg)\n```\n\n!! The main benefit of this, is that you can maintain link integrity in other systems outside of Grav, such as GitHub.\n\n### Absolute\n\nAbsolute links are similar to relative links, but are relative to the root of the site. In **Grav**, this is typically based in your **\/user\/pages\/** directory. This type of link can be done in two different ways.\n\nYou can do it in a similar fashion to the **Slug Relative** style which uses the slug, or directory name in the path for simplicity. This method removes potential issues of order changes later on (changing the number at the beginning of the folder name) breaking the link. This would be the most commonly used method of absolute linking.\n\nIn an absolute link, the link opens with a `\/`. Here is an example of an absolute link made to `pages\/01.blog\/test-post-2\/test-image-2.jpg` in the **Slug** style from `pages\/01.blog\/blog.md`.\n\n```markdown\n![Test Image 2](\/blog\/test-slug\/test-image-2.jpg)\n```\n\n!!! A powerful technique is to create a `user\/pages\/images\/` folder in your Grav site and put your images here.  Then you can easily reference them with an absolute URL from any Grav page: `\/images\/test-image-4.jpg` and still be able to perform [media actions](..\/media) on them.\n\n### PHP Streams\n\nNew in Grav 1.2 is the ability to reference and link images via PHP streams.  There are several built-in PHP streams available which are useful including:\n\n* `user:\/\/` - user folder. e.g. `user\/`\n* `image:\/\/` - images folder. e.g. `user\/images\/`\n* `theme:\/\/` - current theme.  e.g. `user\/themes\/antimatter\/`\n\nThese allow you to easily access images that are traditionally outside of the Pages hierarchy (`user\/pages\/`).\n\n```markdown\n![Stream Image](user:\/\/media\/images\/my-image.jpg)\n```\n\nor:\n\n```markdown\n![Stream Image](theme:\/\/images\/my-image.jpg)\n```\n\n### Remote\n\nRemote image links enable you to directly display pretty much any media file via its URL. This doesn't have to include your own site's content, but it can. Here is an example of how you would display to a remote image file.\n\n```markdown\n![Remote Image 1](https:\/\/getgrav.org\/images\/testimage.png)\n```\n\nYou can link to pretty much any direct URL, including secured HTTPS links.\n\n### Media Actions on Images\n\nOne of the main benefits of using images associated with pages is that it enables you to take advantage of [Grav's powerful media actions](..\/media). For example, here is a line you would use to load an image from another page:\n\n```markdown\n![Styling Example](..\/test-post-3\/test-image-3.jpg?cropResize=400,200)\n```\n\nor taking advantage of streams to access an image in your current theme:\n\n```markdown\n![Stream Image](theme:\/\/images\/default-avatar.jpg?cropZoom=200,200&brightness=-75)\n```\n\nYou will find more information about actions and other [media file functionality in the next chapter](..\/media).\n\n### Image Attributes\n\nA great new feature you can take advantage of is providing image attributes directly via the markdown syntax. This allows you to easily add **classes** and **id** HTML attributes without the need of [Markdown Extra](https:\/\/michelf.ca\/projects\/php-markdown\/extra\/).\n\nSome examples of this are:\n\n##### Single Class Attribute\n\n```markdown\n![My Image](my-image.jpg?classes=float-left)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<img src=\"\/your\/pages\/some-page\/my-image.jpg\" class=\"float-left\" \/>\n```\n\n##### Multiple Classes Attributes\n\n```markdown\n![My Image](my-image.jpg?classes=float-left,shadow)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<img src=\"\/your\/pages\/some-page\/my-image.jpg\" class=\"float-left shadow\" \/>\n```\n\n##### ID Attribute\n\n```markdown\n![My Image](my-image.jpg?id=special-id)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<img src=\"\/your\/pages\/some-page\/my-image.jpg\" id=\"special-id\" \/>\n```\n"},{"title":"Page Linking","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/content\/linking","taxonomy":{"categories":["docs"],"tags":[]},"media":["pages.jpg"],"content":"Grav has a variety of flexible linking options that allow you to link from one page to another, and even to remote pages. If you have ever linked files using HTML or worked with a file system using a command line, a lot of this should be very easy to pick up.\n\nWe will run to some easy examples using this very basic, trimmed down model of what a Grav site's **Pages** directory might look like.\n\n![Pages Directory](pages.jpg)\n\nUsing this directory structure as an example, we will take a look at the different types of links you can use in your content.\n\nTo get us started, here is a quick look at some of the common components of a Grav link, and what they mean.\n\n```markdown\n[Linked Content](..\/path\/slug\/page)\n```\n\n[div class=\"table-keycol\"]\n| String | Description |\n| :----- | :----- |\n| `[]`   | The square bracket is used to wrap the text or alternate content that becomes linked. In HTML, this would be the content placed between `<a href=\"\">` and `<\/a>` |\n| `()`   | The parenthesis is used to surround the link itself. This is placed directly after the square bracket. |\n| `..\/`  | When used in the link, it indicates a move up a directory. |\n[\/div]\n\n### Slug Relative\n\nGrav doesn't just limit your internal links to specific names within your file\/directory structure. It can also pull slugs assigned both in the header of the file, as well as the fallback directory name. This makes creating quick links easy as you don't have to remember the specific file name, but an easily remembered (and relevant) slug.\n\nGrav's templating engine uses file names to determine which template to apply to them. For example, a blog might use the standard file name `item.md` for each blog post. The blog post itself can be assigned a slug that makes more sense, such as `grass` or `grass-is-green`.\n\nDirectory names also have numbers assigned which helps with ordering. You don't have to include these numbers with slug-relative links. Grav ignores them when creating the slug, so your site's URL structure is cleaner.\n\nHere are a few examples of slug-relative links.\n\nIn this example, we're moving up a directory and loading the default page located in the `pages\/01.blue\/02.water\/item.md` directory from `pages\/01.blue\/01.sky\/item.md` The file, `item.md`, has no assigned slug, so Grav uses the directory name.\n\n```markdown\n[link](..\/water)\n```\n\nThis next example does a very similar thing, linking from `pages\/01.blue\/01.sky\/item.md` to `pages\/02.green\/02.tree\/item.md`, but when loading the `item.md` file, a slug has been assigned to the file of `tree-is-green`.\n\n```markdown\n[link](..\/..\/green\/tree-is-green)\n```\n\nThe slug placed in the header of `item.md` replaces the `green` slug from the defaulting folder name.\n\n### Directory relative\n\n**Directory Relative** links use destinations set relative to the current page. This can be as simple as linking to another file in the current directory, such as an image file, or as complex as going up several directory levels and then back down to the specific folder\/file you need to have displayed.\n\nWith relative links, the location of the source file is every bit as important as that of the destination. If either file in the mix is moved, changing the path between them, the link can be broken.\n\nThe advantage of this type of linking structure is that you can easily switch between a local development server and a live server with a different domain name and as long as the file structure remains consistent, the links should work without a problem.\n\nA file link points to a particular file by name, rather than its directory or slug. If you were creating a link from `pages\/01.blue\/01.sky\/item.md` to `\/pages\/02.green\/01.grass\/item.md` you would use the following command.\n\n```markdown\n[link](..\/..\/02.green\/01.grass\/item.md)\n```\n\nThis link moves up two folders, as indicated by `..\/..\/`, and then down two folders, pointing directly to `item.md` as the destination.\n\nSometimes, you just want to direct the user up a single directory, loading the default page. Since an exact file is not indicated, Grav is trusted to choose the right one to load. For a well-organized Grav site, this should be no problem.\n\nIn this example, we will be linking `pages\/01.blue\/01.sky\/item.md` to `\/pages\/02.green\/` which would load the `color.md` file by default.\n\n```markdown\n[link](..\/..\/02.green)\n```\n\nIf you want to link to a directory two steps up, you can do so using this process. \n\nThe next example is a lot like the file link we demonstrated earlier. Instead of linking directly to the file, we're linking to its directory, which should load the file we want anyway since it's the default file. If you were creating a link from `pages\/01.blue\/01.sky\/item.md` to `\/pages\/02.green\/01.grass\/` you would use the following command.\n\n```markdown\n[link](..\/..\/02.green\/01.grass)\n```\n\n### Absolute\n\nAbsolute links are similar to relative links, but are relative to the root of the site. In **Grav**, this is typically based in your **\/user\/pages\/** directory. This type of link can be done in two different ways.\n\nYou can do it in a similar fashion to the **Slug Relative** style which uses the slug, or directory name in the path for simplicity. This method removes potential issues of order changes later on (changing the number at the beginning of the folder name) breaking the link. This would be the most commonly used method of absolute linking.\n\nIn an absolute link, the link opens with a `\/`. Here is an example of an absolute link made to `pages\/01.blue\/01.sky\/item.md` in the **Slug** style.\n\n```markdown\n[link](\/blue\/sky)\n```\n\nThe second method is fashioned after the **Directory Relative** style detailed previously. This method leaves in elements like the ordering numbers at the beginning of directory names. While this does add the potential of a broken link when content is reordered, it is more reliable when used with services like [Github](https:\/\/github.com) where content links do not have the benefit of Grav's flexibility. Here is an example of an absolute link made to `pages\/01.blue\/01.sky\/item.md` using this style.\n\n```markdown\n[link](\/01.blue\/01.sky)\n```\n\n### Remote\n\nRemote links enable you to link directly to pretty much any file or document out there via its URL. This doesn't have to include your own site's content, but it can. Here is an example of how you would link to Google's home page.\n\n```markdown\n[link](http:\/\/www.google.com)\n```\n\nYou can link to pretty much any direct URL, including secured HTTPS links. For example:\n\n```markdown\n[link](https:\/\/github.com)\n```\n\n### Link Attributes\n\nA great new feature you can take advantage of is providing link attributes directly via the markdown syntax. This allows you to easily add **class**, **id**, **rel**, and **target** HTML attributes without the need of [Markdown Extra](https:\/\/michelf.ca\/projects\/php-markdown\/extra\/).\n\nSome examples of this are:\n\n##### Class\/Classes Attribute\n\n```markdown\n[Big Button](..\/some-page?classes=button,big)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page\" class=\"button big\">Big Button<\/a>\n```\n\n##### ID Attribute\n\n```markdown\n[Unique Button](..\/some-page?id=important-button)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page\" id=\"important-button\">Unique Button<\/a>\n```\n\n##### Rel Attribute\n\n```markdown\n[NoFollow Link](..\/some-page?rel=nofollow)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page\" rel=\"nofollow\">NoFollow Link<\/a>\n```\n\n##### Target Attribute\n\n```markdown\n[Link in new Tab](..\/some-page?target=_blank)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page\" target=\"_blank\">Link in new Tab<\/a>\n```\n\n##### Attribute Combinations\n\n```markdown\n[Combinations of Attributes](..\/some-page?target=_blank&classes=button)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page\" target=\"_blank\" class=\"button\">Combinations of Attributes<\/a>\n```\n\n##### Attribute Combinations with Anchors\n\n```markdown\n[Element Anchor](..\/some-page?target=_blank&classes=button#element-id)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page#element-id\" target=\"_blank\" class=\"button\">Element Anchor<\/a>\n```\n\n##### Pass-through of Non-Supported Attributes\n\n```markdown\n[Pass-through of 'cat' attribute](..\/some-page?classes=underline&cat=black)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page?cat=black\" class=\"underline\">Pass-through of 'cat' attribute<\/a>\n```\n\n##### Pass-through Supported Attributes\n\n```markdown\n[Pass-through all attributes](..\/some-page?classes=underline&rel=nofollow&noprocess)\n```\n\nwhich will result in HTML similar to:\n\n```html\n<a href=\"\/your\/pages\/some-page?rel=nofollow&classes=underline\">Pass-through all attributes<\/a>\n```\n\n"},{"title":"Markdown Syntax","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/content\/markdown","taxonomy":{"categories":["docs"],"tags":[]},"content":"Let's face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\n\n**Markdown** is a better way to write **HTML**, without all the complexities and ugliness that usually accompanies it.\n\nSome of the key benefits are:\n\n1. Markdown is simple to learn, with minimal extra characters, so it's also quicker to write content.\n2. Less chance of errors when writing in markdown.\n3. Produces valid XHTML output.\n4. Keeps the content and the visual display separate, so you cannot mess up the look of your site.\n5. Write in any text editor or Markdown application you like.\n6. Markdown is a joy to use!\n\nJohn Gruber, the author of Markdown, puts it like this:\n\n> The overriding design goal for Markdown\u2019s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it\u2019s been marked up with tags or formatting instructions. While Markdown\u2019s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown\u2019s syntax is the format of plain text email.\n> -- <cite>John Gruber<\/cite>\n\n\nGrav ships with built-in support for [Markdown](http:\/\/daringfireball.net\/projects\/markdown\/) and [Markdown Extra](https:\/\/michelf.ca\/projects\/php-markdown\/extra\/). You must enable **Markdown Extra** in your `system.yaml` configuration file.\n\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\n\n!! <i class=\"fa fa-bookmark\"><\/i> Bookmark this page for easy future reference!\n\n## Headings\n\nHeadings from `h1` through `h6` are constructed with a `#` for each level:\n\n[prism classes=\"language-markdown\"]\n# h1 Heading\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n[\/prism]\n\nRenders to:\n\n# h1 Heading\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\nHTML:\n\n[prism classes=\"language-html\"]\n<h1>h1 Heading<\/h1>\n<h2>h2 Heading<\/h2>\n<h3>h3 Heading<\/h3>\n<h4>h4 Heading<\/h4>\n<h5>h5 Heading<\/h5>\n<h6>h6 Heading<\/h6>\n[\/prism]\n\n\n\n## Comments\n\nComments should be HTML compatible\n\n[prism classes=\"language-html\"]\n<!--\nThis is a comment\n-->\n[\/prism]\nComment below should **NOT** be seen:\n\n<!--\nThis is a comment\n-->\n\n\n\n## Horizontal Rules\n\nThe HTML `<hr>` element is for creating a \"thematic break\" between paragraph-level elements. In markdown, you can create a `<hr>` with any of the following:\n\n* `___`: three consecutive underscores\n* `---`: three consecutive dashes\n* `***`: three consecutive asterisks\n\nrenders to:\n\n___\n\n---\n\n***\n\n\n\n\n\n## Body Copy\n\nBody copy written as normal, plain text will be wrapped with `<p><\/p>` tags in the rendered HTML.\n\nSo this body copy:\n\n[prism classes=\"language-markdown\"]\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\n[\/prism]\nrenders to this HTML:\n\n[prism classes=\"language-html\"]\n<p>Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.<\/p>\n[\/prism]\n\nA **line break** can be done with 2 spaces followed by 1 return.\n\n\n\n\n\n## Inline HTML\n\nIf you need a certain HTML tag (with a class) you can simply use HTML:\n\n[prism classes=\"language-html\"]\nParagraph in Markdown.\n\n<div class=\"class\">\n    This is <b>HTML<\/b>\n<\/div>\n\nParagraph in Markdown.\n[\/prism]\n\n\n\n\n\n## Emphasis\n\n### Bold\nFor emphasizing a snippet of text with a heavier font-weight.\n\nThe following snippet of text is **rendered as bold text**.\n\n[prism classes=\"language-markdown\"]\n**rendered as bold text**\n[\/prism]\nrenders to:\n\n**rendered as bold text**\n\nand this HTML\n\n[prism classes=\"language-html\"]\n<strong>rendered as bold text<\/strong>\n[\/prism]\n\n### Italics\nFor emphasizing a snippet of text with italics.\n\nThe following snippet of text is _rendered as italicized text_.\n\n[prism classes=\"language-markdown\"]\n_rendered as italicized text_\n[\/prism]\n\nrenders to:\n\n_rendered as italicized text_\n\nand this HTML:\n\n[prism classes=\"language-html\"]\n<em>rendered as italicized text<\/em>\n[\/prism]\n\n\n### strikethrough\nIn GFM (GitHub flavored Markdown) you can do strikethroughs.\n\n[prism classes=\"language-markdown\"]\n~~Strike through this text.~~\n[\/prism]\nWhich renders to:\n\n~~Strike through this text.~~\n\nHTML:\n\n[prism classes=\"language-html\"]\n<del>Strike through this text.<\/del>\n[\/prism]\n\n\n\n\n## Blockquotes\nFor quoting blocks of content from another source within your document.\n\nAdd `>` before any text you want to quote.\n\n[prism classes=\"language-markdown\"]\n> **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n[\/prism]\n\nRenders to:\n\n> **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n\nand this HTML:\n\n[prism classes=\"language-html\"]\n<blockquote>\n  <p><strong>Fusion Drive<\/strong> combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.<\/p>\n<\/blockquote>\n[\/prism]\n\nBlockquotes can also be nested:\n\n[prism classes=\"language-markdown\"]\n> Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\nNunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n>> Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor\nodio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n[\/prism]\n\nRenders to:\n\n> Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\nNunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n>> Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor\nodio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n\n\n\n\n## Notices\n\n! The old mechanism for notices overriding the block quote syntax (`>>>`) has been deprecated.  Notices are now handled via a dedicated plugin called [Markdown Notices](https:\/\/github.com\/getgrav\/grav-plugin-markdown-notices)\n\n\n\n## Lists\n\n### Unordered\nA list of items in which the order of the items does not explicitly matter.\n\nYou may use any of the following symbols to denote bullets for each list item:\n\n[prism classes=\"language-markdown\"]\n* valid bullet\n- valid bullet\n+ valid bullet\n[\/prism]\n\nFor example\n\n[prism classes=\"language-markdown\"]\n+ Lorem ipsum dolor sit amet\n+ Consectetur adipiscing elit\n+ Integer molestie lorem at massa\n+ Facilisis in pretium nisl aliquet\n+ Nulla volutpat aliquam velit\n  - Phasellus iaculis neque\n  - Purus sodales ultricies\n  - Vestibulum laoreet porttitor sem\n  - Ac tristique libero volutpat at\n+ Faucibus porta lacus fringilla vel\n+ Aenean sit amet erat nunc\n+ Eget porttitor lorem\n[\/prism]\n\nRenders to:\n\n+ Lorem ipsum dolor sit amet\n+ Consectetur adipiscing elit\n+ Integer molestie lorem at massa\n+ Facilisis in pretium nisl aliquet\n+ Nulla volutpat aliquam velit\n  - Phasellus iaculis neque\n  - Purus sodales ultricies\n  - Vestibulum laoreet porttitor sem\n  - Ac tristique libero volutpat at\n+ Faucibus porta lacus fringilla vel\n+ Aenean sit amet erat nunc\n+ Eget porttitor lorem\n\nAnd this HTML\n\n[prism classes=\"language-html\"]\n<ul>\n  <li>Lorem ipsum dolor sit amet<\/li>\n  <li>Consectetur adipiscing elit<\/li>\n  <li>Integer molestie lorem at massa<\/li>\n  <li>Facilisis in pretium nisl aliquet<\/li>\n  <li>Nulla volutpat aliquam velit\n    <ul>\n      <li>Phasellus iaculis neque<\/li>\n      <li>Purus sodales ultricies<\/li>\n      <li>Vestibulum laoreet porttitor sem<\/li>\n      <li>Ac tristique libero volutpat at<\/li>\n    <\/ul>\n  <\/li>\n  <li>Faucibus porta lacus fringilla vel<\/li>\n  <li>Aenean sit amet erat nunc<\/li>\n  <li>Eget porttitor lorem<\/li>\n<\/ul>\n[\/prism]\n\n### Ordered\n\nA list of items in which the order of items does explicitly matter.\n\n[prism classes=\"language-markdown\"]\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n4. Facilisis in pretium nisl aliquet\n5. Nulla volutpat aliquam velit\n6. Faucibus porta lacus fringilla vel\n7. Aenean sit amet erat nunc\n8. Eget porttitor lorem\n[\/prism]\n\nRenders to:\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n4. Facilisis in pretium nisl aliquet\n5. Nulla volutpat aliquam velit\n6. Faucibus porta lacus fringilla vel\n7. Aenean sit amet erat nunc\n8. Eget porttitor lorem\n\nAnd this HTML:\n\n[prism classes=\"language-html\"]\n<ol>\n  <li>Lorem ipsum dolor sit amet<\/li>\n  <li>Consectetur adipiscing elit<\/li>\n  <li>Integer molestie lorem at massa<\/li>\n  <li>Facilisis in pretium nisl aliquet<\/li>\n  <li>Nulla volutpat aliquam velit<\/li>\n  <li>Faucibus porta lacus fringilla vel<\/li>\n  <li>Aenean sit amet erat nunc<\/li>\n  <li>Eget porttitor lorem<\/li>\n<\/ol>\n[\/prism]\n\n**TIP**: If you just use `1.` for each number, Markdown will automatically number each item. For example:\n\n[prism classes=\"language-markdown\"]\n1. Lorem ipsum dolor sit amet\n1. Consectetur adipiscing elit\n1. Integer molestie lorem at massa\n1. Facilisis in pretium nisl aliquet\n1. Nulla volutpat aliquam velit\n1. Faucibus porta lacus fringilla vel\n1. Aenean sit amet erat nunc\n1. Eget porttitor lorem\n[\/prism]\n\nRenders to:\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n4. Facilisis in pretium nisl aliquet\n5. Nulla volutpat aliquam velit\n6. Faucibus porta lacus fringilla vel\n7. Aenean sit amet erat nunc\n8. Eget porttitor lorem\n\n\n\n\n\n## Code\n\n### Inline code\nWrap inline snippets of code with `` ` ``.\n\n[prism classes=\"language-markdown\"]\nIn this example, `<section><\/section>` should be wrapped as **code**.\n[\/prism]\n\nRenders to:\n\nIn this example, `<section><\/section>` should be wrapped with **code**.\n\nHTML:\n\n[prism classes=\"language-html\"]\n<p>In this example, <code>&lt;section&gt;&lt;\/section&gt;<\/code> should be wrapped with <strong>code<\/strong>.<\/p>\n[\/prism]\n\n### Indented code\n\nOr indent several lines of code by at least four spaces, as in:\n\n<pre>\n  \/\/ Some comments\n  line 1 of code\n  line 2 of code\n  line 3 of code\n<\/pre>\n\nRenders to:\n\n[prism classes=\"language-txt\"]\n\/\/ Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n[\/prism]\n\nHTML:\n\n[prism classes=\"language-html\"]\n<pre>\n  <code>\n    \/\/ Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n  <\/code>\n<\/pre>\n[\/prism]\n\n\n### Block code \"fences\"\n\nUse \"fences\"  ```` ``` ```` to block in multiple lines of code with a language attribute\n\n<pre>\n```\nSample text here...\n```\n<\/pre>\n\nHTML:\n\n[prism classes=\"language-html\"]\n<pre language-html>\n  <code>Sample text here...<\/code>\n<\/pre>\n[\/prism]\n\n### Syntax highlighting\n\nGFM, or \"GitHub Flavored Markdown\" also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \"fence\", ` ```js `, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code:\n\n<pre>\n```js\ngrunt.initConfig({\n  assemble: {\n    options: {\n      assets: 'docs\/assets',\n      data: 'src\/data\/*.{json,yml}',\n      helpers: 'src\/custom-helpers.js',\n      partials: ['src\/partials\/**\/*.{hbs,md}']\n    },\n    pages: {\n      options: {\n        layout: 'default.hbs'\n      },\n      files: {\n        '.\/': ['src\/templates\/pages\/index.hbs']\n      }\n    }\n  }\n};\n```\n<\/pre>\n\nRenders to:\n\n[prism classes=\"language-js\"]\ngrunt.initConfig({\n  assemble: {\n    options: {\n      assets: 'docs\/assets',\n      data: 'src\/data\/*.{json,yml}',\n      helpers: 'src\/custom-helpers.js',\n      partials: ['src\/partials\/**\/*.{hbs,md}']\n    },\n    pages: {\n      options: {\n        layout: 'default.hbs'\n      },\n      files: {\n        '.\/': ['src\/templates\/pages\/index.hbs']\n      }\n    }\n  }\n};\n[\/prism]\n\n!!! For syntax highlighting to work, the [Highlight plugin](https:\/\/github.com\/getgrav\/grav-plugin-highlight) needs to be installed and enabled. It in turn utilizes a jquery plugin, so jquery needs to be loaded in your theme too.\n\n\n\n\n\n## Tables\nTables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n\n\n[prism classes=\"language-markdown\"]\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n[\/prism]\n\nRenders to:\n\n[div class=\"table\"]\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n[\/div]\n\nAnd this HTML:\n\n[prism classes=\"language-html\"]\n<table>\n  <thead>\n    <tr>\n      <th>Option<\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>data<\/td>\n      <td>path to data files to supply the data that will be passed into templates.<\/td>\n    <\/tr>\n    <tr>\n      <td>engine<\/td>\n      <td>engine to be used for processing templates. Handlebars is the default.<\/td>\n    <\/tr>\n    <tr>\n      <td>ext<\/td>\n      <td>extension to be used for dest files.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n[\/prism]\n\n### Right aligned text\n\nAdding a colon on the right side of the dashes below any heading will right align text for that column.\n\n[prism classes=\"language-markdown\"]\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n[\/prism]\n\n[div class=\"table\"]\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n[\/div]\n\n\n\n\n\n## Links\n\n### Basic link\n\n[prism classes=\"language-markdown\"]\n[Assemble](http:\/\/assemble.io)\n[\/prism]\n\nRenders to (hover over the link, there is no tooltip):\n\n[Assemble](http:\/\/assemble.io)\n\nHTML:\n\n[prism classes=\"language-html\"]\n<a href=\"http:\/\/assemble.io\">Assemble<\/a>\n[\/prism]\n\n\n### Add a title\n\n[prism classes=\"language-markdown\"]\n[Upstage](https:\/\/github.com\/upstage\/ \"Visit Upstage!\")\n[\/prism]\n\nRenders to (hover over the link, there should be a tooltip):\n\n[Upstage](https:\/\/github.com\/upstage\/ \"Visit Upstage!\")\n\nHTML:\n\n[prism classes=\"language-html\"]\n<a href=\"https:\/\/github.com\/upstage\/\" title=\"Visit Upstage!\">Upstage<\/a>\n[\/prism]\n\n### Named Anchors\n\nNamed anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n\n[prism classes=\"language-markdown\"]\n# Table of Contents\n  * [Chapter 1](#chapter-1)\n  * [Chapter 2](#chapter-2)\n  * [Chapter 3](#chapter-3)\n[\/prism]\nwill jump to these sections:\n\n[prism classes=\"language-markdown\"]\n## Chapter 1 <a id=\"chapter-1\"><\/a>\nContent for chapter one.\n\n## Chapter 2 <a id=\"chapter-2\"><\/a>\nContent for chapter one.\n\n## Chapter 3 <a id=\"chapter-3\"><\/a>\nContent for chapter one.\n[\/prism]\n\n**NOTE** that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\n\n\n\n\n\n## Images\nImages have a similar syntax to links but include a preceding exclamation point.\n\n[prism classes=\"language-markdown\"]\n![Minion](http:\/\/octodex.github.com\/images\/minion.png)\n[\/prism]\n![Minion](http:\/\/octodex.github.com\/images\/minion.png)\n\nor\n\n[prism classes=\"language-markdown\"]\n![Alt text](http:\/\/octodex.github.com\/images\/stormtroopocat.jpg \"The Stormtroopocat\")\n[\/prism]\n![Alt text](http:\/\/octodex.github.com\/images\/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n[prism classes=\"language-markdown\"]\n![Alt text][id]\n[\/prism]\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: http:\/\/octodex.github.com\/images\/dojocat.jpg  \"The Dojocat\"\n\n\n    [id]: http:\/\/octodex.github.com\/images\/dojocat.jpg  \"The Dojocat\"\n"},{"title":"Pages","date":"2019-04-05T22:59:56+00:00","url":"http:\/\/localhost\/docs\/content\/content-pages","taxonomy":{"categories":["docs"],"tags":[]},"media":["content-listing.png","content-modular.png","content-standard.png","page-types.png"],"content":"In Grav-speak, **Pages** are the fundamental building blocks of your site. They are how you write content and provide navigation in the Grav system.\n\nCombining content and navigation ensures that the system is intuitive to use for even the most inexperienced of content authors. However, this system, in conjunction with powerful taxonomy capabilities, is still powerful enough to handle complex content requirements.\n\nGrav natively supports **3 types of Pages** that allow you to create a rich selection of web content. Those types are:\n\n![Grav Page Types](page-types.png)\n\n#### Regular Page\n\n![Standard Page](content-standard.png)\n\nA regular Page is generally a single page such as a **blog post**, **contact form**, **error page** etc. This is the most common type of page that you will create. By default a Page is considered a regular page unless you tell Grav otherwise.\n\nWhen you download and install the **Core Grav** package, you are greeted by a standard page. We covered creating a simple regular Page in the [Basic Tutorial](\/basics\/basic-tutorial).\n\n#### Listing Page\n\n![Listing Page](content-listing.png)\n\nThis is an extension of a regular Page. This is a page that has a reference to a collection of pages.\n\nThe most straightforward approach to setting this up is to create **child-pages** below the Listing Page. An example of this would be a **blog listing page**, where you would display a summary list of blog posts that exist as child-pages.\n\nThere is also some configuration settings to **control the order** of the listing as well as a **limit on the number of items**, and whether or not **pagination** should be enabled.\n\n!! A sample **Blog Skeleton** using a **Listing Page** can be found in the [Grav Downloads](https:\/\/getgrav.org\/downloads\/skeletons).\n\n#### Modular Page\n\n![Modular Page](content-modular.png)\n\nA Modular Page is a special type of listing page because it builds a **single modular page** from its **child modular sub-pages**. This allows for the ability to build very complex **one-page layouts** from Modules. This is accomplished by constructing the **Modular Page** from multiple **Modular sub-page folders** found in the modular page's primary folder.\n\n!! A sample **One-Page Skeleton** using a **Modular Page** can be found in the [Grav Downloads](https:\/\/getgrav.org\/downloads\/skeletons).\n\nEach of these page types follows the same basic structure, so before we can get into the nitty-gritty of each type, we must explain how pages in Grav are constructed.\n\n!! A Module, because it is intended to be part of another page, is inherently not a page you can reach directly via a URL. Because of this, all modular pages are by default set as **non-routable**.\n\n## Folders\n\nAll content pages are located in the `\/user\/pages` folder. Each **Page** should be placed in its own folder.\n\n!! Folder names should also be valid **slugs**. Slugs are entirely lowercase, with accented characters replaced by letters from the Latin alphabet and whitespace characters replaced by a dash or an underscore, to avoid being encoded.\n\nGrav understands that any integer value followed by a period will be solely for ordering, and is removed internally in the system. For example, if you have a folder named `01.home`, Grav will treat this folder as `home`, but will ensure that with default ordering, it comes before `02.blog`.\n\n[prism classes=\"language-txt line-numbers\"]\n\/user\n\u2514\u2500\u2500 \/pages\n    \u251c\u2500\u2500 \/01.home\n    \u2502   \u251c\u2500\u2500 \/_header\n    \u2502   \u251c\u2500\u2500 \/_features\n    \u2502   \u251c\u2500\u2500 \/_body\n    \u251c\u2500\u2500 \/02.blog\n    \u2502   \u251c\u2500\u2500 \/blog-item-1\n    \u2502   \u251c\u2500\u2500 \/blog-item-2\n    \u2502   \u251c\u2500\u2500 \/blog-item-3\n    \u2502   \u251c\u2500\u2500 \/blog-item-4\n    \u2502   \u2514\u2500\u2500 \/blog-item-5\n    \u251c\u2500\u2500 \/03.about-us\n    \u2514\u2500\u2500 \/error\n[\/prism]\n\nYour site must have an entry-point so that it knows where to go when you point your browser to the root of your site. For example if you were to enter `http:\/\/yoursite.com` in your browser, by default Grav expects an alias `home\/`, but you can override the home-location by changing the `home.alias` option in the [Grav configuration file](\/basics\/grav-configuration).\n\n**Modular sub-pages** are identified by an underscore (`_`) before the folder name. This is a special folder type that is intended to be used only with **modular content**.  These are **not routable** and **not visible** in the navigation. An example of a modular page setup would be a folder such as `user\/pages\/01.home`. Home is configured as a **modular page** that would contain a collection of child pages, and would be constructed from the `_header`, `_features`, and `_body` modular sub-pages.\n\nThe textual name of each folder defaults to the _slug_ that the system uses as part of the URL. For example if you have a folder such as `\/user\/pages\/02.blog`, the slug for this page would default to `blog`, and the full URL would be `http:\/\/yoursite.com\/blog`. A blog item page, located in `\/user\/pages\/02.blog\/blog-item-5` would be accessible via `http:\/\/yoursite.com\/blog\/blog-item-5`.\n\nIf no number is provided as a prefix of the folder name, the page is considered to be **invisible**, and will not show up in the navigation. An example of this would be the `error` page in the above folder-structure.\n\n!! This can actually be overridden in the page itself by setting the [visible parameter](\/content\/headers#visible) in the headers.\n\n## Ordering\n\nWhen dealing with collections, there are several options available to control how folders are ordered. The most important option is set in the `content.order.by` of the page configuration settings. The options are:\n\n[div class=\"table-keycol\"]\n| Property | Description |\n| -------- | ----------- |\n| **default**  | The order based on the file system, i.e. `01.home` before `02.advark`|\n| **title**    | The order is based on the title as defined in each page |\n| **basename** | The order is based on the alphabetic folder without numeric order |\n| **date**     | The order based on the date as defined in each page|\n| **modified** | The order based on the modified timestamp of the page |\n| **folder**   | The order based on the folder name with any numerical prefix, i.e. `01.`, removed |\n| **header.x** | The order based on any page header field. i.e. `header.taxonomy.year`. Also a default can be added via a pipe. i.e. `header.taxonomy.year|2015` |\n| **manual**   | The order based on the `order_manual` variable |\n| **random**   | The order is randomized |\n[\/div]\n\nYou can specifically define a manual order by providing a list of options to the `content.order.custom` configuration setting. This will work in conjunction with the `content.order.by` because it first tries to order the pages manually, but any pages not specified in the manual order, will fall through and be ordered by the ordering provided.\n\n!! You can override the **default behavior** for folder ordering and the direction in which the ordering occurs by setting the `pages.order.dir` and the `pages.order.by` options in the [Grav system configuration file](\/basics\/grav-configuration).\n\n## Page File\n\nWithin the page-folder, we create the actual page-file. The filename should end with `.md` to indicate that it is a Markdown-formatted file. Technically, it is Markdown with YAML FrontMatter, which sounds impressive but really is not a big deal at all. We will cover the details of the file-structure soon.\n\nThe important thing to understand is the name of the file directly references the name of the theme's template file that will be used to render. The standard name for the main template file is **default**, so the file would be named `default.md`.\n\nYou can, of course, name your file whatever you like, for example: `document.md`, which would make Grav look for a template file in the theme that matches, such as the **document.html.twig** Twig-template.\n\n!! This behavior can be overridden in the page by setting the [template parameter](\/content\/headers#template) in the headers.\n\nAn example page file could look like this:\n\n[div class=\"no-margin-bottom\"]\n[prism classes=\"language-yaml line-numbers\"]\n---\ntitle: Page Title\ntaxonomy:\n    category: blog\n---\n[\/prism]\n[\/div]\n[div class=\"no-margin-top\"]\n[prism classes=\"language-markdown line-numbers\" ln-start=\"6\"]\n# Page Title\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque porttitor eu\nfelis sed ornare. Sed a mauris venenatis, pulvinar velit vel, dictum enim. Phasellus\nac rutrum velit. **Nunc lorem** purus, hendrerit sit amet augue aliquet, iaculis\nultricies nisl. Suspendisse tincidunt euismod risus, _quis feugiat_ arcu tincidunt\neget. Nulla eros mi, commodo vel ipsum vel, aliquet congue odio. Class aptent taciti\nsociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque\nvelit orci, laoreet at adipiscing eu, interdum quis nibh. Nunc a accumsan purus.\n[\/prism]\n[\/div]\n\nThe settings between the pair of `---` markers are known as the YAML FrontMatter, and it is comprised of basic YAML settings for the page.\n\nIn this example, we are explicitly setting the title, as well the taxonomy to **blog** so we can filter it later.  The content after the second `---` is the actual content that will be compiled and rendered as HTML on your site.  This is written in [Markdown](\/content\/markdown), which will be covered in detail in a future chapter. Just know that the `#`, `**`, and `_` markers translate to **heading 1**, **bold**, and **italics**, respectively.\n\n!! Ensure you save your `.md` files as `UTF-8`-encoded files. This will ensure they work with language-specific special characters.\n\n### Summary Size and Separator\n\nThere is a setting in the `site.yaml` file that lets you define a default size (in characters) of the summary that can be used via `page.summary()` to display a summary or synopsis of the page. This is particularly useful for blogs where you want to have a listing that contains just summary information, and not the full page content.\n\nBy default, this value is `300` characters. You can override this in your `user\/config\/site.yaml` file, but an even more useful approach is to use the manual **summary separator** also known as the **summary delimiter**: `===`.\n\nYou need to ensure you put this in your content with blank lines **above** and **below**. For example:\n\n[prism classes=\"language-markdown line-numbers\"]\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\nconsequat.\n\n===\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse\ncillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\nproident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\nconsequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\ncillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\nproident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n[\/prism]\n\nThis will use the text above the separator when referenced by `page.summary()` and the full page content when referenced by `page.content()`.\n\n!! When using `page.summary()`, the summary size setting will be used if the separator is not found in the page content.\n\n### Finding other Pages\n\nGrav has a useful feature that allows you to find another page and perform actions on that page. This can be accomplished with the `find()`-method that simply takes the **route** and returns a new Page-object.\n\nThis allows you to perform a wide variety of functionality from any page on your Grav site. For example, you may want to provide a list of all current projects on a particular project detail page:\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n# All Projects\n<ul>\n{% for p in page.find('\/projects').children if p != page %}\n<li><a href=\"{{p.url}}\">{{ p.title }}<\/a><\/li>\n{% endfor %}\n<\/ul>\n[\/prism]\n{% endverbatim %}\n\nIn the next section, we will continue to dig into the specifics of a Page in detail.\n\n### contentMeta\n\nReferencing pages and content is straightforward, but what about the content that doesn't get rendered on the front-end along with the rest of the page?\n\nWhen Grav reads page content, it stores this content in cache. That way, the next time the page is rendered it doesn't have to read all the content from the `.md` file. Generally, this content is all rendered to the front-end. However, there are instances where having some additional data stored alongside the page in the cache is useful.\n\nThis is where `contentMeta()` comes in. We use ContentMeta in our [Shortcode](https:\/\/github.com\/getgrav\/grav-plugin-shortcode-core)-plugin to [retrieve sections from other pages](https:\/\/github.com\/getgrav\/grav-plugin-shortcode-core#sections-from-other-pages) using shortcodes. For example:\n\n{% verbatim %}\n[prism classes=\"language-twig line-numbers\"]\n<div id=\"author\">{{ page.find('\/my\/custom\/page').contentMeta.shortcodeMeta.shortcode.section.author }}<\/div>\n[\/prism]\n{% endverbatim %}\n\nWe used this in Shortcode Core to store CSS and JS assets that the shortcode on the page requires, however this feature can be used to store just about any data structure you need.\n"},{"title":"Content","date":"2017-07-23T12:51:22+00:00","url":"http:\/\/localhost\/docs\/content","taxonomy":{"categories":["docs"],"tags":[]},"content":"### Chapter 2\n\n# Content\n\nIn **Grav**, content is priority **#1**.  Find out how to create and organize your content quickly and intuitively.\n"},{"title":"Learn","date":"2019-08-23T08:48:40+00:00","url":"http:\/\/localhost\/docs","taxonomy":{"categories":[],"tags":[]},"media":["book Cover.jpg","index.html"]}];